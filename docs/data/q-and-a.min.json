[{"markdown":{"question":"What is CSS BEM?","answer":"The BEM (Block Element Modifier) methodology is a naming convention for CSS classes in order to keep CSS more maintainable by defining namespaces to solve scoping issues. A Block is a standalone component that is reusable across projects and acts as a \"namespace\" for sub components (Elements). Modifiers are used as flags when a Block or Element is in a certain state or is different in structure or style.\n\n```css\n/* block component */\n.block {\n}\n/* element */\n.block__element {\n}\n/* modifier */\n.block__element--modifier {\n}\n```\n\nExample\n\n```css\n.button {\n  display: inline-block;\n  border-radius: 3px;\n  padding: 7px 12px;\n  border: 1px solid #d5d5d5;\n  background-image: linear-gradient(#eee, #ddd);\n  font: 700 13px/18px Helvetica, arial;\n}\n.button--state-success {\n  color: #fff;\n  background: #569e3d linear-gradient(#79d858, #569e3d) repeat-x;\n  border-color: #4a993e;\n}\n.button--state-danger {\n  color: #900;\n}\n```\n\n```html\n<button class=\"button\">Normal button</button>\n<button class=\"button button--state-success\">Success button</button>\n<button class=\"button button--state-danger\">Danger button</button>\n```\n\n### Benefits\n\n- Modularity: Block styles are never dependent on other elements on a page, so you will never experience problems from cascading.\n- Reusability: Composing independent blocks in different ways, and reusing them intelligently, reduces the amount of CSS code that you will have to maintain.\n- Structure: BEM methodology gives your CSS code a solid structure that remains simple and easy to understand.\n\n#### resourse\n\n- https://www.smashingmagazine.com/2016/06/battling-bem-extended-edition-common-problems-and-how-to-avoid-them/\n- https://github.com/learning-zone/css-interview-questions"},"original":{"markdown":"## What is CSS BEM?\n\nThe BEM (Block Element Modifier) methodology is a naming convention for CSS classes in order to keep CSS more maintainable by defining namespaces to solve scoping issues. A Block is a standalone component that is reusable across projects and acts as a \"namespace\" for sub components (Elements). Modifiers are used as flags when a Block or Element is in a certain state or is different in structure or style.\n\n```css\n/* block component */\n.block {\n}\n/* element */\n.block__element {\n}\n/* modifier */\n.block__element--modifier {\n}\n```\n\nExample\n\n```css\n.button {\n  display: inline-block;\n  border-radius: 3px;\n  padding: 7px 12px;\n  border: 1px solid #d5d5d5;\n  background-image: linear-gradient(#eee, #ddd);\n  font: 700 13px/18px Helvetica, arial;\n}\n.button--state-success {\n  color: #fff;\n  background: #569e3d linear-gradient(#79d858, #569e3d) repeat-x;\n  border-color: #4a993e;\n}\n.button--state-danger {\n  color: #900;\n}\n```\n\n```html\n<button class=\"button\">Normal button</button>\n<button class=\"button button--state-success\">Success button</button>\n<button class=\"button button--state-danger\">Danger button</button>\n```\n\n### Benefits\n\n- Modularity: Block styles are never dependent on other elements on a page, so you will never experience problems from cascading.\n- Reusability: Composing independent blocks in different ways, and reusing them intelligently, reduces the amount of CSS code that you will have to maintain.\n- Structure: BEM methodology gives your CSS code a solid structure that remains simple and easy to understand.\n\n#### resourse\n\n- https://www.smashingmagazine.com/2016/06/battling-bem-extended-edition-common-problems-and-how-to-avoid-them/\n- https://github.com/learning-zone/css-interview-questions\n","html":"<h2>What is CSS BEM?</h2>\n<p>The BEM (Block Element Modifier) methodology is a naming convention for CSS classes in order to keep CSS more maintainable by defining namespaces to solve scoping issues. A Block is a standalone component that is reusable across projects and acts as a \"namespace\" for sub components (Elements). Modifiers are used as flags when a Block or Element is in a certain state or is different in structure or style.</p>\n<pre><code class=\"prettyprint css\">/* block component */\n.block {\n}\n/* element */\n.block__element {\n}\n/* modifier */\n.block__element--modifier {\n}</code></pre>\n<p>Example</p>\n<pre><code class=\"prettyprint css\">.button {\n  display: inline-block;\n  border-radius: 3px;\n  padding: 7px 12px;\n  border: 1px solid #d5d5d5;\n  background-image: linear-gradient(#eee, #ddd);\n  font: 700 13px/18px Helvetica, arial;\n}\n.button--state-success {\n  color: #fff;\n  background: #569e3d linear-gradient(#79d858, #569e3d) repeat-x;\n  border-color: #4a993e;\n}\n.button--state-danger {\n  color: #900;\n}</code></pre>\n<pre><code class=\"prettyprint html\">&lt;button class=\"button\"&gt;Normal button&lt;/button&gt;\n&lt;button class=\"button button--state-success\"&gt;Success button&lt;/button&gt;\n&lt;button class=\"button button--state-danger\"&gt;Danger button&lt;/button&gt;</code></pre>\n<h3>Benefits</h3><ul><li>Modularity: Block styles are never dependent on other elements on a page, so you will never experience problems from cascading.</li><li>Reusability: Composing independent blocks in different ways, and reusing them intelligently, reduces the amount of CSS code that you will have to maintain.</li><li>Structure: BEM methodology gives your CSS code a solid structure that remains simple and easy to understand.</li></ul>\n<h4>resourse</h4><ul><li><a href=\"https://www.smashingmagazine.com/2016/06/battling-bem-extended-edition-common-problems-and-how-to-avoid-them\">https://www.smashingmagazine.com/2016/06/battling-bem-extended-edition-common-problems-and-how-to-avoid-them</a>/</li><li><a href=\"https://github.com/learning-zone/css-interview-questions\">https://github.com/learning-zone/css-interview-questions</a></li></ul>"},"_id":"What-is-CSS-BEM","html":{"question":"<p>What is CSS BEM?</p>","answer":"<p>The BEM (Block Element Modifier) methodology is a naming convention for CSS classes in order to keep CSS more maintainable by defining namespaces to solve scoping issues. A Block is a standalone component that is reusable across projects and acts as a \"namespace\" for sub components (Elements). Modifiers are used as flags when a Block or Element is in a certain state or is different in structure or style.</p>\n<pre><code class=\"prettyprint css\">/* block component */\n.block {\n}\n/* element */\n.block__element {\n}\n/* modifier */\n.block__element--modifier {\n}</code></pre>\n<p>Example</p>\n<pre><code class=\"prettyprint css\">.button {\n  display: inline-block;\n  border-radius: 3px;\n  padding: 7px 12px;\n  border: 1px solid #d5d5d5;\n  background-image: linear-gradient(#eee, #ddd);\n  font: 700 13px/18px Helvetica, arial;\n}\n.button--state-success {\n  color: #fff;\n  background: #569e3d linear-gradient(#79d858, #569e3d) repeat-x;\n  border-color: #4a993e;\n}\n.button--state-danger {\n  color: #900;\n}</code></pre>\n<pre><code class=\"prettyprint html\">&lt;button class=\"button\"&gt;Normal button&lt;/button&gt;\n&lt;button class=\"button button--state-success\"&gt;Success button&lt;/button&gt;\n&lt;button class=\"button button--state-danger\"&gt;Danger button&lt;/button&gt;</code></pre>\n<h3>Benefits</h3><ul><li>Modularity: Block styles are never dependent on other elements on a page, so you will never experience problems from cascading.</li><li>Reusability: Composing independent blocks in different ways, and reusing them intelligently, reduces the amount of CSS code that you will have to maintain.</li><li>Structure: BEM methodology gives your CSS code a solid structure that remains simple and easy to understand.</li></ul>\n<h4>resourse</h4><ul><li><a href=\"https://www.smashingmagazine.com/2016/06/battling-bem-extended-edition-common-problems-and-how-to-avoid-them\">https://www.smashingmagazine.com/2016/06/battling-bem-extended-edition-common-problems-and-how-to-avoid-them</a>/</li><li><a href=\"https://github.com/learning-zone/css-interview-questions\">https://github.com/learning-zone/css-interview-questions</a></li></ul>"},"label":"css","filename":"bem","question":"What is CSS BEM?","answer":"The BEM (Block Element Modifier) methodology is a naming convention for CSS classes in order to keep CSS more maintainable by defining namespaces to solve scoping issues. A Block is a standalone component that is reusable across projects and acts as a \"namespace\" for sub components (Elements). Modifiers are used as flags when a Block or Element is in a certain state or is different in structure or style.\n\n```css\n/* block component */\n.block {\n}\n/* element */\n.block__element {\n}\n/* modifier */\n.block__element--modifier {\n}\n```\n\nExample\n\n```css\n.button {\n  display: inline-block;\n  border-radius: 3px;\n  padding: 7px 12px;\n  border: 1px solid #d5d5d5;\n  background-image: linear-gradient(#eee, #ddd);\n  font: 700 13px/18px Helvetica, arial;\n}\n.button--state-success {\n  color: #fff;\n  background: #569e3d linear-gradient(#79d858, #569e3d) repeat-x;\n  border-color: #4a993e;\n}\n.button--state-danger {\n  color: #900;\n}\n```\n\n```html\n<button class=\"button\">Normal button</button>\n<button class=\"button button--state-success\">Success button</button>\n<button class=\"button button--state-danger\">Danger button</button>\n```\n\n### Benefits\n\n- Modularity: Block styles are never dependent on other elements on a page, so you will never experience problems from cascading.\n- Reusability: Composing independent blocks in different ways, and reusing them intelligently, reduces the amount of CSS code that you will have to maintain.\n- Structure: BEM methodology gives your CSS code a solid structure that remains simple and easy to understand.\n\n#### resourse\n\n- https://www.smashingmagazine.com/2016/06/battling-bem-extended-edition-common-problems-and-how-to-avoid-them/\n- https://github.com/learning-zone/css-interview-questions"},{"markdown":{"question":"Event loop","answer":"The event loop is a single-threaded loop that monitors the call stack and checks if there is any work to be done in the task queue. If the call stack is empty and there are callback functions in the task queue, a function is dequeued and pushed onto the call stack to be executed.\n\nIf you haven't already checked out Philip Robert's [talk on the Event Loop](https://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html), you should. It is one of the most viewed videos on JavaScript.\n\n![](../../img/event_loop.png)\n\n```js\nwindow.setTimeout(calculate, 500);\n```\n\n#### References\n\n- https://www.taniarascia.com/asynchronous-javascript-event-loop-callbacks-promises-async-await/\n- https://www.geeksforgeeks.org/what-is-an-event-loop-in-javascript/\n- https://javascript.info/event-loop\n- https://geekflare.com/javascript-event-loops/\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop\n- https://darrylmendonez.medium.com/javascript-execution-order-e1bebc3976ca\n- https://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html"},"original":{"markdown":"## Event loop\n\nThe event loop is a single-threaded loop that monitors the call stack and checks if there is any work to be done in the task queue. If the call stack is empty and there are callback functions in the task queue, a function is dequeued and pushed onto the call stack to be executed.\n\nIf you haven't already checked out Philip Robert's [talk on the Event Loop](https://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html), you should. It is one of the most viewed videos on JavaScript.\n\n![](../../img/event_loop.png)\n\n```js\nwindow.setTimeout(calculate, 500);\n```\n\n#### References\n\n- https://www.taniarascia.com/asynchronous-javascript-event-loop-callbacks-promises-async-await/\n- https://www.geeksforgeeks.org/what-is-an-event-loop-in-javascript/\n- https://javascript.info/event-loop\n- https://geekflare.com/javascript-event-loops/\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop\n- https://darrylmendonez.medium.com/javascript-execution-order-e1bebc3976ca\n- https://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html\n","html":"<h2>Event loop</h2>\n<p>The event loop is a single-threaded loop that monitors the call stack and checks if there is any work to be done in the task queue. If the call stack is empty and there are callback functions in the task queue, a function is dequeued and pushed onto the call stack to be executed.</p>\n<p>If you haven't already checked out Philip Robert's <a href=\"https://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html\">talk on the Event Loop</a>, you should. It is one of the most viewed videos on JavaScript.</p>\n<p><img src=\"../../img/event_loop.png\" /></p>\n<pre><code class=\"prettyprint js\">window.setTimeout(calculate, 500);</code></pre>\n<h4>References</h4><ul><li><a href=\"https://www.taniarascia.com/asynchronous-javascript-event-loop-callbacks-promises-async-await\">https://www.taniarascia.com/asynchronous-javascript-event-loop-callbacks-promises-async-await</a>/</li><li><a href=\"https://www.geeksforgeeks.org/what-is-an-event-loop-in-javascript\">https://www.geeksforgeeks.org/what-is-an-event-loop-in-javascript</a>/</li><li><a href=\"https://javascript.info/event-loop\">https://javascript.info/event-loop</a></li><li><a href=\"https://geekflare.com/javascript-event-loops\">https://geekflare.com/javascript-event-loops</a>/</li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop</a></li><li><a href=\"https://darrylmendonez.medium.com/javascript-execution-order-e1bebc3976ca\">https://darrylmendonez.medium.com/javascript-execution-order-e1bebc3976ca</a></li><li><a href=\"https://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html\">https://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html</a></li></ul>"},"_id":"Event-loop","html":{"question":"<p>Event loop</p>","answer":"<p>The event loop is a single-threaded loop that monitors the call stack and checks if there is any work to be done in the task queue. If the call stack is empty and there are callback functions in the task queue, a function is dequeued and pushed onto the call stack to be executed.</p>\n<p>If you haven't already checked out Philip Robert's <a href=\"https://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html\">talk on the Event Loop</a>, you should. It is one of the most viewed videos on JavaScript.</p>\n<p><img src=\"../../img/event_loop.png\" /></p>\n<pre><code class=\"prettyprint js\">window.setTimeout(calculate, 500);</code></pre>\n<h4>References</h4><ul><li><a href=\"https://www.taniarascia.com/asynchronous-javascript-event-loop-callbacks-promises-async-await\">https://www.taniarascia.com/asynchronous-javascript-event-loop-callbacks-promises-async-await</a>/</li><li><a href=\"https://www.geeksforgeeks.org/what-is-an-event-loop-in-javascript\">https://www.geeksforgeeks.org/what-is-an-event-loop-in-javascript</a>/</li><li><a href=\"https://javascript.info/event-loop\">https://javascript.info/event-loop</a></li><li><a href=\"https://geekflare.com/javascript-event-loops\">https://geekflare.com/javascript-event-loops</a>/</li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop</a></li><li><a href=\"https://darrylmendonez.medium.com/javascript-execution-order-e1bebc3976ca\">https://darrylmendonez.medium.com/javascript-execution-order-e1bebc3976ca</a></li><li><a href=\"https://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html\">https://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html</a></li></ul>"},"label":"js","filename":"event_loop","question":"Event loop","answer":"The event loop is a single-threaded loop that monitors the call stack and checks if there is any work to be done in the task queue. If the call stack is empty and there are callback functions in the task queue, a function is dequeued and pushed onto the call stack to be executed.\n\nIf you haven't already checked out Philip Robert's [talk on the Event Loop](https://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html), you should. It is one of the most viewed videos on JavaScript.\n\n![](../../img/event_loop.png)\n\n```js\nwindow.setTimeout(calculate, 500);\n```\n\n#### References\n\n- https://www.taniarascia.com/asynchronous-javascript-event-loop-callbacks-promises-async-await/\n- https://www.geeksforgeeks.org/what-is-an-event-loop-in-javascript/\n- https://javascript.info/event-loop\n- https://geekflare.com/javascript-event-loops/\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop\n- https://darrylmendonez.medium.com/javascript-execution-order-e1bebc3976ca\n- https://2014.jsconf.eu/speakers/philip-roberts-what-the-heck-is-the-event-loop-anyway.html"},{"markdown":{"question":"What is the difference between Call, Apply and Bind?","answer":"**a.) call()**\n\nThe call() method invokes a function with a given `this` value and arguments provided one by one\n\n```javascript\nvar employee1 = { firstName: \"John\", lastName: \"Rodson\" };\nvar employee2 = { firstName: \"Jimmy\", lastName: \"Baily\" };\n\nfunction invite(greeting1, greeting2) {\n  console.log(\n    greeting1 + \" \" + this.firstName + \" \" + this.lastName + \", \" + greeting2\n  );\n}\n\ninvite.call(employee1, \"Hello\", \"How are you?\"); // Hello John Rodson, How are you?\ninvite.call(employee2, \"Hello\", \"How are you?\"); // Hello Jimmy Baily, How are you?\n```\n\n**b.) apply()**\n\nInvokes the function and allows you to pass in arguments as an array\n\n```javascript\nvar employee1 = { firstName: \"John\", lastName: \"Rodson\" };\nvar employee2 = { firstName: \"Jimmy\", lastName: \"Baily\" };\n\nfunction invite(greeting1, greeting2) {\n  console.log(\n    greeting1 + \" \" + this.firstName + \" \" + this.lastName + \", \" + greeting2\n  );\n}\n\ninvite.apply(employee1, [\"Hello\", \"How are you?\"]); // Hello John Rodson, How are you?\ninvite.apply(employee2, [\"Hello\", \"How are you?\"]); // Hello Jimmy Baily, How are you?\n```\n\n**c.) bind()**\n\nreturns a new function, allowing you to pass in an array and any number of arguments\n\n```javascript\nvar employee1 = { firstName: \"John\", lastName: \"Rodson\" };\nvar employee2 = { firstName: \"Jimmy\", lastName: \"Baily\" };\n\nfunction invite(greeting1, greeting2) {\n  console.log(\n    greeting1 + \" \" + this.firstName + \" \" + this.lastName + \", \" + greeting2\n  );\n}\n\nvar inviteEmployee1 = invite.bind(employee1);\nvar inviteEmployee2 = invite.bind(employee2);\ninviteEmployee1(\"Hello\", \"How are you?\"); // Hello John Rodson, How are you?\ninviteEmployee2(\"Hello\", \"How are you?\"); // Hello Jimmy Baily, How are you?\n```\n\n#### References"},"original":{"markdown":"## What is the difference between Call, Apply and Bind?\n\n**a.) call()**\n\nThe call() method invokes a function with a given `this` value and arguments provided one by one\n\n```javascript\nvar employee1 = { firstName: \"John\", lastName: \"Rodson\" };\nvar employee2 = { firstName: \"Jimmy\", lastName: \"Baily\" };\n\nfunction invite(greeting1, greeting2) {\n  console.log(\n    greeting1 + \" \" + this.firstName + \" \" + this.lastName + \", \" + greeting2\n  );\n}\n\ninvite.call(employee1, \"Hello\", \"How are you?\"); // Hello John Rodson, How are you?\ninvite.call(employee2, \"Hello\", \"How are you?\"); // Hello Jimmy Baily, How are you?\n```\n\n**b.) apply()**\n\nInvokes the function and allows you to pass in arguments as an array\n\n```javascript\nvar employee1 = { firstName: \"John\", lastName: \"Rodson\" };\nvar employee2 = { firstName: \"Jimmy\", lastName: \"Baily\" };\n\nfunction invite(greeting1, greeting2) {\n  console.log(\n    greeting1 + \" \" + this.firstName + \" \" + this.lastName + \", \" + greeting2\n  );\n}\n\ninvite.apply(employee1, [\"Hello\", \"How are you?\"]); // Hello John Rodson, How are you?\ninvite.apply(employee2, [\"Hello\", \"How are you?\"]); // Hello Jimmy Baily, How are you?\n```\n\n**c.) bind()**\n\nreturns a new function, allowing you to pass in an array and any number of arguments\n\n```javascript\nvar employee1 = { firstName: \"John\", lastName: \"Rodson\" };\nvar employee2 = { firstName: \"Jimmy\", lastName: \"Baily\" };\n\nfunction invite(greeting1, greeting2) {\n  console.log(\n    greeting1 + \" \" + this.firstName + \" \" + this.lastName + \", \" + greeting2\n  );\n}\n\nvar inviteEmployee1 = invite.bind(employee1);\nvar inviteEmployee2 = invite.bind(employee2);\ninviteEmployee1(\"Hello\", \"How are you?\"); // Hello John Rodson, How are you?\ninviteEmployee2(\"Hello\", \"How are you?\"); // Hello Jimmy Baily, How are you?\n```\n\n#### References\n","html":"<h2>What is the difference between Call, Apply and Bind?</h2>\n<p><strong>a.) call()</strong></p>\n<p>The call() method invokes a function with a given <code>this</code> value and arguments provided one by one</p>\n<pre><code class=\"prettyprint javascript\">var employee1 = { firstName: \"John\", lastName: \"Rodson\" };\nvar employee2 = { firstName: \"Jimmy\", lastName: \"Baily\" };\n\nfunction invite(greeting1, greeting2) {\n  console.log(\n    greeting1 + \" \" + this.firstName + \" \" + this.lastName + \", \" + greeting2\n  );\n}\n\ninvite.call(employee1, \"Hello\", \"How are you?\"); // Hello John Rodson, How are you?\ninvite.call(employee2, \"Hello\", \"How are you?\"); // Hello Jimmy Baily, How are you?</code></pre>\n<p><strong>b.) apply()</strong></p>\n<p>Invokes the function and allows you to pass in arguments as an array</p>\n<pre><code class=\"prettyprint javascript\">var employee1 = { firstName: \"John\", lastName: \"Rodson\" };\nvar employee2 = { firstName: \"Jimmy\", lastName: \"Baily\" };\n\nfunction invite(greeting1, greeting2) {\n  console.log(\n    greeting1 + \" \" + this.firstName + \" \" + this.lastName + \", \" + greeting2\n  );\n}\n\ninvite.apply(employee1, [\"Hello\", \"How are you?\"]); // Hello John Rodson, How are you?\ninvite.apply(employee2, [\"Hello\", \"How are you?\"]); // Hello Jimmy Baily, How are you?</code></pre>\n<p><strong>c.) bind()</strong></p>\n<p>returns a new function, allowing you to pass in an array and any number of arguments</p>\n<pre><code class=\"prettyprint javascript\">var employee1 = { firstName: \"John\", lastName: \"Rodson\" };\nvar employee2 = { firstName: \"Jimmy\", lastName: \"Baily\" };\n\nfunction invite(greeting1, greeting2) {\n  console.log(\n    greeting1 + \" \" + this.firstName + \" \" + this.lastName + \", \" + greeting2\n  );\n}\n\nvar inviteEmployee1 = invite.bind(employee1);\nvar inviteEmployee2 = invite.bind(employee2);\ninviteEmployee1(\"Hello\", \"How are you?\"); // Hello John Rodson, How are you?\ninviteEmployee2(\"Hello\", \"How are you?\"); // Hello Jimmy Baily, How are you?</code></pre>\n<h4>References</h4>"},"_id":"What-is-the-difference-between-Call,-Apply-and-Bind","html":{"question":"<p>What is the difference between Call, Apply and Bind?</p>","answer":"<p><strong>a.) call()</strong></p>\n<p>The call() method invokes a function with a given <code>this</code> value and arguments provided one by one</p>\n<pre><code class=\"prettyprint javascript\">var employee1 = { firstName: \"John\", lastName: \"Rodson\" };\nvar employee2 = { firstName: \"Jimmy\", lastName: \"Baily\" };\n\nfunction invite(greeting1, greeting2) {\n  console.log(\n    greeting1 + \" \" + this.firstName + \" \" + this.lastName + \", \" + greeting2\n  );\n}\n\ninvite.call(employee1, \"Hello\", \"How are you?\"); // Hello John Rodson, How are you?\ninvite.call(employee2, \"Hello\", \"How are you?\"); // Hello Jimmy Baily, How are you?</code></pre>\n<p><strong>b.) apply()</strong></p>\n<p>Invokes the function and allows you to pass in arguments as an array</p>\n<pre><code class=\"prettyprint javascript\">var employee1 = { firstName: \"John\", lastName: \"Rodson\" };\nvar employee2 = { firstName: \"Jimmy\", lastName: \"Baily\" };\n\nfunction invite(greeting1, greeting2) {\n  console.log(\n    greeting1 + \" \" + this.firstName + \" \" + this.lastName + \", \" + greeting2\n  );\n}\n\ninvite.apply(employee1, [\"Hello\", \"How are you?\"]); // Hello John Rodson, How are you?\ninvite.apply(employee2, [\"Hello\", \"How are you?\"]); // Hello Jimmy Baily, How are you?</code></pre>\n<p><strong>c.) bind()</strong></p>\n<p>returns a new function, allowing you to pass in an array and any number of arguments</p>\n<pre><code class=\"prettyprint javascript\">var employee1 = { firstName: \"John\", lastName: \"Rodson\" };\nvar employee2 = { firstName: \"Jimmy\", lastName: \"Baily\" };\n\nfunction invite(greeting1, greeting2) {\n  console.log(\n    greeting1 + \" \" + this.firstName + \" \" + this.lastName + \", \" + greeting2\n  );\n}\n\nvar inviteEmployee1 = invite.bind(employee1);\nvar inviteEmployee2 = invite.bind(employee2);\ninviteEmployee1(\"Hello\", \"How are you?\"); // Hello John Rodson, How are you?\ninviteEmployee2(\"Hello\", \"How are you?\"); // Hello Jimmy Baily, How are you?</code></pre>\n<h4>References</h4>"},"label":"js","filename":"apply-call-bind","question":"What is the difference between Call, Apply and Bind?","answer":"**a.) call()**\n\nThe call() method invokes a function with a given `this` value and arguments provided one by one\n\n```javascript\nvar employee1 = { firstName: \"John\", lastName: \"Rodson\" };\nvar employee2 = { firstName: \"Jimmy\", lastName: \"Baily\" };\n\nfunction invite(greeting1, greeting2) {\n  console.log(\n    greeting1 + \" \" + this.firstName + \" \" + this.lastName + \", \" + greeting2\n  );\n}\n\ninvite.call(employee1, \"Hello\", \"How are you?\"); // Hello John Rodson, How are you?\ninvite.call(employee2, \"Hello\", \"How are you?\"); // Hello Jimmy Baily, How are you?\n```\n\n**b.) apply()**\n\nInvokes the function and allows you to pass in arguments as an array\n\n```javascript\nvar employee1 = { firstName: \"John\", lastName: \"Rodson\" };\nvar employee2 = { firstName: \"Jimmy\", lastName: \"Baily\" };\n\nfunction invite(greeting1, greeting2) {\n  console.log(\n    greeting1 + \" \" + this.firstName + \" \" + this.lastName + \", \" + greeting2\n  );\n}\n\ninvite.apply(employee1, [\"Hello\", \"How are you?\"]); // Hello John Rodson, How are you?\ninvite.apply(employee2, [\"Hello\", \"How are you?\"]); // Hello Jimmy Baily, How are you?\n```\n\n**c.) bind()**\n\nreturns a new function, allowing you to pass in an array and any number of arguments\n\n```javascript\nvar employee1 = { firstName: \"John\", lastName: \"Rodson\" };\nvar employee2 = { firstName: \"Jimmy\", lastName: \"Baily\" };\n\nfunction invite(greeting1, greeting2) {\n  console.log(\n    greeting1 + \" \" + this.firstName + \" \" + this.lastName + \", \" + greeting2\n  );\n}\n\nvar inviteEmployee1 = invite.bind(employee1);\nvar inviteEmployee2 = invite.bind(employee2);\ninviteEmployee1(\"Hello\", \"How are you?\"); // Hello John Rodson, How are you?\ninviteEmployee2(\"Hello\", \"How are you?\"); // Hello Jimmy Baily, How are you?\n```\n\n#### References"},{"markdown":{"question":"chaining","answer":"#### References"},"original":{"markdown":"## chaining\n\n#### References\n","html":"<h2>chaining</h2>\n<h4>References</h4>"},"_id":"chaining","html":{"question":"<p>chaining</p>","answer":"<h4>References</h4>"},"label":"js","filename":"chaining","question":"chaining","answer":"#### References"},{"markdown":{"question":"Equality (==) vs. Identity (===)","answer":"Remember when performing comparisons, **the equality operator** (`==`) will attempt to make the data types the same before proceeding. On the other hand, **the identity operator** (`===`) requires both data types to be the same, as a prerequisite.\n\nLet’s understand with an example. See the code below :\n\n```js\nvar valueOne = 3;\nvar valueTwo = \"3\";\nif (valueOne == valueTwo) {\n  console.log(\"ValueOne and ValueTwo are the same\");\n} else {\n  console.log(\"ValueOne and ValueTwo are NOT the same\");\n}\n```\n\nCan you guess the output? You may or may not be surprised, but these values are considered to be the same.\n\n> Output is: ValueOne and ValueTwo are the same\n\nThe reason why the `==` operator reasons that `\"3\"` and `3` are the same is because it actually coverts the operands (the values either side of the `==` operator) to the same type before it does the comparison.\n\nHowever, if we change the operator to an identity operator, as shown here, we see quite different output:\n\n```js\nvar valueOne = 3;\nvar valueTwo = \"3\";\nif (valueOne === valueTwo) {\n  console.log(\"ValueOne and ValueTwo are the same\");\n} else {\n  console.log(\"ValueOne and ValueTwo are NOT the same\");\n}\n```\n\nNow with identity operator, output is:\n\n> Output is: ValueOne and ValueTwo are NOT the same\n\nSince we used the `===` operator on this occasion, and because this operator does not do any type conversion, we see that the string value `\"3\"` and the number `3` are not the same after all.\n\n**When in doubt, a relatively safe choice is simply to use the identity operator (`===`) as a matter of habit. Of course, the safest choice is to familiarize yourself with the differences, so that you know what is actually happening under the hood.**\n\n## summary\n\nKEY DIFFERENCES:\n\n- '=' is used for assigning values to a variable, '==' is used for comparing two variables, but it ignores the datatype of variable whereas '===' is used for comparing two variables, but this operator also checks datatype and compares two values.\n- '=' is called as assignment operator, '==' is called as comparison operator whereas It is also called as comparison operator.\n- '=' does not return true or false, '==' Return true only if the two operands are equal while '===' returns true only if both values and data types are the same for the two variables.\n\n### What is the difference between `==` and `===`?\n\n`==` is the abstract equality operator while `===` is the strict equality operator. The `==` operator will compare for equality after doing any necessary type conversions. The `===` operator will not do type conversion, so if two values are not the same type `===` will simply return `false`. When using `==`, funky things can happen, such as:\n\n```js\n1 == \"1\"; // true\n1 == [1]; // true\n1 == true; // true\n0 == \"\"; // true\n0 == \"0\"; // true\n0 == false; // true\n```\n\nMy advice is never to use the `==` operator, except for convenience when comparing against `null` or `undefined`, where `a == null` will return `true` if `a` is `null` or `undefined`.\n\n```js\nvar a = null;\nconsole.log(a == null); // true\nconsole.log(a == undefined); // true\n```\n\n#### References\n\n- https://stackoverflow.com/questions/359494/which-equals-operator-vs-should-be-used-in-javascript-comparisons\n- https://www.guru99.com/difference-equality-strict-operator-javascript.html\n- https://howtodoinjava.com/javascript/javascript-equality-vs-identity-operators/\n- https://medium.com/@ludico8/identity-vs-equality-battle-of-understanding-vs-758d396e922"},"original":{"markdown":"## Equality (==) vs. Identity (===)\n\nRemember when performing comparisons, **the equality operator** (`==`) will attempt to make the data types the same before proceeding. On the other hand, **the identity operator** (`===`) requires both data types to be the same, as a prerequisite.\n\nLet’s understand with an example. See the code below :\n\n```js\nvar valueOne = 3;\nvar valueTwo = \"3\";\nif (valueOne == valueTwo) {\n  console.log(\"ValueOne and ValueTwo are the same\");\n} else {\n  console.log(\"ValueOne and ValueTwo are NOT the same\");\n}\n```\n\nCan you guess the output? You may or may not be surprised, but these values are considered to be the same.\n\n> Output is: ValueOne and ValueTwo are the same\n\nThe reason why the `==` operator reasons that `\"3\"` and `3` are the same is because it actually coverts the operands (the values either side of the `==` operator) to the same type before it does the comparison.\n\nHowever, if we change the operator to an identity operator, as shown here, we see quite different output:\n\n```js\nvar valueOne = 3;\nvar valueTwo = \"3\";\nif (valueOne === valueTwo) {\n  console.log(\"ValueOne and ValueTwo are the same\");\n} else {\n  console.log(\"ValueOne and ValueTwo are NOT the same\");\n}\n```\n\nNow with identity operator, output is:\n\n> Output is: ValueOne and ValueTwo are NOT the same\n\nSince we used the `===` operator on this occasion, and because this operator does not do any type conversion, we see that the string value `\"3\"` and the number `3` are not the same after all.\n\n**When in doubt, a relatively safe choice is simply to use the identity operator (`===`) as a matter of habit. Of course, the safest choice is to familiarize yourself with the differences, so that you know what is actually happening under the hood.**\n\n## summary\n\nKEY DIFFERENCES:\n\n- '=' is used for assigning values to a variable, '==' is used for comparing two variables, but it ignores the datatype of variable whereas '===' is used for comparing two variables, but this operator also checks datatype and compares two values.\n- '=' is called as assignment operator, '==' is called as comparison operator whereas It is also called as comparison operator.\n- '=' does not return true or false, '==' Return true only if the two operands are equal while '===' returns true only if both values and data types are the same for the two variables.\n\n### What is the difference between `==` and `===`?\n\n`==` is the abstract equality operator while `===` is the strict equality operator. The `==` operator will compare for equality after doing any necessary type conversions. The `===` operator will not do type conversion, so if two values are not the same type `===` will simply return `false`. When using `==`, funky things can happen, such as:\n\n```js\n1 == \"1\"; // true\n1 == [1]; // true\n1 == true; // true\n0 == \"\"; // true\n0 == \"0\"; // true\n0 == false; // true\n```\n\nMy advice is never to use the `==` operator, except for convenience when comparing against `null` or `undefined`, where `a == null` will return `true` if `a` is `null` or `undefined`.\n\n```js\nvar a = null;\nconsole.log(a == null); // true\nconsole.log(a == undefined); // true\n```\n\n#### References\n\n- https://stackoverflow.com/questions/359494/which-equals-operator-vs-should-be-used-in-javascript-comparisons\n- https://www.guru99.com/difference-equality-strict-operator-javascript.html\n- https://howtodoinjava.com/javascript/javascript-equality-vs-identity-operators/\n- https://medium.com/@ludico8/identity-vs-equality-battle-of-understanding-vs-758d396e922\n","html":"<h2>Equality (==) vs. Identity (===)</h2>\n<p>Remember when performing comparisons, <strong>the equality operator</strong> (<code>==</code>) will attempt to make the data types the same before proceeding. On the other hand, <strong>the identity operator</strong> (<code>===</code>) requires both data types to be the same, as a prerequisite.</p>\n<p>Let’s understand with an example. See the code below :</p>\n<pre><code class=\"prettyprint js\">var valueOne = 3;\nvar valueTwo = \"3\";\nif (valueOne == valueTwo) {\n  console.log(\"ValueOne and ValueTwo are the same\");\n} else {\n  console.log(\"ValueOne and ValueTwo are NOT the same\");\n}</code></pre>\n<p>Can you guess the output? You may or may not be surprised, but these values are considered to be the same.</p>\n<blockquote>\n<p>Output is: ValueOne and ValueTwo are the same</p></blockquote>\n<p>The reason why the <code>==</code> operator reasons that <code>\"3\"</code> and <code>3</code> are the same is because it actually coverts the operands (the values either side of the <code>==</code> operator) to the same type before it does the comparison.</p>\n<p>However, if we change the operator to an identity operator, as shown here, we see quite different output:</p>\n<pre><code class=\"prettyprint js\">var valueOne = 3;\nvar valueTwo = \"3\";\nif (valueOne === valueTwo) {\n  console.log(\"ValueOne and ValueTwo are the same\");\n} else {\n  console.log(\"ValueOne and ValueTwo are NOT the same\");\n}</code></pre>\n<p>Now with identity operator, output is:</p>\n<blockquote>\n<p>Output is: ValueOne and ValueTwo are NOT the same</p></blockquote>\n<p>Since we used the <code>===</code> operator on this occasion, and because this operator does not do any type conversion, we see that the string value <code>\"3\"</code> and the number <code>3</code> are not the same after all.</p>\n<p><strong>When in doubt, a relatively safe choice is simply to use the identity operator (<code>===</code>) as a matter of habit. Of course, the safest choice is to familiarize yourself with the differences, so that you know what is actually happening under the hood.</strong></p>\n<h2>summary</h2>\n<p>KEY DIFFERENCES:</p><ul><li>'=' is used for assigning values to a variable, '==' is used for comparing two variables, but it ignores the datatype of variable whereas '===' is used for comparing two variables, but this operator also checks datatype and compares two values.</li><li>'=' is called as assignment operator, '==' is called as comparison operator whereas It is also called as comparison operator.</li><li>'=' does not return true or false, '==' Return true only if the two operands are equal while '===' returns true only if both values and data types are the same for the two variables.</li></ul>\n<h3>What is the difference between <code>==</code> and <code>===</code>?</h3>\n<p><code>==</code> is the abstract equality operator while <code>===</code> is the strict equality operator. The <code>==</code> operator will compare for equality after doing any necessary type conversions. The <code>===</code> operator will not do type conversion, so if two values are not the same type <code>===</code> will simply return <code>false</code>. When using <code>==</code>, funky things can happen, such as:</p>\n<pre><code class=\"prettyprint js\">1 == \"1\"; // true\n1 == [1]; // true\n1 == true; // true\n0 == \"\"; // true\n0 == \"0\"; // true\n0 == false; // true</code></pre>\n<p>My advice is never to use the <code>==</code> operator, except for convenience when comparing against <code>null</code> or <code>undefined</code>, where <code>a == null</code> will return <code>true</code> if <code>a</code> is <code>null</code> or <code>undefined</code>.</p>\n<pre><code class=\"prettyprint js\">var a = null;\nconsole.log(a == null); // true\nconsole.log(a == undefined); // true</code></pre>\n<h4>References</h4><ul><li><a href=\"https://stackoverflow.com/questions/359494/which-equals-operator-vs-should-be-used-in-javascript-comparisons\">https://stackoverflow.com/questions/359494/which-equals-operator-vs-should-be-used-in-javascript-comparisons</a></li><li><a href=\"https://www.guru99.com/difference-equality-strict-operator-javascript.html\">https://www.guru99.com/difference-equality-strict-operator-javascript.html</a></li><li><a href=\"https://howtodoinjava.com/javascript/javascript-equality-vs-identity-operators\">https://howtodoinjava.com/javascript/javascript-equality-vs-identity-operators</a>/</li><li><a href=\"https://medium.com/@ludico8/identity-vs-equality-battle-of-understanding-vs-758d396e922\">https://medium.com/@ludico8/identity-vs-equality-battle-of-understanding-vs-758d396e922</a></li></ul>"},"_id":"Equality-(==)-vs-Identity-(===)","html":{"question":"<p>Equality (==) vs. Identity (===)</p>","answer":"<p>Remember when performing comparisons, <strong>the equality operator</strong> (<code>==</code>) will attempt to make the data types the same before proceeding. On the other hand, <strong>the identity operator</strong> (<code>===</code>) requires both data types to be the same, as a prerequisite.</p>\n<p>Let’s understand with an example. See the code below :</p>\n<pre><code class=\"prettyprint js\">var valueOne = 3;\nvar valueTwo = \"3\";\nif (valueOne == valueTwo) {\n  console.log(\"ValueOne and ValueTwo are the same\");\n} else {\n  console.log(\"ValueOne and ValueTwo are NOT the same\");\n}</code></pre>\n<p>Can you guess the output? You may or may not be surprised, but these values are considered to be the same.</p>\n<blockquote>\n<p>Output is: ValueOne and ValueTwo are the same</p></blockquote>\n<p>The reason why the <code>==</code> operator reasons that <code>\"3\"</code> and <code>3</code> are the same is because it actually coverts the operands (the values either side of the <code>==</code> operator) to the same type before it does the comparison.</p>\n<p>However, if we change the operator to an identity operator, as shown here, we see quite different output:</p>\n<pre><code class=\"prettyprint js\">var valueOne = 3;\nvar valueTwo = \"3\";\nif (valueOne === valueTwo) {\n  console.log(\"ValueOne and ValueTwo are the same\");\n} else {\n  console.log(\"ValueOne and ValueTwo are NOT the same\");\n}</code></pre>\n<p>Now with identity operator, output is:</p>\n<blockquote>\n<p>Output is: ValueOne and ValueTwo are NOT the same</p></blockquote>\n<p>Since we used the <code>===</code> operator on this occasion, and because this operator does not do any type conversion, we see that the string value <code>\"3\"</code> and the number <code>3</code> are not the same after all.</p>\n<p><strong>When in doubt, a relatively safe choice is simply to use the identity operator (<code>===</code>) as a matter of habit. Of course, the safest choice is to familiarize yourself with the differences, so that you know what is actually happening under the hood.</strong></p>\n<h2>summary</h2>\n<p>KEY DIFFERENCES:</p><ul><li>'=' is used for assigning values to a variable, '==' is used for comparing two variables, but it ignores the datatype of variable whereas '===' is used for comparing two variables, but this operator also checks datatype and compares two values.</li><li>'=' is called as assignment operator, '==' is called as comparison operator whereas It is also called as comparison operator.</li><li>'=' does not return true or false, '==' Return true only if the two operands are equal while '===' returns true only if both values and data types are the same for the two variables.</li></ul>\n<h3>What is the difference between <code>==</code> and <code>===</code>?</h3>\n<p><code>==</code> is the abstract equality operator while <code>===</code> is the strict equality operator. The <code>==</code> operator will compare for equality after doing any necessary type conversions. The <code>===</code> operator will not do type conversion, so if two values are not the same type <code>===</code> will simply return <code>false</code>. When using <code>==</code>, funky things can happen, such as:</p>\n<pre><code class=\"prettyprint js\">1 == \"1\"; // true\n1 == [1]; // true\n1 == true; // true\n0 == \"\"; // true\n0 == \"0\"; // true\n0 == false; // true</code></pre>\n<p>My advice is never to use the <code>==</code> operator, except for convenience when comparing against <code>null</code> or <code>undefined</code>, where <code>a == null</code> will return <code>true</code> if <code>a</code> is <code>null</code> or <code>undefined</code>.</p>\n<pre><code class=\"prettyprint js\">var a = null;\nconsole.log(a == null); // true\nconsole.log(a == undefined); // true</code></pre>\n<h4>References</h4><ul><li><a href=\"https://stackoverflow.com/questions/359494/which-equals-operator-vs-should-be-used-in-javascript-comparisons\">https://stackoverflow.com/questions/359494/which-equals-operator-vs-should-be-used-in-javascript-comparisons</a></li><li><a href=\"https://www.guru99.com/difference-equality-strict-operator-javascript.html\">https://www.guru99.com/difference-equality-strict-operator-javascript.html</a></li><li><a href=\"https://howtodoinjava.com/javascript/javascript-equality-vs-identity-operators\">https://howtodoinjava.com/javascript/javascript-equality-vs-identity-operators</a>/</li><li><a href=\"https://medium.com/@ludico8/identity-vs-equality-battle-of-understanding-vs-758d396e922\">https://medium.com/@ludico8/identity-vs-equality-battle-of-understanding-vs-758d396e922</a></li></ul>"},"label":"js","filename":"equality_vs_identity","question":"Equality (==) vs. Identity (===)","answer":"Remember when performing comparisons, **the equality operator** (`==`) will attempt to make the data types the same before proceeding. On the other hand, **the identity operator** (`===`) requires both data types to be the same, as a prerequisite.\n\nLet’s understand with an example. See the code below :\n\n```js\nvar valueOne = 3;\nvar valueTwo = \"3\";\nif (valueOne == valueTwo) {\n  console.log(\"ValueOne and ValueTwo are the same\");\n} else {\n  console.log(\"ValueOne and ValueTwo are NOT the same\");\n}\n```\n\nCan you guess the output? You may or may not be surprised, but these values are considered to be the same.\n\n> Output is: ValueOne and ValueTwo are the same\n\nThe reason why the `==` operator reasons that `\"3\"` and `3` are the same is because it actually coverts the operands (the values either side of the `==` operator) to the same type before it does the comparison.\n\nHowever, if we change the operator to an identity operator, as shown here, we see quite different output:\n\n```js\nvar valueOne = 3;\nvar valueTwo = \"3\";\nif (valueOne === valueTwo) {\n  console.log(\"ValueOne and ValueTwo are the same\");\n} else {\n  console.log(\"ValueOne and ValueTwo are NOT the same\");\n}\n```\n\nNow with identity operator, output is:\n\n> Output is: ValueOne and ValueTwo are NOT the same\n\nSince we used the `===` operator on this occasion, and because this operator does not do any type conversion, we see that the string value `\"3\"` and the number `3` are not the same after all.\n\n**When in doubt, a relatively safe choice is simply to use the identity operator (`===`) as a matter of habit. Of course, the safest choice is to familiarize yourself with the differences, so that you know what is actually happening under the hood.**\n\n## summary\n\nKEY DIFFERENCES:\n\n- '=' is used for assigning values to a variable, '==' is used for comparing two variables, but it ignores the datatype of variable whereas '===' is used for comparing two variables, but this operator also checks datatype and compares two values.\n- '=' is called as assignment operator, '==' is called as comparison operator whereas It is also called as comparison operator.\n- '=' does not return true or false, '==' Return true only if the two operands are equal while '===' returns true only if both values and data types are the same for the two variables.\n\n### What is the difference between `==` and `===`?\n\n`==` is the abstract equality operator while `===` is the strict equality operator. The `==` operator will compare for equality after doing any necessary type conversions. The `===` operator will not do type conversion, so if two values are not the same type `===` will simply return `false`. When using `==`, funky things can happen, such as:\n\n```js\n1 == \"1\"; // true\n1 == [1]; // true\n1 == true; // true\n0 == \"\"; // true\n0 == \"0\"; // true\n0 == false; // true\n```\n\nMy advice is never to use the `==` operator, except for convenience when comparing against `null` or `undefined`, where `a == null` will return `true` if `a` is `null` or `undefined`.\n\n```js\nvar a = null;\nconsole.log(a == null); // true\nconsole.log(a == undefined); // true\n```\n\n#### References\n\n- https://stackoverflow.com/questions/359494/which-equals-operator-vs-should-be-used-in-javascript-comparisons\n- https://www.guru99.com/difference-equality-strict-operator-javascript.html\n- https://howtodoinjava.com/javascript/javascript-equality-vs-identity-operators/\n- https://medium.com/@ludico8/identity-vs-equality-battle-of-understanding-vs-758d396e922"},{"markdown":{"question":"virtual dom","answer":"While building client-side apps, a team at Facebook developers realized that the DOM is slow (The Document Object Model (DOM) is an application programming interface (API) for HTML and XML documents. It defines the logical structure of documents and the way a document is accessed and manipulated). So, to make it faster, React implements a virtual DOM that is basically a DOM tree representation in Javascript. So when it needs to read or write to the DOM, it will use the virtual representation of it. Then the virtual DOM will try to find the most efficient way to update the browsers DOM.\n\nUnlike browser DOM elements, React elements are plain objects and are cheap to create. React DOM takes care of updating the DOM to match the React elements. The reason for this is that JavaScript is very fast and it is worth keeping a DOM tree in it to speedup its manipulation.\n\n#### References"},"original":{"markdown":"## virtual dom\n\nWhile building client-side apps, a team at Facebook developers realized that the DOM is slow (The Document Object Model (DOM) is an application programming interface (API) for HTML and XML documents. It defines the logical structure of documents and the way a document is accessed and manipulated). So, to make it faster, React implements a virtual DOM that is basically a DOM tree representation in Javascript. So when it needs to read or write to the DOM, it will use the virtual representation of it. Then the virtual DOM will try to find the most efficient way to update the browsers DOM.\n\nUnlike browser DOM elements, React elements are plain objects and are cheap to create. React DOM takes care of updating the DOM to match the React elements. The reason for this is that JavaScript is very fast and it is worth keeping a DOM tree in it to speedup its manipulation.\n\n#### References\n","html":"<h2>virtual dom</h2>\n<p>While building client-side apps, a team at Facebook developers realized that the DOM is slow (The Document Object Model (DOM) is an application programming interface (API) for HTML and XML documents. It defines the logical structure of documents and the way a document is accessed and manipulated). So, to make it faster, React implements a virtual DOM that is basically a DOM tree representation in Javascript. So when it needs to read or write to the DOM, it will use the virtual representation of it. Then the virtual DOM will try to find the most efficient way to update the browsers DOM.</p>\n<p>Unlike browser DOM elements, React elements are plain objects and are cheap to create. React DOM takes care of updating the DOM to match the React elements. The reason for this is that JavaScript is very fast and it is worth keeping a DOM tree in it to speedup its manipulation.</p>\n<h4>References</h4>"},"_id":"virtual-dom","html":{"question":"<p>virtual dom</p>","answer":"<p>While building client-side apps, a team at Facebook developers realized that the DOM is slow (The Document Object Model (DOM) is an application programming interface (API) for HTML and XML documents. It defines the logical structure of documents and the way a document is accessed and manipulated). So, to make it faster, React implements a virtual DOM that is basically a DOM tree representation in Javascript. So when it needs to read or write to the DOM, it will use the virtual representation of it. Then the virtual DOM will try to find the most efficient way to update the browsers DOM.</p>\n<p>Unlike browser DOM elements, React elements are plain objects and are cheap to create. React DOM takes care of updating the DOM to match the React elements. The reason for this is that JavaScript is very fast and it is worth keeping a DOM tree in it to speedup its manipulation.</p>\n<h4>References</h4>"},"label":"js","filename":"virtual-dom","question":"virtual dom","answer":"While building client-side apps, a team at Facebook developers realized that the DOM is slow (The Document Object Model (DOM) is an application programming interface (API) for HTML and XML documents. It defines the logical structure of documents and the way a document is accessed and manipulated). So, to make it faster, React implements a virtual DOM that is basically a DOM tree representation in Javascript. So when it needs to read or write to the DOM, it will use the virtual representation of it. Then the virtual DOM will try to find the most efficient way to update the browsers DOM.\n\nUnlike browser DOM elements, React elements are plain objects and are cheap to create. React DOM takes care of updating the DOM to match the React elements. The reason for this is that JavaScript is very fast and it is worth keeping a DOM tree in it to speedup its manipulation.\n\n#### References"},{"markdown":{"question":"What is the purpose of race method in promise?","answer":"`Promise.race()` method will return the promise instance which is firstly resolved or rejected. Let us take an example of race() method where promise2 is resolved first\n\n```javascript\nvar promise1 = new Promise(function (resolve, reject) {\n  setTimeout(resolve, 500, \"one\");\n});\nvar promise2 = new Promise(function (resolve, reject) {\n  setTimeout(resolve, 100, \"two\");\n});\n\nPromise.race([promise1, promise2]).then(function (value) {\n  console.log(value); // \"two\" // Both promises will resolve, but \tpromise2 is faster\n});\n```\n\n#### References"},"original":{"markdown":"## What is the purpose of race method in promise?\n\n`Promise.race()` method will return the promise instance which is firstly resolved or rejected. Let us take an example of race() method where promise2 is resolved first\n\n```javascript\nvar promise1 = new Promise(function (resolve, reject) {\n  setTimeout(resolve, 500, \"one\");\n});\nvar promise2 = new Promise(function (resolve, reject) {\n  setTimeout(resolve, 100, \"two\");\n});\n\nPromise.race([promise1, promise2]).then(function (value) {\n  console.log(value); // \"two\" // Both promises will resolve, but \tpromise2 is faster\n});\n```\n\n#### References\n","html":"<h2>What is the purpose of race method in promise?</h2>\n<p><code>Promise.race()</code> method will return the promise instance which is firstly resolved or rejected. Let us take an example of race() method where promise2 is resolved first</p>\n<pre><code class=\"prettyprint javascript\">var promise1 = new Promise(function (resolve, reject) {\n  setTimeout(resolve, 500, \"one\");\n});\nvar promise2 = new Promise(function (resolve, reject) {\n  setTimeout(resolve, 100, \"two\");\n});\n\nPromise.race([promise1, promise2]).then(function (value) {\n  console.log(value); // \"two\" // Both promises will resolve, but \tpromise2 is faster\n});</code></pre>\n<h4>References</h4>"},"_id":"What-is-the-purpose-of-race-method-in-promise","html":{"question":"<p>What is the purpose of race method in promise?</p>","answer":"<p><code>Promise.race()</code> method will return the promise instance which is firstly resolved or rejected. Let us take an example of race() method where promise2 is resolved first</p>\n<pre><code class=\"prettyprint javascript\">var promise1 = new Promise(function (resolve, reject) {\n  setTimeout(resolve, 500, \"one\");\n});\nvar promise2 = new Promise(function (resolve, reject) {\n  setTimeout(resolve, 100, \"two\");\n});\n\nPromise.race([promise1, promise2]).then(function (value) {\n  console.log(value); // \"two\" // Both promises will resolve, but \tpromise2 is faster\n});</code></pre>\n<h4>References</h4>"},"label":"js","filename":"promes_race","question":"What is the purpose of race method in promise?","answer":"`Promise.race()` method will return the promise instance which is firstly resolved or rejected. Let us take an example of race() method where promise2 is resolved first\n\n```javascript\nvar promise1 = new Promise(function (resolve, reject) {\n  setTimeout(resolve, 500, \"one\");\n});\nvar promise2 = new Promise(function (resolve, reject) {\n  setTimeout(resolve, 100, \"two\");\n});\n\nPromise.race([promise1, promise2]).then(function (value) {\n  console.log(value); // \"two\" // Both promises will resolve, but \tpromise2 is faster\n});\n```\n\n#### References"},{"markdown":{"question":"Hoisting","answer":"JavaScript Hoisting refers to the process whereby the interpreter allocates memory for variable and function declarations prior to execution of the code. Declarations that are made using var are initialized with a default value of undefined. Declarations made using let and const are not initialized as part of hoisting.\n\n**Conceptually hoisting is often presented as the interpreter \"splitting variable declaration and initialization, and moving (just) the declarations to the top of the code\".**\n\n```js\nconsole.log(num); // Returns 'undefined' from hoisted var declaration (not 6)\nvar num; // Declaration\nnum = 6; // Initialization\n```\n\nThis allows variables to appear in code before they are defined. Note however, that any variable initialization in the original code will not happen until the line of code is executed.\n\n```js\nfunction hoist() {\n  a = 20;\n  var b = 100;\n}\n\nhoist();\n\nconsole.log(a);\n/*\nAccessible as a global variable outside hoist() function\nOutput: 20\n*/\n\nconsole.log(b);\n/*\nSince it was declared, it is confined to the hoist() function scope.\nWe can't print it out outside the confines of the hoist() function.\nOutput: ReferenceError: b is not defined\n*/\n```\n\n## Conclusion\n\nLet’s summarise what we’ve learned so far:\n\n- While using es5 `var`, trying to use undeclared variables will lead to the variable being assigned a value of undefined upon hoisting.\n- While using es6 `let` and `const`, using undeclared variables will lead to a Reference Error because the variable remains uninitialised at execution.\n\nTherefore,\n\n- We should make it a habit to declare and initialise JavaScript variables before use.\n- Using strict mode in JavaScript es5 can help expose undeclared variables.\n\n#### References\n\n- https://www.w3schools.com/js/js_hoisting.asp\n- https://developer.mozilla.org/en-US/docs/Glossary/Hoisting\n- https://www.digitalocean.com/community/tutorials/understanding-hoisting-in-javascript"},"original":{"markdown":"## Hoisting\n\nJavaScript Hoisting refers to the process whereby the interpreter allocates memory for variable and function declarations prior to execution of the code. Declarations that are made using var are initialized with a default value of undefined. Declarations made using let and const are not initialized as part of hoisting.\n\n**Conceptually hoisting is often presented as the interpreter \"splitting variable declaration and initialization, and moving (just) the declarations to the top of the code\".**\n\n```js\nconsole.log(num); // Returns 'undefined' from hoisted var declaration (not 6)\nvar num; // Declaration\nnum = 6; // Initialization\n```\n\nThis allows variables to appear in code before they are defined. Note however, that any variable initialization in the original code will not happen until the line of code is executed.\n\n```js\nfunction hoist() {\n  a = 20;\n  var b = 100;\n}\n\nhoist();\n\nconsole.log(a);\n/*\nAccessible as a global variable outside hoist() function\nOutput: 20\n*/\n\nconsole.log(b);\n/*\nSince it was declared, it is confined to the hoist() function scope.\nWe can't print it out outside the confines of the hoist() function.\nOutput: ReferenceError: b is not defined\n*/\n```\n\n## Conclusion\n\nLet’s summarise what we’ve learned so far:\n\n- While using es5 `var`, trying to use undeclared variables will lead to the variable being assigned a value of undefined upon hoisting.\n- While using es6 `let` and `const`, using undeclared variables will lead to a Reference Error because the variable remains uninitialised at execution.\n\nTherefore,\n\n- We should make it a habit to declare and initialise JavaScript variables before use.\n- Using strict mode in JavaScript es5 can help expose undeclared variables.\n\n#### References\n\n- https://www.w3schools.com/js/js_hoisting.asp\n- https://developer.mozilla.org/en-US/docs/Glossary/Hoisting\n- https://www.digitalocean.com/community/tutorials/understanding-hoisting-in-javascript\n","html":"<h2>Hoisting</h2>\n<p>JavaScript Hoisting refers to the process whereby the interpreter allocates memory for variable and function declarations prior to execution of the code. Declarations that are made using var are initialized with a default value of undefined. Declarations made using let and const are not initialized as part of hoisting.</p>\n<p><strong>Conceptually hoisting is often presented as the interpreter \"splitting variable declaration and initialization, and moving (just) the declarations to the top of the code\".</strong></p>\n<pre><code class=\"prettyprint js\">console.log(num); // Returns 'undefined' from hoisted var declaration (not 6)\nvar num; // Declaration\nnum = 6; // Initialization</code></pre>\n<p>This allows variables to appear in code before they are defined. Note however, that any variable initialization in the original code will not happen until the line of code is executed.</p>\n<pre><code class=\"prettyprint js\">function hoist() {\n  a = 20;\n  var b = 100;\n}\n\nhoist();\n\nconsole.log(a);\n/*\nAccessible as a global variable outside hoist() function\nOutput: 20\n*/\n\nconsole.log(b);\n/*\nSince it was declared, it is confined to the hoist() function scope.\nWe can't print it out outside the confines of the hoist() function.\nOutput: ReferenceError: b is not defined\n*/</code></pre>\n<h2>Conclusion</h2>\n<p>Let’s summarise what we’ve learned so far:</p><ul><li>While using es5 <code>var</code>, trying to use undeclared variables will lead to the variable being assigned a value of undefined upon hoisting.</li><li>While using es6 <code>let</code> and <code>const</code>, using undeclared variables will lead to a Reference Error because the variable remains uninitialised at execution.</li></ul>\n<p>Therefore,</p><ul><li>We should make it a habit to declare and initialise JavaScript variables before use.</li><li>Using strict mode in JavaScript es5 can help expose undeclared variables.</li></ul>\n<h4>References</h4><ul><li><a href=\"https://www.w3schools.com/js/js_hoisting.asp\">https://www.w3schools.com/js/js_hoisting.asp</a></li><li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Hoisting\">https://developer.mozilla.org/en-US/docs/Glossary/Hoisting</a></li><li><a href=\"https://www.digitalocean.com/community/tutorials/understanding-hoisting-in-javascript\">https://www.digitalocean.com/community/tutorials/understanding-hoisting-in-javascript</a></li></ul>"},"_id":"Hoisting","html":{"question":"<p>Hoisting</p>","answer":"<p>JavaScript Hoisting refers to the process whereby the interpreter allocates memory for variable and function declarations prior to execution of the code. Declarations that are made using var are initialized with a default value of undefined. Declarations made using let and const are not initialized as part of hoisting.</p>\n<p><strong>Conceptually hoisting is often presented as the interpreter \"splitting variable declaration and initialization, and moving (just) the declarations to the top of the code\".</strong></p>\n<pre><code class=\"prettyprint js\">console.log(num); // Returns 'undefined' from hoisted var declaration (not 6)\nvar num; // Declaration\nnum = 6; // Initialization</code></pre>\n<p>This allows variables to appear in code before they are defined. Note however, that any variable initialization in the original code will not happen until the line of code is executed.</p>\n<pre><code class=\"prettyprint js\">function hoist() {\n  a = 20;\n  var b = 100;\n}\n\nhoist();\n\nconsole.log(a);\n/*\nAccessible as a global variable outside hoist() function\nOutput: 20\n*/\n\nconsole.log(b);\n/*\nSince it was declared, it is confined to the hoist() function scope.\nWe can't print it out outside the confines of the hoist() function.\nOutput: ReferenceError: b is not defined\n*/</code></pre>\n<h2>Conclusion</h2>\n<p>Let’s summarise what we’ve learned so far:</p><ul><li>While using es5 <code>var</code>, trying to use undeclared variables will lead to the variable being assigned a value of undefined upon hoisting.</li><li>While using es6 <code>let</code> and <code>const</code>, using undeclared variables will lead to a Reference Error because the variable remains uninitialised at execution.</li></ul>\n<p>Therefore,</p><ul><li>We should make it a habit to declare and initialise JavaScript variables before use.</li><li>Using strict mode in JavaScript es5 can help expose undeclared variables.</li></ul>\n<h4>References</h4><ul><li><a href=\"https://www.w3schools.com/js/js_hoisting.asp\">https://www.w3schools.com/js/js_hoisting.asp</a></li><li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Hoisting\">https://developer.mozilla.org/en-US/docs/Glossary/Hoisting</a></li><li><a href=\"https://www.digitalocean.com/community/tutorials/understanding-hoisting-in-javascript\">https://www.digitalocean.com/community/tutorials/understanding-hoisting-in-javascript</a></li></ul>"},"label":"js","filename":"hoisting","question":"Hoisting","answer":"JavaScript Hoisting refers to the process whereby the interpreter allocates memory for variable and function declarations prior to execution of the code. Declarations that are made using var are initialized with a default value of undefined. Declarations made using let and const are not initialized as part of hoisting.\n\n**Conceptually hoisting is often presented as the interpreter \"splitting variable declaration and initialization, and moving (just) the declarations to the top of the code\".**\n\n```js\nconsole.log(num); // Returns 'undefined' from hoisted var declaration (not 6)\nvar num; // Declaration\nnum = 6; // Initialization\n```\n\nThis allows variables to appear in code before they are defined. Note however, that any variable initialization in the original code will not happen until the line of code is executed.\n\n```js\nfunction hoist() {\n  a = 20;\n  var b = 100;\n}\n\nhoist();\n\nconsole.log(a);\n/*\nAccessible as a global variable outside hoist() function\nOutput: 20\n*/\n\nconsole.log(b);\n/*\nSince it was declared, it is confined to the hoist() function scope.\nWe can't print it out outside the confines of the hoist() function.\nOutput: ReferenceError: b is not defined\n*/\n```\n\n## Conclusion\n\nLet’s summarise what we’ve learned so far:\n\n- While using es5 `var`, trying to use undeclared variables will lead to the variable being assigned a value of undefined upon hoisting.\n- While using es6 `let` and `const`, using undeclared variables will lead to a Reference Error because the variable remains uninitialised at execution.\n\nTherefore,\n\n- We should make it a habit to declare and initialise JavaScript variables before use.\n- Using strict mode in JavaScript es5 can help expose undeclared variables.\n\n#### References\n\n- https://www.w3schools.com/js/js_hoisting.asp\n- https://developer.mozilla.org/en-US/docs/Glossary/Hoisting\n- https://www.digitalocean.com/community/tutorials/understanding-hoisting-in-javascript"},{"markdown":{"question":"await","answer":"The `await` operator is used to wait for a `Promise`. It can only be used inside an `async` function within regular JavaScript code; however it can be used on its own with JavaScript modules.\n\n---\n\nThe await expression causes `async` function execution to pause until a `Promise` is settled (that is, fulfilled or rejected), and to resume execution of the `async` function after fulfillment. When resumed, the value of the await expression is that of the fulfilled Promise.\n\nIf the `Promise` is rejected, the `await` expression throws the rejected value.\n\nIf the value of the expression following the await operator is not a `Promise`, it's converted to a resolved `Promise`.\n\nAn `await` splits execution flow, allowing the caller of the `async` function to resume execution. After the await defers the continuation of the `async` function, execution of subsequent statements ensues. If this await is the last expression executed by its function, execution continues by returning to the function's caller a pending `Promise` for completion of the await's function and resuming execution of that caller.\n\n```js\nfunction resolveAfter2Seconds(x) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(x);\n    }, 2000);\n  });\n}\n\nasync function f1() {\n  var x = await resolveAfter2Seconds(10);\n  console.log(x); // 10\n}\n\nf1();\n```\n\n## see also\n\n- [promes](promes.md)\n- [promes2](promes2.md)\n- [async](async.md)\n- [await](await.md)\n\n#### References\n\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"},"original":{"markdown":"## await\n\nThe `await` operator is used to wait for a `Promise`. It can only be used inside an `async` function within regular JavaScript code; however it can be used on its own with JavaScript modules.\n\n---\n\nThe await expression causes `async` function execution to pause until a `Promise` is settled (that is, fulfilled or rejected), and to resume execution of the `async` function after fulfillment. When resumed, the value of the await expression is that of the fulfilled Promise.\n\nIf the `Promise` is rejected, the `await` expression throws the rejected value.\n\nIf the value of the expression following the await operator is not a `Promise`, it's converted to a resolved `Promise`.\n\nAn `await` splits execution flow, allowing the caller of the `async` function to resume execution. After the await defers the continuation of the `async` function, execution of subsequent statements ensues. If this await is the last expression executed by its function, execution continues by returning to the function's caller a pending `Promise` for completion of the await's function and resuming execution of that caller.\n\n```js\nfunction resolveAfter2Seconds(x) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(x);\n    }, 2000);\n  });\n}\n\nasync function f1() {\n  var x = await resolveAfter2Seconds(10);\n  console.log(x); // 10\n}\n\nf1();\n```\n\n## see also\n\n- [promes](promes.md)\n- [promes2](promes2.md)\n- [async](async.md)\n- [await](await.md)\n\n#### References\n\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\n","html":"<h2>await</h2>\n<p>The <code>await</code> operator is used to wait for a <code>Promise</code>. It can only be used inside an <code>async</code> function within regular JavaScript code; however it can be used on its own with JavaScript modules.</p>\n<hr />\n<p>The await expression causes <code>async</code> function execution to pause until a <code>Promise</code> is settled (that is, fulfilled or rejected), and to resume execution of the <code>async</code> function after fulfillment. When resumed, the value of the await expression is that of the fulfilled Promise.</p>\n<p>If the <code>Promise</code> is rejected, the <code>await</code> expression throws the rejected value.</p>\n<p>If the value of the expression following the await operator is not a <code>Promise</code>, it's converted to a resolved <code>Promise</code>.</p>\n<p>An <code>await</code> splits execution flow, allowing the caller of the <code>async</code> function to resume execution. After the await defers the continuation of the <code>async</code> function, execution of subsequent statements ensues. If this await is the last expression executed by its function, execution continues by returning to the function's caller a pending <code>Promise</code> for completion of the await's function and resuming execution of that caller.</p>\n<pre><code class=\"prettyprint js\">function resolveAfter2Seconds(x) {\n  return new Promise((resolve) =&gt; {\n    setTimeout(() =&gt; {\n      resolve(x);\n    }, 2000);\n  });\n}\n\nasync function f1() {\n  var x = await resolveAfter2Seconds(10);\n  console.log(x); // 10\n}\n\nf1();</code></pre>\n<h2>see also</h2><ul><li><a href=\"promes.md\">promes</a></li><li><a href=\"promes2.md\">promes2</a></li><li><a href=\"async.md\">async</a></li><li><a href=\"await.md\">await</a></li></ul>\n<h4>References</h4><ul><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function</a></li></ul>"},"_id":"await","html":{"question":"<p>await</p>","answer":"<p>The <code>await</code> operator is used to wait for a <code>Promise</code>. It can only be used inside an <code>async</code> function within regular JavaScript code; however it can be used on its own with JavaScript modules.</p>\n<hr />\n<p>The await expression causes <code>async</code> function execution to pause until a <code>Promise</code> is settled (that is, fulfilled or rejected), and to resume execution of the <code>async</code> function after fulfillment. When resumed, the value of the await expression is that of the fulfilled Promise.</p>\n<p>If the <code>Promise</code> is rejected, the <code>await</code> expression throws the rejected value.</p>\n<p>If the value of the expression following the await operator is not a <code>Promise</code>, it's converted to a resolved <code>Promise</code>.</p>\n<p>An <code>await</code> splits execution flow, allowing the caller of the <code>async</code> function to resume execution. After the await defers the continuation of the <code>async</code> function, execution of subsequent statements ensues. If this await is the last expression executed by its function, execution continues by returning to the function's caller a pending <code>Promise</code> for completion of the await's function and resuming execution of that caller.</p>\n<pre><code class=\"prettyprint js\">function resolveAfter2Seconds(x) {\n  return new Promise((resolve) =&gt; {\n    setTimeout(() =&gt; {\n      resolve(x);\n    }, 2000);\n  });\n}\n\nasync function f1() {\n  var x = await resolveAfter2Seconds(10);\n  console.log(x); // 10\n}\n\nf1();</code></pre>\n<h2>see also</h2><ul><li><a href=\"promes.md\">promes</a></li><li><a href=\"promes2.md\">promes2</a></li><li><a href=\"async.md\">async</a></li><li><a href=\"await.md\">await</a></li></ul>\n<h4>References</h4><ul><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function</a></li></ul>"},"label":"js","filename":"await","question":"await","answer":"The `await` operator is used to wait for a `Promise`. It can only be used inside an `async` function within regular JavaScript code; however it can be used on its own with JavaScript modules.\n\n---\n\nThe await expression causes `async` function execution to pause until a `Promise` is settled (that is, fulfilled or rejected), and to resume execution of the `async` function after fulfillment. When resumed, the value of the await expression is that of the fulfilled Promise.\n\nIf the `Promise` is rejected, the `await` expression throws the rejected value.\n\nIf the value of the expression following the await operator is not a `Promise`, it's converted to a resolved `Promise`.\n\nAn `await` splits execution flow, allowing the caller of the `async` function to resume execution. After the await defers the continuation of the `async` function, execution of subsequent statements ensues. If this await is the last expression executed by its function, execution continues by returning to the function's caller a pending `Promise` for completion of the await's function and resuming execution of that caller.\n\n```js\nfunction resolveAfter2Seconds(x) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(x);\n    }, 2000);\n  });\n}\n\nasync function f1() {\n  var x = await resolveAfter2Seconds(10);\n  console.log(x); // 10\n}\n\nf1();\n```\n\n## see also\n\n- [promes](promes.md)\n- [promes2](promes2.md)\n- [async](async.md)\n- [await](await.md)\n\n#### References\n\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"},{"markdown":{"question":"DOM","answer":"The Document Object Model (DOM) is an application programming interface (API) for HTML and XML documents. It defines the logical structure of documents and the way a document is accessed and manipulated.\n\nThe HTML DOM model is constructed as a tree of Objects:\n\n![](../../img/pic_htmltree.gif)\n\n## What is the HTML DOM?\n\nThe HTML DOM is a standard object model and programming interface for HTML. It defines:\n\n- The HTML elements as objects\n- The properties of all HTML elements\n- The methods to access all HTML elements\n- The events for all HTML elements\n\nIn other words: The HTML DOM is a standard for how to get, change, add, or delete HTML elements.\n\n#### References\n\n- https://www.taniarascia.com/introduction-to-the-dom/\n- https://www.w3.org/TR/WD-DOM/introduction.html\n- https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction\n- https://www.w3schools.com/js/js_htmldom.asp"},"original":{"markdown":"## DOM\n\nThe Document Object Model (DOM) is an application programming interface (API) for HTML and XML documents. It defines the logical structure of documents and the way a document is accessed and manipulated.\n\nThe HTML DOM model is constructed as a tree of Objects:\n\n![](../../img/pic_htmltree.gif)\n\n## What is the HTML DOM?\n\nThe HTML DOM is a standard object model and programming interface for HTML. It defines:\n\n- The HTML elements as objects\n- The properties of all HTML elements\n- The methods to access all HTML elements\n- The events for all HTML elements\n\nIn other words: The HTML DOM is a standard for how to get, change, add, or delete HTML elements.\n\n#### References\n\n- https://www.taniarascia.com/introduction-to-the-dom/\n- https://www.w3.org/TR/WD-DOM/introduction.html\n- https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction\n- https://www.w3schools.com/js/js_htmldom.asp\n","html":"<h2>DOM</h2>\n<p>The Document Object Model (DOM) is an application programming interface (API) for HTML and XML documents. It defines the logical structure of documents and the way a document is accessed and manipulated.</p>\n<p>The HTML DOM model is constructed as a tree of Objects:</p>\n<p><img src=\"../../img/pic_htmltree.gif\" /></p>\n<h2>What is the HTML DOM?</h2>\n<p>The HTML DOM is a standard object model and programming interface for HTML. It defines:</p><ul><li>The HTML elements as objects</li><li>The properties of all HTML elements</li><li>The methods to access all HTML elements</li><li>The events for all HTML elements</li></ul>\n<p>In other words: The HTML DOM is a standard for how to get, change, add, or delete HTML elements.</p>\n<h4>References</h4><ul><li><a href=\"https://www.taniarascia.com/introduction-to-the-dom\">https://www.taniarascia.com/introduction-to-the-dom</a>/</li><li><a href=\"https://www.w3.org/TR/WD-DOM/introduction.html\">https://www.w3.org/TR/WD-DOM/introduction.html</a></li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction\">https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction</a></li><li><a href=\"https://www.w3schools.com/js/js_htmldom.asp\">https://www.w3schools.com/js/js_htmldom.asp</a></li></ul>"},"_id":"DOM","html":{"question":"<p>DOM</p>","answer":"<p>The Document Object Model (DOM) is an application programming interface (API) for HTML and XML documents. It defines the logical structure of documents and the way a document is accessed and manipulated.</p>\n<p>The HTML DOM model is constructed as a tree of Objects:</p>\n<p><img src=\"../../img/pic_htmltree.gif\" /></p>\n<h2>What is the HTML DOM?</h2>\n<p>The HTML DOM is a standard object model and programming interface for HTML. It defines:</p><ul><li>The HTML elements as objects</li><li>The properties of all HTML elements</li><li>The methods to access all HTML elements</li><li>The events for all HTML elements</li></ul>\n<p>In other words: The HTML DOM is a standard for how to get, change, add, or delete HTML elements.</p>\n<h4>References</h4><ul><li><a href=\"https://www.taniarascia.com/introduction-to-the-dom\">https://www.taniarascia.com/introduction-to-the-dom</a>/</li><li><a href=\"https://www.w3.org/TR/WD-DOM/introduction.html\">https://www.w3.org/TR/WD-DOM/introduction.html</a></li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction\">https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction</a></li><li><a href=\"https://www.w3schools.com/js/js_htmldom.asp\">https://www.w3schools.com/js/js_htmldom.asp</a></li></ul>"},"label":"js","filename":"dom","question":"DOM","answer":"The Document Object Model (DOM) is an application programming interface (API) for HTML and XML documents. It defines the logical structure of documents and the way a document is accessed and manipulated.\n\nThe HTML DOM model is constructed as a tree of Objects:\n\n![](../../img/pic_htmltree.gif)\n\n## What is the HTML DOM?\n\nThe HTML DOM is a standard object model and programming interface for HTML. It defines:\n\n- The HTML elements as objects\n- The properties of all HTML elements\n- The methods to access all HTML elements\n- The events for all HTML elements\n\nIn other words: The HTML DOM is a standard for how to get, change, add, or delete HTML elements.\n\n#### References\n\n- https://www.taniarascia.com/introduction-to-the-dom/\n- https://www.w3.org/TR/WD-DOM/introduction.html\n- https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction\n- https://www.w3schools.com/js/js_htmldom.asp"},{"markdown":{"question":"What is a closure, and how/why would you use one?","answer":"A closure is the combination of a function and the lexical environment within which that function was declared. The word \"lexical\" refers to the fact that lexical scoping uses the location where a variable is declared within the source code to determine where that variable is available. Closures are functions that have access to the outer (enclosing) function's variables—scope chain even after the outer function has returned.\n\n> A **closure** is the combination of a function bundled together (enclosed) with references to its surrounding state (the **lexical environment**). In other words, a closure gives you access to an outer function’s scope from an inner function. In JavaScript, closures are created every time a function is created, at function creation time.\n\n**Why would you use one?**\n\n- Data privacy / emulating private methods with closures. Commonly used in the [module pattern](https://addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript).\n- [Partial applications or currying](https://medium.com/javascript-scene/curry-or-partial-application-8150044c78b8#.l4b6l1i3x).\n\n#### References\n\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\n- https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-closure-b2f0d2152b36"},"original":{"markdown":"## What is a closure, and how/why would you use one?\n\nA closure is the combination of a function and the lexical environment within which that function was declared. The word \"lexical\" refers to the fact that lexical scoping uses the location where a variable is declared within the source code to determine where that variable is available. Closures are functions that have access to the outer (enclosing) function's variables—scope chain even after the outer function has returned.\n\n> A **closure** is the combination of a function bundled together (enclosed) with references to its surrounding state (the **lexical environment**). In other words, a closure gives you access to an outer function’s scope from an inner function. In JavaScript, closures are created every time a function is created, at function creation time.\n\n**Why would you use one?**\n\n- Data privacy / emulating private methods with closures. Commonly used in the [module pattern](https://addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript).\n- [Partial applications or currying](https://medium.com/javascript-scene/curry-or-partial-application-8150044c78b8#.l4b6l1i3x).\n\n#### References\n\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\n- https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-closure-b2f0d2152b36\n","html":"<h2>What is a closure, and how/why would you use one?</h2>\n<p>A closure is the combination of a function and the lexical environment within which that function was declared. The word \"lexical\" refers to the fact that lexical scoping uses the location where a variable is declared within the source code to determine where that variable is available. Closures are functions that have access to the outer (enclosing) function's variables—scope chain even after the outer function has returned.</p>\n<blockquote>\n<p>A <strong>closure</strong> is the combination of a function bundled together (enclosed) with references to its surrounding state (the <strong>lexical environment</strong>). In other words, a closure gives you access to an outer function’s scope from an inner function. In JavaScript, closures are created every time a function is created, at function creation time.</p></blockquote>\n<p><strong>Why would you use one?</strong></p><ul><li>Data privacy / emulating private methods with closures. Commonly used in the <a href=\"https://addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript\">module pattern</a>.</li><li><a href=\"https://medium.com/javascript-scene/curry-or-partial-application-8150044c78b8#.l4b6l1i3x\">Partial applications or currying</a>.</li></ul>\n<h4>References</h4><ul><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures</a></li><li><a href=\"https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-closure-b2f0d2152b36\">https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-closure-b2f0d2152b36</a></li></ul>"},"_id":"What-is-a-closure,-and-how_why-would-you-use-one","html":{"question":"<p>What is a closure, and how/why would you use one?</p>","answer":"<p>A closure is the combination of a function and the lexical environment within which that function was declared. The word \"lexical\" refers to the fact that lexical scoping uses the location where a variable is declared within the source code to determine where that variable is available. Closures are functions that have access to the outer (enclosing) function's variables—scope chain even after the outer function has returned.</p>\n<blockquote>\n<p>A <strong>closure</strong> is the combination of a function bundled together (enclosed) with references to its surrounding state (the <strong>lexical environment</strong>). In other words, a closure gives you access to an outer function’s scope from an inner function. In JavaScript, closures are created every time a function is created, at function creation time.</p></blockquote>\n<p><strong>Why would you use one?</strong></p><ul><li>Data privacy / emulating private methods with closures. Commonly used in the <a href=\"https://addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript\">module pattern</a>.</li><li><a href=\"https://medium.com/javascript-scene/curry-or-partial-application-8150044c78b8#.l4b6l1i3x\">Partial applications or currying</a>.</li></ul>\n<h4>References</h4><ul><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures</a></li><li><a href=\"https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-closure-b2f0d2152b36\">https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-closure-b2f0d2152b36</a></li></ul>"},"label":"js","filename":"closure","question":"What is a closure, and how/why would you use one?","answer":"A closure is the combination of a function and the lexical environment within which that function was declared. The word \"lexical\" refers to the fact that lexical scoping uses the location where a variable is declared within the source code to determine where that variable is available. Closures are functions that have access to the outer (enclosing) function's variables—scope chain even after the outer function has returned.\n\n> A **closure** is the combination of a function bundled together (enclosed) with references to its surrounding state (the **lexical environment**). In other words, a closure gives you access to an outer function’s scope from an inner function. In JavaScript, closures are created every time a function is created, at function creation time.\n\n**Why would you use one?**\n\n- Data privacy / emulating private methods with closures. Commonly used in the [module pattern](https://addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript).\n- [Partial applications or currying](https://medium.com/javascript-scene/curry-or-partial-application-8150044c78b8#.l4b6l1i3x).\n\n#### References\n\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\n- https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-closure-b2f0d2152b36"},{"markdown":{"question":"async","answer":"An async function is a function declared with the `async` keyword, and the `await` keyword is permitted within them. The `async` and `await` keywords enable asynchronous, promise-based behavior to be written in a cleaner style, avoiding the need to explicitly configure promise chains.\n\nAsync functions may also be defined as expressions.\n\n```js\nfunction resolveAfter2Seconds() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(\"resolved\");\n    }, 2000);\n  });\n}\n\nasync function asyncCall() {\n  console.log(\"calling\");\n  const result = await resolveAfter2Seconds();\n  console.log(result);\n  // expected output: \"resolved\"\n}\n\nasyncCall();\n```\n\n## see also\n\n- [promes](promes.md)\n- [promes2](promes2.md)\n- [async](async.md)\n- [await](await.md)\n\n#### References\n\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"},"original":{"markdown":"## async\n\nAn async function is a function declared with the `async` keyword, and the `await` keyword is permitted within them. The `async` and `await` keywords enable asynchronous, promise-based behavior to be written in a cleaner style, avoiding the need to explicitly configure promise chains.\n\nAsync functions may also be defined as expressions.\n\n```js\nfunction resolveAfter2Seconds() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(\"resolved\");\n    }, 2000);\n  });\n}\n\nasync function asyncCall() {\n  console.log(\"calling\");\n  const result = await resolveAfter2Seconds();\n  console.log(result);\n  // expected output: \"resolved\"\n}\n\nasyncCall();\n```\n\n## see also\n\n- [promes](promes.md)\n- [promes2](promes2.md)\n- [async](async.md)\n- [await](await.md)\n\n#### References\n\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\n","html":"<h2>async</h2>\n<p>An async function is a function declared with the <code>async</code> keyword, and the <code>await</code> keyword is permitted within them. The <code>async</code> and <code>await</code> keywords enable asynchronous, promise-based behavior to be written in a cleaner style, avoiding the need to explicitly configure promise chains.</p>\n<p>Async functions may also be defined as expressions.</p>\n<pre><code class=\"prettyprint js\">function resolveAfter2Seconds() {\n  return new Promise((resolve) =&gt; {\n    setTimeout(() =&gt; {\n      resolve(\"resolved\");\n    }, 2000);\n  });\n}\n\nasync function asyncCall() {\n  console.log(\"calling\");\n  const result = await resolveAfter2Seconds();\n  console.log(result);\n  // expected output: \"resolved\"\n}\n\nasyncCall();</code></pre>\n<h2>see also</h2><ul><li><a href=\"promes.md\">promes</a></li><li><a href=\"promes2.md\">promes2</a></li><li><a href=\"async.md\">async</a></li><li><a href=\"await.md\">await</a></li></ul>\n<h4>References</h4><ul><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function</a></li></ul>"},"_id":"async","html":{"question":"<p>async</p>","answer":"<p>An async function is a function declared with the <code>async</code> keyword, and the <code>await</code> keyword is permitted within them. The <code>async</code> and <code>await</code> keywords enable asynchronous, promise-based behavior to be written in a cleaner style, avoiding the need to explicitly configure promise chains.</p>\n<p>Async functions may also be defined as expressions.</p>\n<pre><code class=\"prettyprint js\">function resolveAfter2Seconds() {\n  return new Promise((resolve) =&gt; {\n    setTimeout(() =&gt; {\n      resolve(\"resolved\");\n    }, 2000);\n  });\n}\n\nasync function asyncCall() {\n  console.log(\"calling\");\n  const result = await resolveAfter2Seconds();\n  console.log(result);\n  // expected output: \"resolved\"\n}\n\nasyncCall();</code></pre>\n<h2>see also</h2><ul><li><a href=\"promes.md\">promes</a></li><li><a href=\"promes2.md\">promes2</a></li><li><a href=\"async.md\">async</a></li><li><a href=\"await.md\">await</a></li></ul>\n<h4>References</h4><ul><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function</a></li></ul>"},"label":"js","filename":"async","question":"async","answer":"An async function is a function declared with the `async` keyword, and the `await` keyword is permitted within them. The `async` and `await` keywords enable asynchronous, promise-based behavior to be written in a cleaner style, avoiding the need to explicitly configure promise chains.\n\nAsync functions may also be defined as expressions.\n\n```js\nfunction resolveAfter2Seconds() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(\"resolved\");\n    }, 2000);\n  });\n}\n\nasync function asyncCall() {\n  console.log(\"calling\");\n  const result = await resolveAfter2Seconds();\n  console.log(result);\n  // expected output: \"resolved\"\n}\n\nasyncCall();\n```\n\n## see also\n\n- [promes](promes.md)\n- [promes2](promes2.md)\n- [async](async.md)\n- [await](await.md)\n\n#### References\n\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"},{"markdown":{"question":"prototype","answer":"All JavaScript objects inherit properties and methods from a prototype.\n\n```js\nfunction Person(first, last, age, eyecolor) {\n  this.firstName = first;\n  this.lastName = last;\n  this.age = age;\n  this.eyeColor = eyecolor;\n}\n\nconst myFather = new Person(\"John\", \"Doe\", 50, \"blue\");\nconst myMother = new Person(\"Sally\", \"Rally\", 48, \"green\");\n```\n\nWe also learned that you can not add a new property to an existing object constructor:\n\n```js\nPerson.nationality = \"English\";\n```\n\nTo add a new property to a constructor, you must add it to the constructor function:\n\n```js\nfunction Person(first, last, age, eyecolor) {\n  this.firstName = first;\n  this.lastName = last;\n  this.age = age;\n  this.eyeColor = eyecolor;\n  this.nationality = \"English\";\n}\n```\n\n#### Prototype Inheritance\n\nAll JavaScript objects inherit properties and methods from a prototype:\n\n- `Date` objects inherit from `Date.prototype`\n- `Array` objects inherit from `Array.prototype`\n- `Person` objects inherit from `Person.prototype`\n\nThe `Object.prototype` is on the top of the prototype inheritance chain:\n\n`Date` objects, `Array` objects, and `Person` objects inherit from `Object.prototype`.\n\n#### References\n\n- https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes\n- https://www.w3schools.com/js/js_object_prototypes.asp"},"original":{"markdown":"## prototype\n\nAll JavaScript objects inherit properties and methods from a prototype.\n\n```js\nfunction Person(first, last, age, eyecolor) {\n  this.firstName = first;\n  this.lastName = last;\n  this.age = age;\n  this.eyeColor = eyecolor;\n}\n\nconst myFather = new Person(\"John\", \"Doe\", 50, \"blue\");\nconst myMother = new Person(\"Sally\", \"Rally\", 48, \"green\");\n```\n\nWe also learned that you can not add a new property to an existing object constructor:\n\n```js\nPerson.nationality = \"English\";\n```\n\nTo add a new property to a constructor, you must add it to the constructor function:\n\n```js\nfunction Person(first, last, age, eyecolor) {\n  this.firstName = first;\n  this.lastName = last;\n  this.age = age;\n  this.eyeColor = eyecolor;\n  this.nationality = \"English\";\n}\n```\n\n#### Prototype Inheritance\n\nAll JavaScript objects inherit properties and methods from a prototype:\n\n- `Date` objects inherit from `Date.prototype`\n- `Array` objects inherit from `Array.prototype`\n- `Person` objects inherit from `Person.prototype`\n\nThe `Object.prototype` is on the top of the prototype inheritance chain:\n\n`Date` objects, `Array` objects, and `Person` objects inherit from `Object.prototype`.\n\n#### References\n\n- https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes\n- https://www.w3schools.com/js/js_object_prototypes.asp\n","html":"<h2>prototype</h2>\n<p>All JavaScript objects inherit properties and methods from a prototype.</p>\n<pre><code class=\"prettyprint js\">function Person(first, last, age, eyecolor) {\n  this.firstName = first;\n  this.lastName = last;\n  this.age = age;\n  this.eyeColor = eyecolor;\n}\n\nconst myFather = new Person(\"John\", \"Doe\", 50, \"blue\");\nconst myMother = new Person(\"Sally\", \"Rally\", 48, \"green\");</code></pre>\n<p>We also learned that you can not add a new property to an existing object constructor:</p>\n<pre><code class=\"prettyprint js\">Person.nationality = \"English\";</code></pre>\n<p>To add a new property to a constructor, you must add it to the constructor function:</p>\n<pre><code class=\"prettyprint js\">function Person(first, last, age, eyecolor) {\n  this.firstName = first;\n  this.lastName = last;\n  this.age = age;\n  this.eyeColor = eyecolor;\n  this.nationality = \"English\";\n}</code></pre>\n<h4>Prototype Inheritance</h4>\n<p>All JavaScript objects inherit properties and methods from a prototype:</p><ul><li><code>Date</code> objects inherit from <code>Date.prototype</code></li><li><code>Array</code> objects inherit from <code>Array.prototype</code></li><li><code>Person</code> objects inherit from <code>Person.prototype</code></li></ul>\n<p>The <code>Object.prototype</code> is on the top of the prototype inheritance chain:</p>\n<p><code>Date</code> objects, <code>Array</code> objects, and <code>Person</code> objects inherit from <code>Object.prototype</code>.</p>\n<h4>References</h4><ul><li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes\">https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes</a></li><li><a href=\"https://www.w3schools.com/js/js_object_prototypes.asp\">https://www.w3schools.com/js/js_object_prototypes.asp</a></li></ul>"},"_id":"prototype","html":{"question":"<p>prototype</p>","answer":"<p>All JavaScript objects inherit properties and methods from a prototype.</p>\n<pre><code class=\"prettyprint js\">function Person(first, last, age, eyecolor) {\n  this.firstName = first;\n  this.lastName = last;\n  this.age = age;\n  this.eyeColor = eyecolor;\n}\n\nconst myFather = new Person(\"John\", \"Doe\", 50, \"blue\");\nconst myMother = new Person(\"Sally\", \"Rally\", 48, \"green\");</code></pre>\n<p>We also learned that you can not add a new property to an existing object constructor:</p>\n<pre><code class=\"prettyprint js\">Person.nationality = \"English\";</code></pre>\n<p>To add a new property to a constructor, you must add it to the constructor function:</p>\n<pre><code class=\"prettyprint js\">function Person(first, last, age, eyecolor) {\n  this.firstName = first;\n  this.lastName = last;\n  this.age = age;\n  this.eyeColor = eyecolor;\n  this.nationality = \"English\";\n}</code></pre>\n<h4>Prototype Inheritance</h4>\n<p>All JavaScript objects inherit properties and methods from a prototype:</p><ul><li><code>Date</code> objects inherit from <code>Date.prototype</code></li><li><code>Array</code> objects inherit from <code>Array.prototype</code></li><li><code>Person</code> objects inherit from <code>Person.prototype</code></li></ul>\n<p>The <code>Object.prototype</code> is on the top of the prototype inheritance chain:</p>\n<p><code>Date</code> objects, <code>Array</code> objects, and <code>Person</code> objects inherit from <code>Object.prototype</code>.</p>\n<h4>References</h4><ul><li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes\">https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes</a></li><li><a href=\"https://www.w3schools.com/js/js_object_prototypes.asp\">https://www.w3schools.com/js/js_object_prototypes.asp</a></li></ul>"},"label":"js","filename":"prototype","question":"prototype","answer":"All JavaScript objects inherit properties and methods from a prototype.\n\n```js\nfunction Person(first, last, age, eyecolor) {\n  this.firstName = first;\n  this.lastName = last;\n  this.age = age;\n  this.eyeColor = eyecolor;\n}\n\nconst myFather = new Person(\"John\", \"Doe\", 50, \"blue\");\nconst myMother = new Person(\"Sally\", \"Rally\", 48, \"green\");\n```\n\nWe also learned that you can not add a new property to an existing object constructor:\n\n```js\nPerson.nationality = \"English\";\n```\n\nTo add a new property to a constructor, you must add it to the constructor function:\n\n```js\nfunction Person(first, last, age, eyecolor) {\n  this.firstName = first;\n  this.lastName = last;\n  this.age = age;\n  this.eyeColor = eyecolor;\n  this.nationality = \"English\";\n}\n```\n\n#### Prototype Inheritance\n\nAll JavaScript objects inherit properties and methods from a prototype:\n\n- `Date` objects inherit from `Date.prototype`\n- `Array` objects inherit from `Array.prototype`\n- `Person` objects inherit from `Person.prototype`\n\nThe `Object.prototype` is on the top of the prototype inheritance chain:\n\n`Date` objects, `Array` objects, and `Person` objects inherit from `Object.prototype`.\n\n#### References\n\n- https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes\n- https://www.w3schools.com/js/js_object_prototypes.asp"},{"markdown":{"question":"Explain Ajax in as much detail as possible.","answer":"Ajax (**asynchronous JavaScript and XML**) is a set of web development techniques using many web technologies on the client side to create asynchronous web applications.\n\nWith Ajax, web applications can send data to and retrieve from a server asynchronously (in the background) without interfering with the display and behavior of the existing page. By decoupling the data interchange layer from the presentation layer, Ajax allows for web pages, and by extension web applications, to change content dynamically without the need to reload the entire page.\n\nIn practice, modern implementations commonly use JSON instead of XML, due to the advantages of JSON being native to JavaScript.\n\nThe `XMLHttpRequest` API is frequently used for the asynchronous communication or these days, the `fetch` API.\n\n### see also\n\n- [ajax](ajax.md)\n- [ajax2](ajax2.md)\n- [promes](promes.md)\n- [promes2](promes2.md)\n- [async](async.md)\n- [await](await.md)\n\n#### References\n\n- https://en.wikipedia.org/wiki/Ajax_(programming)\n- https://developer.mozilla.org/en-US/docs/AJAX"},"original":{"markdown":"## Explain Ajax in as much detail as possible.\n\nAjax (**asynchronous JavaScript and XML**) is a set of web development techniques using many web technologies on the client side to create asynchronous web applications.\n\nWith Ajax, web applications can send data to and retrieve from a server asynchronously (in the background) without interfering with the display and behavior of the existing page. By decoupling the data interchange layer from the presentation layer, Ajax allows for web pages, and by extension web applications, to change content dynamically without the need to reload the entire page.\n\nIn practice, modern implementations commonly use JSON instead of XML, due to the advantages of JSON being native to JavaScript.\n\nThe `XMLHttpRequest` API is frequently used for the asynchronous communication or these days, the `fetch` API.\n\n### see also\n\n- [ajax](ajax.md)\n- [ajax2](ajax2.md)\n- [promes](promes.md)\n- [promes2](promes2.md)\n- [async](async.md)\n- [await](await.md)\n\n#### References\n\n- https://en.wikipedia.org/wiki/Ajax_(programming)\n- https://developer.mozilla.org/en-US/docs/AJAX\n","html":"<h2>Explain Ajax in as much detail as possible.</h2>\n<p>Ajax (<strong>asynchronous JavaScript and XML</strong>) is a set of web development techniques using many web technologies on the client side to create asynchronous web applications.</p>\n<p>With Ajax, web applications can send data to and retrieve from a server asynchronously (in the background) without interfering with the display and behavior of the existing page. By decoupling the data interchange layer from the presentation layer, Ajax allows for web pages, and by extension web applications, to change content dynamically without the need to reload the entire page.</p>\n<p>In practice, modern implementations commonly use JSON instead of XML, due to the advantages of JSON being native to JavaScript.</p>\n<p>The <code>XMLHttpRequest</code> API is frequently used for the asynchronous communication or these days, the <code>fetch</code> API.</p>\n<h3>see also</h3><ul><li><a href=\"ajax.md\">ajax</a></li><li><a href=\"ajax2.md\">ajax2</a></li><li><a href=\"promes.md\">promes</a></li><li><a href=\"promes2.md\">promes2</a></li><li><a href=\"async.md\">async</a></li><li><a href=\"await.md\">await</a></li></ul>\n<h4>References</h4><ul><li><a href=\"https://en.wikipedia.org/wiki/Ajax_(programming\">https://en.wikipedia.org/wiki/Ajax_(programming</a>)</li><li><a href=\"https://developer.mozilla.org/en-US/docs/AJAX\">https://developer.mozilla.org/en-US/docs/AJAX</a></li></ul>"},"_id":"Explain-Ajax-in-as-much-detail-as-possible","html":{"question":"<p>Explain Ajax in as much detail as possible.</p>","answer":"<p>Ajax (<strong>asynchronous JavaScript and XML</strong>) is a set of web development techniques using many web technologies on the client side to create asynchronous web applications.</p>\n<p>With Ajax, web applications can send data to and retrieve from a server asynchronously (in the background) without interfering with the display and behavior of the existing page. By decoupling the data interchange layer from the presentation layer, Ajax allows for web pages, and by extension web applications, to change content dynamically without the need to reload the entire page.</p>\n<p>In practice, modern implementations commonly use JSON instead of XML, due to the advantages of JSON being native to JavaScript.</p>\n<p>The <code>XMLHttpRequest</code> API is frequently used for the asynchronous communication or these days, the <code>fetch</code> API.</p>\n<h3>see also</h3><ul><li><a href=\"ajax.md\">ajax</a></li><li><a href=\"ajax2.md\">ajax2</a></li><li><a href=\"promes.md\">promes</a></li><li><a href=\"promes2.md\">promes2</a></li><li><a href=\"async.md\">async</a></li><li><a href=\"await.md\">await</a></li></ul>\n<h4>References</h4><ul><li><a href=\"https://en.wikipedia.org/wiki/Ajax_(programming\">https://en.wikipedia.org/wiki/Ajax_(programming</a>)</li><li><a href=\"https://developer.mozilla.org/en-US/docs/AJAX\">https://developer.mozilla.org/en-US/docs/AJAX</a></li></ul>"},"label":"js","filename":"ajax","question":"Explain Ajax in as much detail as possible.","answer":"Ajax (**asynchronous JavaScript and XML**) is a set of web development techniques using many web technologies on the client side to create asynchronous web applications.\n\nWith Ajax, web applications can send data to and retrieve from a server asynchronously (in the background) without interfering with the display and behavior of the existing page. By decoupling the data interchange layer from the presentation layer, Ajax allows for web pages, and by extension web applications, to change content dynamically without the need to reload the entire page.\n\nIn practice, modern implementations commonly use JSON instead of XML, due to the advantages of JSON being native to JavaScript.\n\nThe `XMLHttpRequest` API is frequently used for the asynchronous communication or these days, the `fetch` API.\n\n### see also\n\n- [ajax](ajax.md)\n- [ajax2](ajax2.md)\n- [promes](promes.md)\n- [promes2](promes2.md)\n- [async](async.md)\n- [await](await.md)\n\n#### References\n\n- https://en.wikipedia.org/wiki/Ajax_(programming)\n- https://developer.mozilla.org/en-US/docs/AJAX"},{"markdown":{"question":"What is BDD (Behavior Driven Development)? | Agile Alliance","answer":"Behaviour Driven Development (BDD) is a synthesis and refinement of practices stemming from Test Driven Development (TDD) and Acceptance Test Driven Development (ATDD).\n\nBDD augments TDD and ATDD with the following tactics:\n\n- Apply the “Five Why’s” principle to each proposed user story, so that its purpose is clearly related to business outcomes\n- thinking “from the outside in”, in other words implement only those behaviors which contribute most directly to these business outcomes, so as to minimize waste\n- describe behaviors in a single notation which is directly accessible to domain experts, testers and developers, so as to improve communication\n- apply these techniques all the way down to the lowest levels of abstraction of the software, paying particular attention to the distribution of behavior, so that evolution remains cheap\n\n### Also Known As\n\nBDD is also referred to as Specification by Example.\n\n### Expected Benefits\n\nTeams already using TDD or ATDD may want to consider BDD for several reasons:\n\n- BDD offers more precise guidance on organizing the conversation between developers, testers and domain experts\n- notations originating in the BDD approach, in particular the given-when-then canvas, are closer to everyday language and have a shallower learning curve compared to those of tools such as Fit/FitNesse\n- tools targeting a BDD approach generally afford the automatic generation of technical and end user documentation from BDD “specifications”\n\n#### References\n\n- https://www.agilealliance.org/glossary/bdd/\n- https://en.wikipedia.org/wiki/Behavior-driven_development"},"original":{"markdown":"## What is BDD (Behavior Driven Development)? | Agile Alliance\n\nBehaviour Driven Development (BDD) is a synthesis and refinement of practices stemming from Test Driven Development (TDD) and Acceptance Test Driven Development (ATDD).\n\nBDD augments TDD and ATDD with the following tactics:\n\n- Apply the “Five Why’s” principle to each proposed user story, so that its purpose is clearly related to business outcomes\n- thinking “from the outside in”, in other words implement only those behaviors which contribute most directly to these business outcomes, so as to minimize waste\n- describe behaviors in a single notation which is directly accessible to domain experts, testers and developers, so as to improve communication\n- apply these techniques all the way down to the lowest levels of abstraction of the software, paying particular attention to the distribution of behavior, so that evolution remains cheap\n\n### Also Known As\n\nBDD is also referred to as Specification by Example.\n\n### Expected Benefits\n\nTeams already using TDD or ATDD may want to consider BDD for several reasons:\n\n- BDD offers more precise guidance on organizing the conversation between developers, testers and domain experts\n- notations originating in the BDD approach, in particular the given-when-then canvas, are closer to everyday language and have a shallower learning curve compared to those of tools such as Fit/FitNesse\n- tools targeting a BDD approach generally afford the automatic generation of technical and end user documentation from BDD “specifications”\n\n#### References\n\n- https://www.agilealliance.org/glossary/bdd/\n- https://en.wikipedia.org/wiki/Behavior-driven_development\n","html":"<h2>What is BDD (Behavior Driven Development)? | Agile Alliance</h2>\n<p>Behaviour Driven Development (BDD) is a synthesis and refinement of practices stemming from Test Driven Development (TDD) and Acceptance Test Driven Development (ATDD).</p>\n<p>BDD augments TDD and ATDD with the following tactics:</p><ul><li>Apply the “Five Why’s” principle to each proposed user story, so that its purpose is clearly related to business outcomes</li><li>thinking “from the outside in”, in other words implement only those behaviors which contribute most directly to these business outcomes, so as to minimize waste</li><li>describe behaviors in a single notation which is directly accessible to domain experts, testers and developers, so as to improve communication</li><li>apply these techniques all the way down to the lowest levels of abstraction of the software, paying particular attention to the distribution of behavior, so that evolution remains cheap</li></ul>\n<h3>Also Known As</h3>\n<p>BDD is also referred to as Specification by Example.</p>\n<h3>Expected Benefits</h3>\n<p>Teams already using TDD or ATDD may want to consider BDD for several reasons:</p><ul><li>BDD offers more precise guidance on organizing the conversation between developers, testers and domain experts</li><li>notations originating in the BDD approach, in particular the given-when-then canvas, are closer to everyday language and have a shallower learning curve compared to those of tools such as Fit/FitNesse</li><li>tools targeting a BDD approach generally afford the automatic generation of technical and end user documentation from BDD “specifications”</li></ul>\n<h4>References</h4><ul><li><a href=\"https://www.agilealliance.org/glossary/bdd\">https://www.agilealliance.org/glossary/bdd</a>/</li><li><a href=\"https://en.wikipedia.org/wiki/Behavior-driven_development\">https://en.wikipedia.org/wiki/Behavior-driven_development</a></li></ul>"},"_id":"What-is-BDD-(Behavior-Driven-Development)-|-Agile-Alliance","html":{"question":"<table><thead><th align=\"null\">What is BDD (Behavior Driven Development)?</th><th align=\"null\">Agile Alliance</th></thead><tbody></tbody></table>","answer":"<p>Behaviour Driven Development (BDD) is a synthesis and refinement of practices stemming from Test Driven Development (TDD) and Acceptance Test Driven Development (ATDD).</p>\n<p>BDD augments TDD and ATDD with the following tactics:</p><ul><li>Apply the “Five Why’s” principle to each proposed user story, so that its purpose is clearly related to business outcomes</li><li>thinking “from the outside in”, in other words implement only those behaviors which contribute most directly to these business outcomes, so as to minimize waste</li><li>describe behaviors in a single notation which is directly accessible to domain experts, testers and developers, so as to improve communication</li><li>apply these techniques all the way down to the lowest levels of abstraction of the software, paying particular attention to the distribution of behavior, so that evolution remains cheap</li></ul>\n<h3>Also Known As</h3>\n<p>BDD is also referred to as Specification by Example.</p>\n<h3>Expected Benefits</h3>\n<p>Teams already using TDD or ATDD may want to consider BDD for several reasons:</p><ul><li>BDD offers more precise guidance on organizing the conversation between developers, testers and domain experts</li><li>notations originating in the BDD approach, in particular the given-when-then canvas, are closer to everyday language and have a shallower learning curve compared to those of tools such as Fit/FitNesse</li><li>tools targeting a BDD approach generally afford the automatic generation of technical and end user documentation from BDD “specifications”</li></ul>\n<h4>References</h4><ul><li><a href=\"https://www.agilealliance.org/glossary/bdd\">https://www.agilealliance.org/glossary/bdd</a>/</li><li><a href=\"https://en.wikipedia.org/wiki/Behavior-driven_development\">https://en.wikipedia.org/wiki/Behavior-driven_development</a></li></ul>"},"label":"js","filename":"bdd","question":"What is BDD (Behavior Driven Development)? | Agile Alliance","answer":"Behaviour Driven Development (BDD) is a synthesis and refinement of practices stemming from Test Driven Development (TDD) and Acceptance Test Driven Development (ATDD).\n\nBDD augments TDD and ATDD with the following tactics:\n\n- Apply the “Five Why’s” principle to each proposed user story, so that its purpose is clearly related to business outcomes\n- thinking “from the outside in”, in other words implement only those behaviors which contribute most directly to these business outcomes, so as to minimize waste\n- describe behaviors in a single notation which is directly accessible to domain experts, testers and developers, so as to improve communication\n- apply these techniques all the way down to the lowest levels of abstraction of the software, paying particular attention to the distribution of behavior, so that evolution remains cheap\n\n### Also Known As\n\nBDD is also referred to as Specification by Example.\n\n### Expected Benefits\n\nTeams already using TDD or ATDD may want to consider BDD for several reasons:\n\n- BDD offers more precise guidance on organizing the conversation between developers, testers and domain experts\n- notations originating in the BDD approach, in particular the given-when-then canvas, are closer to everyday language and have a shallower learning curve compared to those of tools such as Fit/FitNesse\n- tools targeting a BDD approach generally afford the automatic generation of technical and end user documentation from BDD “specifications”\n\n#### References\n\n- https://www.agilealliance.org/glossary/bdd/\n- https://en.wikipedia.org/wiki/Behavior-driven_development"},{"markdown":{"question":"What's the difference between a variable that is: 'null', 'undefined' or undeclared? How would you go about checking for any of these states?","answer":"Undeclared variables are created when you assign a value to an identifier that is not previously created using `var`, `let` or `const`. Undeclared variables will be defined globally, outside of the current scope. In strict mode, a `ReferenceError` will be thrown when you try to assign to an undeclared variable. Undeclared variables are bad just like how global variables are bad. Avoid them at all cost! To check for them, wrap its usage in a `try`/`catch` block.\n\n```js\nfunction foo() {\n  x = 1;\n} // Throws a ReferenceError in strict mode\nfoo();\nconsole.log(x); // 1\n```\n\nA variable that is `undefined` is a variable that has been declared, but not assigned a value. It is of type `undefined`. If a function does not return any value as the result of executing it is assigned to a variable, the variable also has the value of `undefined`. To check for it, compare using the strict equality (`===`) operator or typeof which will give the `'undefined'` string. Note that you should not be using the abstract equality operator to check, as it will also return `true` if the value is `null`.\n\n```js\nvar foo;\nconsole.log(foo); // undefined\nconsole.log(foo === undefined); // true\nconsole.log(typeof foo === \"undefined\"); // true\nconsole.log(foo == null); // true. Wrong, don't use this to check!\nfunction bar() {}\nvar baz = bar();\nconsole.log(baz); // undefined\n```\n\nA variable that is `null` will have been explicitly assigned to the `null` value. It represents no value and is different from undefined in the sense that it has been explicitly assigned. To check for `null`, simply compare using the strict equality operator. Note that like the above, you should not be using the abstract equality operator (`==`) to check, as it will also return `true` if the value is `undefined`.\n\n```js\nvar foo = null;\nconsole.log(foo === null); // true\nconsole.log(typeof foo === \"object\"); // true\nconsole.log(foo == undefined); // true. Wrong, don't use this to check!\n```\n\nAs a personal habit, I never leave my variables undeclared or unassigned. I will explicitly assign `null` to them after declaring if I don't intend to use it yet. If you use a linter in your workflow, it will usually also be able to check that you are not referencing undeclared variables.\n\n### References\n\n- https://stackoverflow.com/questions/15985875/effect-of-declared-and-undeclared-variables\n- https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/undefined"},"original":{"markdown":"## What's the difference between a variable that is: `null`, `undefined` or undeclared? How would you go about checking for any of these states?\n\nUndeclared variables are created when you assign a value to an identifier that is not previously created using `var`, `let` or `const`. Undeclared variables will be defined globally, outside of the current scope. In strict mode, a `ReferenceError` will be thrown when you try to assign to an undeclared variable. Undeclared variables are bad just like how global variables are bad. Avoid them at all cost! To check for them, wrap its usage in a `try`/`catch` block.\n\n```js\nfunction foo() {\n  x = 1;\n} // Throws a ReferenceError in strict mode\nfoo();\nconsole.log(x); // 1\n```\n\nA variable that is `undefined` is a variable that has been declared, but not assigned a value. It is of type `undefined`. If a function does not return any value as the result of executing it is assigned to a variable, the variable also has the value of `undefined`. To check for it, compare using the strict equality (`===`) operator or typeof which will give the `'undefined'` string. Note that you should not be using the abstract equality operator to check, as it will also return `true` if the value is `null`.\n\n```js\nvar foo;\nconsole.log(foo); // undefined\nconsole.log(foo === undefined); // true\nconsole.log(typeof foo === \"undefined\"); // true\nconsole.log(foo == null); // true. Wrong, don't use this to check!\nfunction bar() {}\nvar baz = bar();\nconsole.log(baz); // undefined\n```\n\nA variable that is `null` will have been explicitly assigned to the `null` value. It represents no value and is different from undefined in the sense that it has been explicitly assigned. To check for `null`, simply compare using the strict equality operator. Note that like the above, you should not be using the abstract equality operator (`==`) to check, as it will also return `true` if the value is `undefined`.\n\n```js\nvar foo = null;\nconsole.log(foo === null); // true\nconsole.log(typeof foo === \"object\"); // true\nconsole.log(foo == undefined); // true. Wrong, don't use this to check!\n```\n\nAs a personal habit, I never leave my variables undeclared or unassigned. I will explicitly assign `null` to them after declaring if I don't intend to use it yet. If you use a linter in your workflow, it will usually also be able to check that you are not referencing undeclared variables.\n\n### References\n\n- https://stackoverflow.com/questions/15985875/effect-of-declared-and-undeclared-variables\n- https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/undefined\n","html":"<h2>What's the difference between a variable that is: <code>null</code>, <code>undefined</code> or undeclared? How would you go about checking for any of these states?</h2>\n<p>Undeclared variables are created when you assign a value to an identifier that is not previously created using <code>var</code>, <code>let</code> or <code>const</code>. Undeclared variables will be defined globally, outside of the current scope. In strict mode, a <code>ReferenceError</code> will be thrown when you try to assign to an undeclared variable. Undeclared variables are bad just like how global variables are bad. Avoid them at all cost! To check for them, wrap its usage in a <code>try</code>/<code>catch</code> block.</p>\n<pre><code class=\"prettyprint js\">function foo() {\n  x = 1;\n} // Throws a ReferenceError in strict mode\nfoo();\nconsole.log(x); // 1</code></pre>\n<p>A variable that is <code>undefined</code> is a variable that has been declared, but not assigned a value. It is of type <code>undefined</code>. If a function does not return any value as the result of executing it is assigned to a variable, the variable also has the value of <code>undefined</code>. To check for it, compare using the strict equality (<code>===</code>) operator or typeof which will give the <code>'undefined'</code> string. Note that you should not be using the abstract equality operator to check, as it will also return <code>true</code> if the value is <code>null</code>.</p>\n<pre><code class=\"prettyprint js\">var foo;\nconsole.log(foo); // undefined\nconsole.log(foo === undefined); // true\nconsole.log(typeof foo === \"undefined\"); // true\nconsole.log(foo == null); // true. Wrong, don't use this to check!\nfunction bar() {}\nvar baz = bar();\nconsole.log(baz); // undefined</code></pre>\n<p>A variable that is <code>null</code> will have been explicitly assigned to the <code>null</code> value. It represents no value and is different from undefined in the sense that it has been explicitly assigned. To check for <code>null</code>, simply compare using the strict equality operator. Note that like the above, you should not be using the abstract equality operator (<code>==</code>) to check, as it will also return <code>true</code> if the value is <code>undefined</code>.</p>\n<pre><code class=\"prettyprint js\">var foo = null;\nconsole.log(foo === null); // true\nconsole.log(typeof foo === \"object\"); // true\nconsole.log(foo == undefined); // true. Wrong, don't use this to check!</code></pre>\n<p>As a personal habit, I never leave my variables undeclared or unassigned. I will explicitly assign <code>null</code> to them after declaring if I don't intend to use it yet. If you use a linter in your workflow, it will usually also be able to check that you are not referencing undeclared variables.</p>\n<h3>References</h3><ul><li><a href=\"https://stackoverflow.com/questions/15985875/effect-of-declared-and-undeclared-variables\">https://stackoverflow.com/questions/15985875/effect-of-declared-and-undeclared-variables</a></li><li><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/undefined\">https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/undefined</a></li></ul>"},"_id":"What's-the-difference-between-a-variable-that-is:-'null',-'undefined'-or-undeclared-How-would-you-go-about-checking-for-any-of-these-states","html":{"question":"<p>What's the difference between a variable that is: 'null', 'undefined' or undeclared? How would you go about checking for any of these states?</p>","answer":"<p>Undeclared variables are created when you assign a value to an identifier that is not previously created using <code>var</code>, <code>let</code> or <code>const</code>. Undeclared variables will be defined globally, outside of the current scope. In strict mode, a <code>ReferenceError</code> will be thrown when you try to assign to an undeclared variable. Undeclared variables are bad just like how global variables are bad. Avoid them at all cost! To check for them, wrap its usage in a <code>try</code>/<code>catch</code> block.</p>\n<pre><code class=\"prettyprint js\">function foo() {\n  x = 1;\n} // Throws a ReferenceError in strict mode\nfoo();\nconsole.log(x); // 1</code></pre>\n<p>A variable that is <code>undefined</code> is a variable that has been declared, but not assigned a value. It is of type <code>undefined</code>. If a function does not return any value as the result of executing it is assigned to a variable, the variable also has the value of <code>undefined</code>. To check for it, compare using the strict equality (<code>===</code>) operator or typeof which will give the <code>'undefined'</code> string. Note that you should not be using the abstract equality operator to check, as it will also return <code>true</code> if the value is <code>null</code>.</p>\n<pre><code class=\"prettyprint js\">var foo;\nconsole.log(foo); // undefined\nconsole.log(foo === undefined); // true\nconsole.log(typeof foo === \"undefined\"); // true\nconsole.log(foo == null); // true. Wrong, don't use this to check!\nfunction bar() {}\nvar baz = bar();\nconsole.log(baz); // undefined</code></pre>\n<p>A variable that is <code>null</code> will have been explicitly assigned to the <code>null</code> value. It represents no value and is different from undefined in the sense that it has been explicitly assigned. To check for <code>null</code>, simply compare using the strict equality operator. Note that like the above, you should not be using the abstract equality operator (<code>==</code>) to check, as it will also return <code>true</code> if the value is <code>undefined</code>.</p>\n<pre><code class=\"prettyprint js\">var foo = null;\nconsole.log(foo === null); // true\nconsole.log(typeof foo === \"object\"); // true\nconsole.log(foo == undefined); // true. Wrong, don't use this to check!</code></pre>\n<p>As a personal habit, I never leave my variables undeclared or unassigned. I will explicitly assign <code>null</code> to them after declaring if I don't intend to use it yet. If you use a linter in your workflow, it will usually also be able to check that you are not referencing undeclared variables.</p>\n<h3>References</h3><ul><li><a href=\"https://stackoverflow.com/questions/15985875/effect-of-declared-and-undeclared-variables\">https://stackoverflow.com/questions/15985875/effect-of-declared-and-undeclared-variables</a></li><li><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/undefined\">https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/undefined</a></li></ul>"},"label":"js","filename":"null_undefined_undeclared","question":"What's the difference between a variable that is: 'null', 'undefined' or undeclared? How would you go about checking for any of these states?","answer":"Undeclared variables are created when you assign a value to an identifier that is not previously created using `var`, `let` or `const`. Undeclared variables will be defined globally, outside of the current scope. In strict mode, a `ReferenceError` will be thrown when you try to assign to an undeclared variable. Undeclared variables are bad just like how global variables are bad. Avoid them at all cost! To check for them, wrap its usage in a `try`/`catch` block.\n\n```js\nfunction foo() {\n  x = 1;\n} // Throws a ReferenceError in strict mode\nfoo();\nconsole.log(x); // 1\n```\n\nA variable that is `undefined` is a variable that has been declared, but not assigned a value. It is of type `undefined`. If a function does not return any value as the result of executing it is assigned to a variable, the variable also has the value of `undefined`. To check for it, compare using the strict equality (`===`) operator or typeof which will give the `'undefined'` string. Note that you should not be using the abstract equality operator to check, as it will also return `true` if the value is `null`.\n\n```js\nvar foo;\nconsole.log(foo); // undefined\nconsole.log(foo === undefined); // true\nconsole.log(typeof foo === \"undefined\"); // true\nconsole.log(foo == null); // true. Wrong, don't use this to check!\nfunction bar() {}\nvar baz = bar();\nconsole.log(baz); // undefined\n```\n\nA variable that is `null` will have been explicitly assigned to the `null` value. It represents no value and is different from undefined in the sense that it has been explicitly assigned. To check for `null`, simply compare using the strict equality operator. Note that like the above, you should not be using the abstract equality operator (`==`) to check, as it will also return `true` if the value is `undefined`.\n\n```js\nvar foo = null;\nconsole.log(foo === null); // true\nconsole.log(typeof foo === \"object\"); // true\nconsole.log(foo == undefined); // true. Wrong, don't use this to check!\n```\n\nAs a personal habit, I never leave my variables undeclared or unassigned. I will explicitly assign `null` to them after declaring if I don't intend to use it yet. If you use a linter in your workflow, it will usually also be able to check that you are not referencing undeclared variables.\n\n### References\n\n- https://stackoverflow.com/questions/15985875/effect-of-declared-and-undeclared-variables\n- https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/undefined"},{"markdown":{"question":"What is promise chaining?","answer":"The process of executing a sequence of asynchronous tasks one after another using promises is known as Promise chaining.\n\n```javascript\nnew Promise(function (resolve, reject) {\n  setTimeout(() => resolve(1), 1000);\n})\n  .then(function (result) {\n    console.log(result); // 1\n    return result * 2;\n  })\n  .then(function (result) {\n    console.log(result); // 2\n    return result * 3;\n  })\n  .then(function (result) {\n    console.log(result); // 6\n    return result * 4;\n  });\n```\n\nIn the above handlers, the result is passed to the chain of .then() handlers with the below work flow,\n\n1. The initial promise resolves in 1 second,\n2. After that `.then` handler is called by logging the result(1) and then return a promise with the value of result \\* 2.\n3. After that the value passed to the next `.then` handler by logging the result(2) and return a promise with result \\* 3.\n4. Finally the value passed to the last `.then` handler by logging the result(6) and return a promise with result \\* 4.\n\n## see also\n\n- [promes](promes.md)\n- [promes2](promes2.md)\n- [async](async.md)\n- [await](await.md)\n\n#### References"},"original":{"markdown":"## What is promise chaining?\n\nThe process of executing a sequence of asynchronous tasks one after another using promises is known as Promise chaining.\n\n```javascript\nnew Promise(function (resolve, reject) {\n  setTimeout(() => resolve(1), 1000);\n})\n  .then(function (result) {\n    console.log(result); // 1\n    return result * 2;\n  })\n  .then(function (result) {\n    console.log(result); // 2\n    return result * 3;\n  })\n  .then(function (result) {\n    console.log(result); // 6\n    return result * 4;\n  });\n```\n\nIn the above handlers, the result is passed to the chain of .then() handlers with the below work flow,\n\n1. The initial promise resolves in 1 second,\n2. After that `.then` handler is called by logging the result(1) and then return a promise with the value of result \\* 2.\n3. After that the value passed to the next `.then` handler by logging the result(2) and return a promise with result \\* 3.\n4. Finally the value passed to the last `.then` handler by logging the result(6) and return a promise with result \\* 4.\n\n## see also\n\n- [promes](promes.md)\n- [promes2](promes2.md)\n- [async](async.md)\n- [await](await.md)\n\n#### References\n","html":"<h2>What is promise chaining?</h2>\n<p>The process of executing a sequence of asynchronous tasks one after another using promises is known as Promise chaining.</p>\n<pre><code class=\"prettyprint javascript\">new Promise(function (resolve, reject) {\n  setTimeout(() =&gt; resolve(1), 1000);\n})\n  .then(function (result) {\n    console.log(result); // 1\n    return result * 2;\n  })\n  .then(function (result) {\n    console.log(result); // 2\n    return result * 3;\n  })\n  .then(function (result) {\n    console.log(result); // 6\n    return result * 4;\n  });</code></pre>\n<p>In the above handlers, the result is passed to the chain of .then() handlers with the below work flow,</p><ol><li>The initial promise resolves in 1 second,</li><li>After that <code>.then</code> handler is called by logging the result(1) and then return a promise with the value of result * 2.</li><li>After that the value passed to the next <code>.then</code> handler by logging the result(2) and return a promise with result * 3.</li><li>Finally the value passed to the last <code>.then</code> handler by logging the result(6) and return a promise with result * 4.</li></ol>\n<h2>see also</h2><ul><li><a href=\"promes.md\">promes</a></li><li><a href=\"promes2.md\">promes2</a></li><li><a href=\"async.md\">async</a></li><li><a href=\"await.md\">await</a></li></ul>\n<h4>References</h4>"},"_id":"What-is-promise-chaining","html":{"question":"<p>What is promise chaining?</p>","answer":"<p>The process of executing a sequence of asynchronous tasks one after another using promises is known as Promise chaining.</p>\n<pre><code class=\"prettyprint javascript\">new Promise(function (resolve, reject) {\n  setTimeout(() =&gt; resolve(1), 1000);\n})\n  .then(function (result) {\n    console.log(result); // 1\n    return result * 2;\n  })\n  .then(function (result) {\n    console.log(result); // 2\n    return result * 3;\n  })\n  .then(function (result) {\n    console.log(result); // 6\n    return result * 4;\n  });</code></pre>\n<p>In the above handlers, the result is passed to the chain of .then() handlers with the below work flow,</p><ol><li>The initial promise resolves in 1 second,</li><li>After that <code>.then</code> handler is called by logging the result(1) and then return a promise with the value of result * 2.</li><li>After that the value passed to the next <code>.then</code> handler by logging the result(2) and return a promise with result * 3.</li><li>Finally the value passed to the last <code>.then</code> handler by logging the result(6) and return a promise with result * 4.</li></ol>\n<h2>see also</h2><ul><li><a href=\"promes.md\">promes</a></li><li><a href=\"promes2.md\">promes2</a></li><li><a href=\"async.md\">async</a></li><li><a href=\"await.md\">await</a></li></ul>\n<h4>References</h4>"},"label":"js","filename":"promes","question":"What is promise chaining?","answer":"The process of executing a sequence of asynchronous tasks one after another using promises is known as Promise chaining.\n\n```javascript\nnew Promise(function (resolve, reject) {\n  setTimeout(() => resolve(1), 1000);\n})\n  .then(function (result) {\n    console.log(result); // 1\n    return result * 2;\n  })\n  .then(function (result) {\n    console.log(result); // 2\n    return result * 3;\n  })\n  .then(function (result) {\n    console.log(result); // 6\n    return result * 4;\n  });\n```\n\nIn the above handlers, the result is passed to the chain of .then() handlers with the below work flow,\n\n1. The initial promise resolves in 1 second,\n2. After that `.then` handler is called by logging the result(1) and then return a promise with the value of result \\* 2.\n3. After that the value passed to the next `.then` handler by logging the result(2) and return a promise with result \\* 3.\n4. Finally the value passed to the last `.then` handler by logging the result(6) and return a promise with result \\* 4.\n\n## see also\n\n- [promes](promes.md)\n- [promes2](promes2.md)\n- [async](async.md)\n- [await](await.md)\n\n#### References"},{"markdown":{"question":"Can you give an example of a curry function and why this syntax offers an advantage?","answer":"Currying is a pattern where a function with more than one parameter is broken into multiple functions that, when called in series, will accumulate all of the required parameters one at a time. This technique can be useful for making code written in a functional style easier to read and compose. It's important to note that for a function to be curried, it needs to start out as one function, then broken out into a sequence of functions that each accepts one parameter.\n\n```js\nfunction curry(fn) {\n  if (fn.length === 0) {\n    return fn;\n  }\n\n  function _curried(depth, args) {\n    return function (newArgument) {\n      if (depth - 1 === 0) {\n        return fn(...args, newArgument);\n      }\n      return _curried(depth - 1, [...args, newArgument]);\n    };\n  }\n\n  return _curried(fn.length, []);\n}\n\nfunction add(a, b) {\n  return a + b;\n}\n\nvar curriedAdd = curry(add);\nvar addFive = curriedAdd(5);\n\nvar result = [0, 1, 2, 3, 4, 5].map(addFive); // [5, 6, 7, 8, 9, 10]\n```\n\n---\n\nCurrying is when you break down a function that takes multiple arguments into a series of functions that each take only one argument. Here's an example in JavaScript:\n\n```js\nfunction add(a, b) {\n  return a + b;\n}\n\nadd(3, 4); // returns 7\n```\n\nThis is a function that takes two arguments, a and b, and returns their sum. We will now curry this function:\n\n```js\nfunction add(a) {\n  return function (b) {\n    return a + b;\n  };\n}\n```\n\nThis is a function that takes one argument, `a`, and returns `a` function that takes another argument, `b`, and that function returns their sum.\n\n```js\nadd(3)(4);\n\nvar add3 = add(3);\n\nadd3(4);\n```\n\nThe first statement returns `7`, like the `add(3, 4)` statement. The second statement defines a new function called `add3` that will add `3` to its argument. (This is what some may call a closure.) The third statement uses the `add3` operation to add `3` to `4`, again producing `7` as a result.\n\n#### References\n\n- https://stackoverflow.com/questions/36314/what-is-currying\n- https://javascript.info/currying-partials\n- https://medium.com/javascript-scene/curry-and-function-composition-2c208d774983\n- https://hackernoon.com/currying-in-js-d9ddc64f162e"},"original":{"markdown":"## Can you give an example of a curry function and why this syntax offers an advantage?\n\nCurrying is a pattern where a function with more than one parameter is broken into multiple functions that, when called in series, will accumulate all of the required parameters one at a time. This technique can be useful for making code written in a functional style easier to read and compose. It's important to note that for a function to be curried, it needs to start out as one function, then broken out into a sequence of functions that each accepts one parameter.\n\n```js\nfunction curry(fn) {\n  if (fn.length === 0) {\n    return fn;\n  }\n\n  function _curried(depth, args) {\n    return function (newArgument) {\n      if (depth - 1 === 0) {\n        return fn(...args, newArgument);\n      }\n      return _curried(depth - 1, [...args, newArgument]);\n    };\n  }\n\n  return _curried(fn.length, []);\n}\n\nfunction add(a, b) {\n  return a + b;\n}\n\nvar curriedAdd = curry(add);\nvar addFive = curriedAdd(5);\n\nvar result = [0, 1, 2, 3, 4, 5].map(addFive); // [5, 6, 7, 8, 9, 10]\n```\n\n---\n\nCurrying is when you break down a function that takes multiple arguments into a series of functions that each take only one argument. Here's an example in JavaScript:\n\n```js\nfunction add(a, b) {\n  return a + b;\n}\n\nadd(3, 4); // returns 7\n```\n\nThis is a function that takes two arguments, a and b, and returns their sum. We will now curry this function:\n\n```js\nfunction add(a) {\n  return function (b) {\n    return a + b;\n  };\n}\n```\n\nThis is a function that takes one argument, `a`, and returns `a` function that takes another argument, `b`, and that function returns their sum.\n\n```js\nadd(3)(4);\n\nvar add3 = add(3);\n\nadd3(4);\n```\n\nThe first statement returns `7`, like the `add(3, 4)` statement. The second statement defines a new function called `add3` that will add `3` to its argument. (This is what some may call a closure.) The third statement uses the `add3` operation to add `3` to `4`, again producing `7` as a result.\n\n#### References\n\n- https://stackoverflow.com/questions/36314/what-is-currying\n- https://javascript.info/currying-partials\n- https://medium.com/javascript-scene/curry-and-function-composition-2c208d774983\n- https://hackernoon.com/currying-in-js-d9ddc64f162e\n","html":"<h2>Can you give an example of a curry function and why this syntax offers an advantage?</h2>\n<p>Currying is a pattern where a function with more than one parameter is broken into multiple functions that, when called in series, will accumulate all of the required parameters one at a time. This technique can be useful for making code written in a functional style easier to read and compose. It's important to note that for a function to be curried, it needs to start out as one function, then broken out into a sequence of functions that each accepts one parameter.</p>\n<pre><code class=\"prettyprint js\">function curry(fn) {\n  if (fn.length === 0) {\n    return fn;\n  }\n\n  function _curried(depth, args) {\n    return function (newArgument) {\n      if (depth - 1 === 0) {\n        return fn(...args, newArgument);\n      }\n      return _curried(depth - 1, [...args, newArgument]);\n    };\n  }\n\n  return _curried(fn.length, []);\n}\n\nfunction add(a, b) {\n  return a + b;\n}\n\nvar curriedAdd = curry(add);\nvar addFive = curriedAdd(5);\n\nvar result = [0, 1, 2, 3, 4, 5].map(addFive); // [5, 6, 7, 8, 9, 10]</code></pre>\n<hr />\n<p>Currying is when you break down a function that takes multiple arguments into a series of functions that each take only one argument. Here's an example in JavaScript:</p>\n<pre><code class=\"prettyprint js\">function add(a, b) {\n  return a + b;\n}\n\nadd(3, 4); // returns 7</code></pre>\n<p>This is a function that takes two arguments, a and b, and returns their sum. We will now curry this function:</p>\n<pre><code class=\"prettyprint js\">function add(a) {\n  return function (b) {\n    return a + b;\n  };\n}</code></pre>\n<p>This is a function that takes one argument, <code>a</code>, and returns <code>a</code> function that takes another argument, <code>b</code>, and that function returns their sum.</p>\n<pre><code class=\"prettyprint js\">add(3)(4);\n\nvar add3 = add(3);\n\nadd3(4);</code></pre>\n<p>The first statement returns <code>7</code>, like the <code>add(3, 4)</code> statement. The second statement defines a new function called <code>add3</code> that will add <code>3</code> to its argument. (This is what some may call a closure.) The third statement uses the <code>add3</code> operation to add <code>3</code> to <code>4</code>, again producing <code>7</code> as a result.</p>\n<h4>References</h4><ul><li><a href=\"https://stackoverflow.com/questions/36314/what-is-currying\">https://stackoverflow.com/questions/36314/what-is-currying</a></li><li><a href=\"https://javascript.info/currying-partials\">https://javascript.info/currying-partials</a></li><li><a href=\"https://medium.com/javascript-scene/curry-and-function-composition-2c208d774983\">https://medium.com/javascript-scene/curry-and-function-composition-2c208d774983</a></li><li><a href=\"https://hackernoon.com/currying-in-js-d9ddc64f162e\">https://hackernoon.com/currying-in-js-d9ddc64f162e</a></li></ul>"},"_id":"Can-you-give-an-example-of-a-curry-function-and-why-this-syntax-offers-an-advantage","html":{"question":"<p>Can you give an example of a curry function and why this syntax offers an advantage?</p>","answer":"<p>Currying is a pattern where a function with more than one parameter is broken into multiple functions that, when called in series, will accumulate all of the required parameters one at a time. This technique can be useful for making code written in a functional style easier to read and compose. It's important to note that for a function to be curried, it needs to start out as one function, then broken out into a sequence of functions that each accepts one parameter.</p>\n<pre><code class=\"prettyprint js\">function curry(fn) {\n  if (fn.length === 0) {\n    return fn;\n  }\n\n  function _curried(depth, args) {\n    return function (newArgument) {\n      if (depth - 1 === 0) {\n        return fn(...args, newArgument);\n      }\n      return _curried(depth - 1, [...args, newArgument]);\n    };\n  }\n\n  return _curried(fn.length, []);\n}\n\nfunction add(a, b) {\n  return a + b;\n}\n\nvar curriedAdd = curry(add);\nvar addFive = curriedAdd(5);\n\nvar result = [0, 1, 2, 3, 4, 5].map(addFive); // [5, 6, 7, 8, 9, 10]</code></pre>\n<hr />\n<p>Currying is when you break down a function that takes multiple arguments into a series of functions that each take only one argument. Here's an example in JavaScript:</p>\n<pre><code class=\"prettyprint js\">function add(a, b) {\n  return a + b;\n}\n\nadd(3, 4); // returns 7</code></pre>\n<p>This is a function that takes two arguments, a and b, and returns their sum. We will now curry this function:</p>\n<pre><code class=\"prettyprint js\">function add(a) {\n  return function (b) {\n    return a + b;\n  };\n}</code></pre>\n<p>This is a function that takes one argument, <code>a</code>, and returns <code>a</code> function that takes another argument, <code>b</code>, and that function returns their sum.</p>\n<pre><code class=\"prettyprint js\">add(3)(4);\n\nvar add3 = add(3);\n\nadd3(4);</code></pre>\n<p>The first statement returns <code>7</code>, like the <code>add(3, 4)</code> statement. The second statement defines a new function called <code>add3</code> that will add <code>3</code> to its argument. (This is what some may call a closure.) The third statement uses the <code>add3</code> operation to add <code>3</code> to <code>4</code>, again producing <code>7</code> as a result.</p>\n<h4>References</h4><ul><li><a href=\"https://stackoverflow.com/questions/36314/what-is-currying\">https://stackoverflow.com/questions/36314/what-is-currying</a></li><li><a href=\"https://javascript.info/currying-partials\">https://javascript.info/currying-partials</a></li><li><a href=\"https://medium.com/javascript-scene/curry-and-function-composition-2c208d774983\">https://medium.com/javascript-scene/curry-and-function-composition-2c208d774983</a></li><li><a href=\"https://hackernoon.com/currying-in-js-d9ddc64f162e\">https://hackernoon.com/currying-in-js-d9ddc64f162e</a></li></ul>"},"label":"js","filename":"curry_function","question":"Can you give an example of a curry function and why this syntax offers an advantage?","answer":"Currying is a pattern where a function with more than one parameter is broken into multiple functions that, when called in series, will accumulate all of the required parameters one at a time. This technique can be useful for making code written in a functional style easier to read and compose. It's important to note that for a function to be curried, it needs to start out as one function, then broken out into a sequence of functions that each accepts one parameter.\n\n```js\nfunction curry(fn) {\n  if (fn.length === 0) {\n    return fn;\n  }\n\n  function _curried(depth, args) {\n    return function (newArgument) {\n      if (depth - 1 === 0) {\n        return fn(...args, newArgument);\n      }\n      return _curried(depth - 1, [...args, newArgument]);\n    };\n  }\n\n  return _curried(fn.length, []);\n}\n\nfunction add(a, b) {\n  return a + b;\n}\n\nvar curriedAdd = curry(add);\nvar addFive = curriedAdd(5);\n\nvar result = [0, 1, 2, 3, 4, 5].map(addFive); // [5, 6, 7, 8, 9, 10]\n```\n\n---\n\nCurrying is when you break down a function that takes multiple arguments into a series of functions that each take only one argument. Here's an example in JavaScript:\n\n```js\nfunction add(a, b) {\n  return a + b;\n}\n\nadd(3, 4); // returns 7\n```\n\nThis is a function that takes two arguments, a and b, and returns their sum. We will now curry this function:\n\n```js\nfunction add(a) {\n  return function (b) {\n    return a + b;\n  };\n}\n```\n\nThis is a function that takes one argument, `a`, and returns `a` function that takes another argument, `b`, and that function returns their sum.\n\n```js\nadd(3)(4);\n\nvar add3 = add(3);\n\nadd3(4);\n```\n\nThe first statement returns `7`, like the `add(3, 4)` statement. The second statement defines a new function called `add3` that will add `3` to its argument. (This is what some may call a closure.) The third statement uses the `add3` operation to add `3` to `4`, again producing `7` as a result.\n\n#### References\n\n- https://stackoverflow.com/questions/36314/what-is-currying\n- https://javascript.info/currying-partials\n- https://medium.com/javascript-scene/curry-and-function-composition-2c208d774983\n- https://hackernoon.com/currying-in-js-d9ddc64f162e"},{"markdown":{"question":"JavaScript Template Literals","answer":"Template literals are literals delimited with backticks (`\\``), allowing embedded expressions called substitutions.\n\nSynonyms:\n\n- Template Literals\n- Template Strings\n- String Templates\n- Back-Tics Syntax\n\n### Variable Substitutions\n\nTemplate literals allow variables in strings:\n\n```js\nlet firstName = \"John\";\nlet lastName = \"Doe\";\n\nlet text = `Welcome ${firstName}, ${lastName}!`;\n```\n\n> Automatic replacing of variables with real values is called string interpolation.\n\n```js\nlet price = 10;\nlet VAT = 0.25;\n\nlet total = `Total: ${(price * (1 + VAT)).toFixed(2)}`;\n```\n\n```js\net header = \"Templates Literals\";\nlet tags = [\"template literals\", \"javascript\", \"es6\"];\n\nlet html = `<h2>${header}</h2><ul>`;\nfor (const x of tags) {\n  html += `<li>${x}</li>`;\n}\n\nhtml += `</ul>`;\n```\n\n#### References\n\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\n- https://www.w3schools.com/JS//js_string_templates.asp"},"original":{"markdown":"## JavaScript Template Literals\n\nTemplate literals are literals delimited with backticks (`\\``), allowing embedded expressions called substitutions.\n\nSynonyms:\n\n- Template Literals\n- Template Strings\n- String Templates\n- Back-Tics Syntax\n\n### Variable Substitutions\n\nTemplate literals allow variables in strings:\n\n```js\nlet firstName = \"John\";\nlet lastName = \"Doe\";\n\nlet text = `Welcome ${firstName}, ${lastName}!`;\n```\n\n> Automatic replacing of variables with real values is called string interpolation.\n\n```js\nlet price = 10;\nlet VAT = 0.25;\n\nlet total = `Total: ${(price * (1 + VAT)).toFixed(2)}`;\n```\n\n```js\net header = \"Templates Literals\";\nlet tags = [\"template literals\", \"javascript\", \"es6\"];\n\nlet html = `<h2>${header}</h2><ul>`;\nfor (const x of tags) {\n  html += `<li>${x}</li>`;\n}\n\nhtml += `</ul>`;\n```\n\n#### References\n\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\n- https://www.w3schools.com/JS//js_string_templates.asp\n","html":"<h2>JavaScript Template Literals</h2>\n<p>Template literals are literals delimited with backticks (<code>\\</code>`), allowing embedded expressions called substitutions.</p>\n<p>Synonyms:</p><ul><li>Template Literals</li><li>Template Strings</li><li>String Templates</li><li>Back-Tics Syntax</li></ul>\n<h3>Variable Substitutions</h3>\n<p>Template literals allow variables in strings:</p>\n<pre><code class=\"prettyprint js\">let firstName = \"John\";\nlet lastName = \"Doe\";\n\nlet text = `Welcome ${firstName}, ${lastName}!`;</code></pre>\n<blockquote>\n<p>Automatic replacing of variables with real values is called string interpolation.</p></blockquote>\n<pre><code class=\"prettyprint js\">let price = 10;\nlet VAT = 0.25;\n\nlet total = `Total: ${(price * (1 + VAT)).toFixed(2)}`;</code></pre>\n<pre><code class=\"prettyprint js\">et header = \"Templates Literals\";\nlet tags = [\"template literals\", \"javascript\", \"es6\"];\n\nlet html = `&lt;h2&gt;${header}&lt;/h2&gt;&lt;ul&gt;`;\nfor (const x of tags) {\n  html += `&lt;li&gt;${x}&lt;/li&gt;`;\n}\n\nhtml += `&lt;/ul&gt;`;</code></pre>\n<h4>References</h4><ul><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals</a></li><li><a href=\"https://www.w3schools.com/JS//js_string_templates.asp\">https://www.w3schools.com/JS//js_string_templates.asp</a></li></ul>"},"_id":"JavaScript-Template-Literals","html":{"question":"<p>JavaScript Template Literals</p>","answer":"<p>Template literals are literals delimited with backticks (<code>\\</code>`), allowing embedded expressions called substitutions.</p>\n<p>Synonyms:</p><ul><li>Template Literals</li><li>Template Strings</li><li>String Templates</li><li>Back-Tics Syntax</li></ul>\n<h3>Variable Substitutions</h3>\n<p>Template literals allow variables in strings:</p>\n<pre><code class=\"prettyprint js\">let firstName = \"John\";\nlet lastName = \"Doe\";\n\nlet text = `Welcome ${firstName}, ${lastName}!`;</code></pre>\n<blockquote>\n<p>Automatic replacing of variables with real values is called string interpolation.</p></blockquote>\n<pre><code class=\"prettyprint js\">let price = 10;\nlet VAT = 0.25;\n\nlet total = `Total: ${(price * (1 + VAT)).toFixed(2)}`;</code></pre>\n<pre><code class=\"prettyprint js\">et header = \"Templates Literals\";\nlet tags = [\"template literals\", \"javascript\", \"es6\"];\n\nlet html = `&lt;h2&gt;${header}&lt;/h2&gt;&lt;ul&gt;`;\nfor (const x of tags) {\n  html += `&lt;li&gt;${x}&lt;/li&gt;`;\n}\n\nhtml += `&lt;/ul&gt;`;</code></pre>\n<h4>References</h4><ul><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals</a></li><li><a href=\"https://www.w3schools.com/JS//js_string_templates.asp\">https://www.w3schools.com/JS//js_string_templates.asp</a></li></ul>"},"label":"js","filename":"template-literals","question":"JavaScript Template Literals","answer":"Template literals are literals delimited with backticks (`\\``), allowing embedded expressions called substitutions.\n\nSynonyms:\n\n- Template Literals\n- Template Strings\n- String Templates\n- Back-Tics Syntax\n\n### Variable Substitutions\n\nTemplate literals allow variables in strings:\n\n```js\nlet firstName = \"John\";\nlet lastName = \"Doe\";\n\nlet text = `Welcome ${firstName}, ${lastName}!`;\n```\n\n> Automatic replacing of variables with real values is called string interpolation.\n\n```js\nlet price = 10;\nlet VAT = 0.25;\n\nlet total = `Total: ${(price * (1 + VAT)).toFixed(2)}`;\n```\n\n```js\net header = \"Templates Literals\";\nlet tags = [\"template literals\", \"javascript\", \"es6\"];\n\nlet html = `<h2>${header}</h2><ul>`;\nfor (const x of tags) {\n  html += `<li>${x}</li>`;\n}\n\nhtml += `</ul>`;\n```\n\n#### References\n\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\n- https://www.w3schools.com/JS//js_string_templates.asp"},{"markdown":{"question":"What are the advantages and disadvantages of using Ajax?","answer":"**Advantages**\n\n- Better interactivity. New content from the server can be changed dynamically without the need to reload the entire page.\n- Reduce connections to the server since scripts and stylesheets only have to be requested once.\n- State can be maintained on a page. JavaScript variables and DOM state will persist because the main container page was not reloaded.\n- Basically most of the advantages of an SPA.\n\n**Disadvantages**\n\n- Dynamic webpages are harder to bookmark.\n- Does not work if JavaScript has been disabled in the browser.\n- Some webcrawlers do not execute JavaScript and would not see content that has been loaded by JavaScript.\n- Webpages using Ajax to fetch data will likely have to combine the fetched remote data with client-side templates to update the DOM. For this to happen, JavaScript will have to be parsed and executed on the browser, and low-end mobile devices might struggle with this.\n- Basically most of the disadvantages of an SPA."},"original":{"markdown":"## What are the advantages and disadvantages of using Ajax?\n\n**Advantages**\n\n- Better interactivity. New content from the server can be changed dynamically without the need to reload the entire page.\n- Reduce connections to the server since scripts and stylesheets only have to be requested once.\n- State can be maintained on a page. JavaScript variables and DOM state will persist because the main container page was not reloaded.\n- Basically most of the advantages of an SPA.\n\n**Disadvantages**\n\n- Dynamic webpages are harder to bookmark.\n- Does not work if JavaScript has been disabled in the browser.\n- Some webcrawlers do not execute JavaScript and would not see content that has been loaded by JavaScript.\n- Webpages using Ajax to fetch data will likely have to combine the fetched remote data with client-side templates to update the DOM. For this to happen, JavaScript will have to be parsed and executed on the browser, and low-end mobile devices might struggle with this.\n- Basically most of the disadvantages of an SPA.\n","html":"<h2>What are the advantages and disadvantages of using Ajax?</h2>\n<p><strong>Advantages</strong></p><ul><li>Better interactivity. New content from the server can be changed dynamically without the need to reload the entire page.</li><li>Reduce connections to the server since scripts and stylesheets only have to be requested once.</li><li>State can be maintained on a page. JavaScript variables and DOM state will persist because the main container page was not reloaded.</li><li>Basically most of the advantages of an SPA.</li></ul>\n<p><strong>Disadvantages</strong></p><ul><li>Dynamic webpages are harder to bookmark.</li><li>Does not work if JavaScript has been disabled in the browser.</li><li>Some webcrawlers do not execute JavaScript and would not see content that has been loaded by JavaScript.</li><li>Webpages using Ajax to fetch data will likely have to combine the fetched remote data with client-side templates to update the DOM. For this to happen, JavaScript will have to be parsed and executed on the browser, and low-end mobile devices might struggle with this.</li><li>Basically most of the disadvantages of an SPA.</li></ul>"},"_id":"What-are-the-advantages-and-disadvantages-of-using-Ajax","html":{"question":"<p>What are the advantages and disadvantages of using Ajax?</p>","answer":"<p><strong>Advantages</strong></p><ul><li>Better interactivity. New content from the server can be changed dynamically without the need to reload the entire page.</li><li>Reduce connections to the server since scripts and stylesheets only have to be requested once.</li><li>State can be maintained on a page. JavaScript variables and DOM state will persist because the main container page was not reloaded.</li><li>Basically most of the advantages of an SPA.</li></ul>\n<p><strong>Disadvantages</strong></p><ul><li>Dynamic webpages are harder to bookmark.</li><li>Does not work if JavaScript has been disabled in the browser.</li><li>Some webcrawlers do not execute JavaScript and would not see content that has been loaded by JavaScript.</li><li>Webpages using Ajax to fetch data will likely have to combine the fetched remote data with client-side templates to update the DOM. For this to happen, JavaScript will have to be parsed and executed on the browser, and low-end mobile devices might struggle with this.</li><li>Basically most of the disadvantages of an SPA.</li></ul>"},"label":"js","filename":"ajax2","question":"What are the advantages and disadvantages of using Ajax?","answer":"**Advantages**\n\n- Better interactivity. New content from the server can be changed dynamically without the need to reload the entire page.\n- Reduce connections to the server since scripts and stylesheets only have to be requested once.\n- State can be maintained on a page. JavaScript variables and DOM state will persist because the main container page was not reloaded.\n- Basically most of the advantages of an SPA.\n\n**Disadvantages**\n\n- Dynamic webpages are harder to bookmark.\n- Does not work if JavaScript has been disabled in the browser.\n- Some webcrawlers do not execute JavaScript and would not see content that has been loaded by JavaScript.\n- Webpages using Ajax to fetch data will likely have to combine the fetched remote data with client-side templates to update the DOM. For this to happen, JavaScript will have to be parsed and executed on the browser, and low-end mobile devices might struggle with this.\n- Basically most of the disadvantages of an SPA."},{"markdown":{"question":"Promise","answer":"The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.\n\nA Promise is a proxy for a value not necessarily known when the promise is created. It allows you to associate handlers with an asynchronous action's eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of immediately returning the final value, the asynchronous method returns a promise to supply the value at some point in the future.\n![](../../img/promises.png)\n\n```js\nconst myPromise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(\"foo\");\n  }, 300);\n});\n\nmyPromise\n  .then(handleResolvedA, handleRejectedA)\n  .then(handleResolvedB, handleRejectedB)\n  .then(handleResolvedC, handleRejectedC);\n```\n\n```js\nmyPromise\n  .then(handleResolvedA)\n  .then(handleResolvedB)\n  .then(handleResolvedC)\n  .catch(handleRejectedAny);\n```\n\n```js\npromise1\n  .then((value) => {\n    return value + \" and bar\";\n  })\n  .then((value) => {\n    return value + \" and bar again\";\n  })\n  .then((value) => {\n    return value + \" and again\";\n  })\n  .then((value) => {\n    return value + \" and again\";\n  })\n  .then((value) => {\n    console.log(value);\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n```\n\n## basic example\n\n```js\nlet myFirstPromise = new Promise((resolve, reject) => {\n  // We call resolve(...) when what we were doing asynchronously was successful, and reject(...) when it failed.\n  // In this example, we use setTimeout(...) to simulate async code.\n  // In reality, you will probably be using something like XHR or an HTML5 API.\n  setTimeout(function () {\n    resolve(\"Success!\"); // Yay! Everything went well!\n  }, 250);\n});\n\nmyFirstPromise.then((successMessage) => {\n  // successMessage is whatever we passed in the resolve(...) function above.\n  // It doesn't have to be a string, but if it is only a succeed message, it probably will be.\n  console.log(\"Yay! \" + successMessage);\n});\n```\n\n## see also\n\n- [promes](promes.md)\n- [promes2](promes2.md)\n- [async](async.md)\n- [await](await.md)\n\n#### References\n\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},"original":{"markdown":"## Promise\n\nThe Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.\n\nA Promise is a proxy for a value not necessarily known when the promise is created. It allows you to associate handlers with an asynchronous action's eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of immediately returning the final value, the asynchronous method returns a promise to supply the value at some point in the future.\n![](../../img/promises.png)\n\n```js\nconst myPromise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(\"foo\");\n  }, 300);\n});\n\nmyPromise\n  .then(handleResolvedA, handleRejectedA)\n  .then(handleResolvedB, handleRejectedB)\n  .then(handleResolvedC, handleRejectedC);\n```\n\n```js\nmyPromise\n  .then(handleResolvedA)\n  .then(handleResolvedB)\n  .then(handleResolvedC)\n  .catch(handleRejectedAny);\n```\n\n```js\npromise1\n  .then((value) => {\n    return value + \" and bar\";\n  })\n  .then((value) => {\n    return value + \" and bar again\";\n  })\n  .then((value) => {\n    return value + \" and again\";\n  })\n  .then((value) => {\n    return value + \" and again\";\n  })\n  .then((value) => {\n    console.log(value);\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n```\n\n## basic example\n\n```js\nlet myFirstPromise = new Promise((resolve, reject) => {\n  // We call resolve(...) when what we were doing asynchronously was successful, and reject(...) when it failed.\n  // In this example, we use setTimeout(...) to simulate async code.\n  // In reality, you will probably be using something like XHR or an HTML5 API.\n  setTimeout(function () {\n    resolve(\"Success!\"); // Yay! Everything went well!\n  }, 250);\n});\n\nmyFirstPromise.then((successMessage) => {\n  // successMessage is whatever we passed in the resolve(...) function above.\n  // It doesn't have to be a string, but if it is only a succeed message, it probably will be.\n  console.log(\"Yay! \" + successMessage);\n});\n```\n\n## see also\n\n- [promes](promes.md)\n- [promes2](promes2.md)\n- [async](async.md)\n- [await](await.md)\n\n#### References\n\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\n","html":"<h2>Promise</h2>\n<p>The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.</p>\n<p>A Promise is a proxy for a value not necessarily known when the promise is created. It allows you to associate handlers with an asynchronous action's eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of immediately returning the final value, the asynchronous method returns a promise to supply the value at some point in the future.\n<img src=\"../../img/promises.png\" /></p>\n<pre><code class=\"prettyprint js\">const myPromise = new Promise((resolve, reject) =&gt; {\n  setTimeout(() =&gt; {\n    resolve(\"foo\");\n  }, 300);\n});\n\nmyPromise\n  .then(handleResolvedA, handleRejectedA)\n  .then(handleResolvedB, handleRejectedB)\n  .then(handleResolvedC, handleRejectedC);</code></pre>\n<pre><code class=\"prettyprint js\">myPromise\n  .then(handleResolvedA)\n  .then(handleResolvedB)\n  .then(handleResolvedC)\n  .catch(handleRejectedAny);</code></pre>\n<pre><code class=\"prettyprint js\">promise1\n  .then((value) =&gt; {\n    return value + \" and bar\";\n  })\n  .then((value) =&gt; {\n    return value + \" and bar again\";\n  })\n  .then((value) =&gt; {\n    return value + \" and again\";\n  })\n  .then((value) =&gt; {\n    return value + \" and again\";\n  })\n  .then((value) =&gt; {\n    console.log(value);\n  })\n  .catch((err) =&gt; {\n    console.log(err);\n  });</code></pre>\n<h2>basic example</h2>\n<pre><code class=\"prettyprint js\">let myFirstPromise = new Promise((resolve, reject) =&gt; {\n  // We call resolve(...) when what we were doing asynchronously was successful, and reject(...) when it failed.\n  // In this example, we use setTimeout(...) to simulate async code.\n  // In reality, you will probably be using something like XHR or an HTML5 API.\n  setTimeout(function () {\n    resolve(\"Success!\"); // Yay! Everything went well!\n  }, 250);\n});\n\nmyFirstPromise.then((successMessage) =&gt; {\n  // successMessage is whatever we passed in the resolve(...) function above.\n  // It doesn't have to be a string, but if it is only a succeed message, it probably will be.\n  console.log(\"Yay! \" + successMessage);\n});</code></pre>\n<h2>see also</h2><ul><li><a href=\"promes.md\">promes</a></li><li><a href=\"promes2.md\">promes2</a></li><li><a href=\"async.md\">async</a></li><li><a href=\"await.md\">await</a></li></ul>\n<h4>References</h4><ul><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></li></ul>"},"_id":"Promise","html":{"question":"<p>Promise</p>","answer":"<p>The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.</p>\n<p>A Promise is a proxy for a value not necessarily known when the promise is created. It allows you to associate handlers with an asynchronous action's eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of immediately returning the final value, the asynchronous method returns a promise to supply the value at some point in the future.\n<img src=\"../../img/promises.png\" /></p>\n<pre><code class=\"prettyprint js\">const myPromise = new Promise((resolve, reject) =&gt; {\n  setTimeout(() =&gt; {\n    resolve(\"foo\");\n  }, 300);\n});\n\nmyPromise\n  .then(handleResolvedA, handleRejectedA)\n  .then(handleResolvedB, handleRejectedB)\n  .then(handleResolvedC, handleRejectedC);</code></pre>\n<pre><code class=\"prettyprint js\">myPromise\n  .then(handleResolvedA)\n  .then(handleResolvedB)\n  .then(handleResolvedC)\n  .catch(handleRejectedAny);</code></pre>\n<pre><code class=\"prettyprint js\">promise1\n  .then((value) =&gt; {\n    return value + \" and bar\";\n  })\n  .then((value) =&gt; {\n    return value + \" and bar again\";\n  })\n  .then((value) =&gt; {\n    return value + \" and again\";\n  })\n  .then((value) =&gt; {\n    return value + \" and again\";\n  })\n  .then((value) =&gt; {\n    console.log(value);\n  })\n  .catch((err) =&gt; {\n    console.log(err);\n  });</code></pre>\n<h2>basic example</h2>\n<pre><code class=\"prettyprint js\">let myFirstPromise = new Promise((resolve, reject) =&gt; {\n  // We call resolve(...) when what we were doing asynchronously was successful, and reject(...) when it failed.\n  // In this example, we use setTimeout(...) to simulate async code.\n  // In reality, you will probably be using something like XHR or an HTML5 API.\n  setTimeout(function () {\n    resolve(\"Success!\"); // Yay! Everything went well!\n  }, 250);\n});\n\nmyFirstPromise.then((successMessage) =&gt; {\n  // successMessage is whatever we passed in the resolve(...) function above.\n  // It doesn't have to be a string, but if it is only a succeed message, it probably will be.\n  console.log(\"Yay! \" + successMessage);\n});</code></pre>\n<h2>see also</h2><ul><li><a href=\"promes.md\">promes</a></li><li><a href=\"promes2.md\">promes2</a></li><li><a href=\"async.md\">async</a></li><li><a href=\"await.md\">await</a></li></ul>\n<h4>References</h4><ul><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></li></ul>"},"label":"js","filename":"promes2","question":"Promise","answer":"The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.\n\nA Promise is a proxy for a value not necessarily known when the promise is created. It allows you to associate handlers with an asynchronous action's eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of immediately returning the final value, the asynchronous method returns a promise to supply the value at some point in the future.\n![](../../img/promises.png)\n\n```js\nconst myPromise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(\"foo\");\n  }, 300);\n});\n\nmyPromise\n  .then(handleResolvedA, handleRejectedA)\n  .then(handleResolvedB, handleRejectedB)\n  .then(handleResolvedC, handleRejectedC);\n```\n\n```js\nmyPromise\n  .then(handleResolvedA)\n  .then(handleResolvedB)\n  .then(handleResolvedC)\n  .catch(handleRejectedAny);\n```\n\n```js\npromise1\n  .then((value) => {\n    return value + \" and bar\";\n  })\n  .then((value) => {\n    return value + \" and bar again\";\n  })\n  .then((value) => {\n    return value + \" and again\";\n  })\n  .then((value) => {\n    return value + \" and again\";\n  })\n  .then((value) => {\n    console.log(value);\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n```\n\n## basic example\n\n```js\nlet myFirstPromise = new Promise((resolve, reject) => {\n  // We call resolve(...) when what we were doing asynchronously was successful, and reject(...) when it failed.\n  // In this example, we use setTimeout(...) to simulate async code.\n  // In reality, you will probably be using something like XHR or an HTML5 API.\n  setTimeout(function () {\n    resolve(\"Success!\"); // Yay! Everything went well!\n  }, 250);\n});\n\nmyFirstPromise.then((successMessage) => {\n  // successMessage is whatever we passed in the resolve(...) function above.\n  // It doesn't have to be a string, but if it is only a succeed message, it probably will be.\n  console.log(\"Yay! \" + successMessage);\n});\n```\n\n## see also\n\n- [promes](promes.md)\n- [promes2](promes2.md)\n- [async](async.md)\n- [await](await.md)\n\n#### References\n\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},{"markdown":{"question":"jagged array","answer":"> A ragged array, also known as a jagged array, is an array of arrays of which the member arrays can be of different sizes and producing rows of jagged edges when visualized as output. — Wikipedia\n\n**Introduction to JavaScript multidimensional array**\n\n```js\nvar measurements = [\n  [22, 10],\n  [10, 13, 15, 14],\n  [5, 27, 33],\n];\nvar total = 0;\nvar average = 0.0;\nfor (var row = 0; row < measurements.length; row++) {\n  for (var col = 0; col < measurements[row].length; col++) {\n    total += measurements[row][col];\n  }\n  average = total / measurements[row].length;\n  console.log(`Student ${parseInt(row + 1)} average is  ${average.toFixed(2)}`);\n  total = 0;\n  average = 0.0;\n}\n```\n\n#### References\n\n- https://dev.to/osejudith/jagged-array-in-javascript-18og\n- https://www.javascripttutorial.net/javascript-multidimensional-array/"},"original":{"markdown":"## jagged array\n\n> A ragged array, also known as a jagged array, is an array of arrays of which the member arrays can be of different sizes and producing rows of jagged edges when visualized as output. — Wikipedia\n\n**Introduction to JavaScript multidimensional array**\n\n```js\nvar measurements = [\n  [22, 10],\n  [10, 13, 15, 14],\n  [5, 27, 33],\n];\nvar total = 0;\nvar average = 0.0;\nfor (var row = 0; row < measurements.length; row++) {\n  for (var col = 0; col < measurements[row].length; col++) {\n    total += measurements[row][col];\n  }\n  average = total / measurements[row].length;\n  console.log(`Student ${parseInt(row + 1)} average is  ${average.toFixed(2)}`);\n  total = 0;\n  average = 0.0;\n}\n```\n\n#### References\n\n- https://dev.to/osejudith/jagged-array-in-javascript-18og\n- https://www.javascripttutorial.net/javascript-multidimensional-array/\n","html":"<h2>jagged array</h2>\n<blockquote>\n<p>A ragged array, also known as a jagged array, is an array of arrays of which the member arrays can be of different sizes and producing rows of jagged edges when visualized as output. — Wikipedia</p></blockquote>\n<p><strong>Introduction to JavaScript multidimensional array</strong></p>\n<pre><code class=\"prettyprint js\">var measurements = [\n  [22, 10],\n  [10, 13, 15, 14],\n  [5, 27, 33],\n];\nvar total = 0;\nvar average = 0.0;\nfor (var row = 0; row &lt; measurements.length; row++) {\n  for (var col = 0; col &lt; measurements[row].length; col++) {\n    total += measurements[row][col];\n  }\n  average = total / measurements[row].length;\n  console.log(`Student ${parseInt(row + 1)} average is  ${average.toFixed(2)}`);\n  total = 0;\n  average = 0.0;\n}</code></pre>\n<h4>References</h4><ul><li><a href=\"https://dev.to/osejudith/jagged-array-in-javascript-18og\">https://dev.to/osejudith/jagged-array-in-javascript-18og</a></li><li><a href=\"https://www.javascripttutorial.net/javascript-multidimensional-array\">https://www.javascripttutorial.net/javascript-multidimensional-array</a>/</li></ul>"},"_id":"jagged-array","html":{"question":"<p>jagged array</p>","answer":"<blockquote>\n<p>A ragged array, also known as a jagged array, is an array of arrays of which the member arrays can be of different sizes and producing rows of jagged edges when visualized as output. — Wikipedia</p></blockquote>\n<p><strong>Introduction to JavaScript multidimensional array</strong></p>\n<pre><code class=\"prettyprint js\">var measurements = [\n  [22, 10],\n  [10, 13, 15, 14],\n  [5, 27, 33],\n];\nvar total = 0;\nvar average = 0.0;\nfor (var row = 0; row &lt; measurements.length; row++) {\n  for (var col = 0; col &lt; measurements[row].length; col++) {\n    total += measurements[row][col];\n  }\n  average = total / measurements[row].length;\n  console.log(`Student ${parseInt(row + 1)} average is  ${average.toFixed(2)}`);\n  total = 0;\n  average = 0.0;\n}</code></pre>\n<h4>References</h4><ul><li><a href=\"https://dev.to/osejudith/jagged-array-in-javascript-18og\">https://dev.to/osejudith/jagged-array-in-javascript-18og</a></li><li><a href=\"https://www.javascripttutorial.net/javascript-multidimensional-array\">https://www.javascripttutorial.net/javascript-multidimensional-array</a>/</li></ul>"},"label":"js","filename":"jagged_array","question":"jagged array","answer":"> A ragged array, also known as a jagged array, is an array of arrays of which the member arrays can be of different sizes and producing rows of jagged edges when visualized as output. — Wikipedia\n\n**Introduction to JavaScript multidimensional array**\n\n```js\nvar measurements = [\n  [22, 10],\n  [10, 13, 15, 14],\n  [5, 27, 33],\n];\nvar total = 0;\nvar average = 0.0;\nfor (var row = 0; row < measurements.length; row++) {\n  for (var col = 0; col < measurements[row].length; col++) {\n    total += measurements[row][col];\n  }\n  average = total / measurements[row].length;\n  console.log(`Student ${parseInt(row + 1)} average is  ${average.toFixed(2)}`);\n  total = 0;\n  average = 0.0;\n}\n```\n\n#### References\n\n- https://dev.to/osejudith/jagged-array-in-javascript-18og\n- https://www.javascripttutorial.net/javascript-multidimensional-array/"},{"markdown":{"question":"Fetch API","answer":"The Fetch API provides an interface for fetching resources (including across the network). It will seem familiar to anyone who has used XMLHttpRequest, but the new API provides a more powerful and flexible feature set.\n\n#### References\n\n- https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"},"original":{"markdown":"## Fetch API\n\nThe Fetch API provides an interface for fetching resources (including across the network). It will seem familiar to anyone who has used XMLHttpRequest, but the new API provides a more powerful and flexible feature set.\n\n#### References\n\n- https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n","html":"<h2>Fetch API</h2>\n<p>The Fetch API provides an interface for fetching resources (including across the network). It will seem familiar to anyone who has used XMLHttpRequest, but the new API provides a more powerful and flexible feature set.</p>\n<h4>References</h4><ul><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API</a></li></ul>"},"_id":"Fetch-API","html":{"question":"<p>Fetch API</p>","answer":"<p>The Fetch API provides an interface for fetching resources (including across the network). It will seem familiar to anyone who has used XMLHttpRequest, but the new API provides a more powerful and flexible feature set.</p>\n<h4>References</h4><ul><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API</a></li></ul>"},"label":"js","filename":"fetch","question":"Fetch API","answer":"The Fetch API provides an interface for fetching resources (including across the network). It will seem familiar to anyone who has used XMLHttpRequest, but the new API provides a more powerful and flexible feature set.\n\n#### References\n\n- https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"},{"markdown":{"question":"What are the differences between variables created using 'let', 'var' or 'const'?","answer":"Variables declared using the `var` keyword are scoped to the function in which they are created, or if created outside of any function, to the global object. `let` and `const` are _block scoped_, meaning they are only accessible within the nearest set of curly braces (function, if-else block, or for-loop).\n\n```js\nfunction foo() {\n  // All variables are accessible within functions.\n  var bar = \"bar\";\n  let baz = \"baz\";\n  const qux = \"qux\";\n\n  console.log(bar); // bar\n  console.log(baz); // baz\n  console.log(qux); // qux\n}\n\nconsole.log(bar); // ReferenceError: bar is not defined\nconsole.log(baz); // ReferenceError: baz is not defined\nconsole.log(qux); // ReferenceError: qux is not defined\n```\n\n```js\nif (true) {\n  var bar = \"bar\";\n  let baz = \"baz\";\n  const qux = \"qux\";\n}\n\n// var declared variables are accessible anywhere in the function scope.\nconsole.log(bar); // bar\n// let and const defined variables are not accessible outside of the block they were defined in.\nconsole.log(baz); // ReferenceError: baz is not defined\nconsole.log(qux); // ReferenceError: qux is not defined\n```\n\n`var` allows variables to be hoisted, meaning they can be referenced in code before they are declared. `let` and `const` will not allow this, instead throwing an error.\n\n```js\nconsole.log(foo); // undefined\n\nvar foo = \"foo\";\n\nconsole.log(baz); // ReferenceError: can't access lexical declaration 'baz' before initialization\n\nlet baz = \"baz\";\n\nconsole.log(bar); // ReferenceError: can't access lexical declaration 'bar' before initialization\n\nconst bar = \"bar\";\n```\n\nRedeclaring a variable with `var` will not throw an error, but `let` and `const` will.\n\n```js\nvar foo = \"foo\";\nvar foo = \"bar\";\nconsole.log(foo); // \"bar\"\n\nlet baz = \"baz\";\nlet baz = \"qux\"; // Uncaught SyntaxError: Identifier 'baz' has already been declared\n```\n\n`let` and `const` differ in that `let` allows reassigning the variable's value while `const` does not.\n\n```js\n// This is fine.\nlet foo = \"foo\";\nfoo = \"bar\";\n\n// This causes an exception.\nconst baz = \"baz\";\nbaz = \"qux\";\n```\n\n#### References\n\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const"},"original":{"markdown":"## What are the differences between variables created using `let`, `var` or `const`?\n\nVariables declared using the `var` keyword are scoped to the function in which they are created, or if created outside of any function, to the global object. `let` and `const` are _block scoped_, meaning they are only accessible within the nearest set of curly braces (function, if-else block, or for-loop).\n\n```js\nfunction foo() {\n  // All variables are accessible within functions.\n  var bar = \"bar\";\n  let baz = \"baz\";\n  const qux = \"qux\";\n\n  console.log(bar); // bar\n  console.log(baz); // baz\n  console.log(qux); // qux\n}\n\nconsole.log(bar); // ReferenceError: bar is not defined\nconsole.log(baz); // ReferenceError: baz is not defined\nconsole.log(qux); // ReferenceError: qux is not defined\n```\n\n```js\nif (true) {\n  var bar = \"bar\";\n  let baz = \"baz\";\n  const qux = \"qux\";\n}\n\n// var declared variables are accessible anywhere in the function scope.\nconsole.log(bar); // bar\n// let and const defined variables are not accessible outside of the block they were defined in.\nconsole.log(baz); // ReferenceError: baz is not defined\nconsole.log(qux); // ReferenceError: qux is not defined\n```\n\n`var` allows variables to be hoisted, meaning they can be referenced in code before they are declared. `let` and `const` will not allow this, instead throwing an error.\n\n```js\nconsole.log(foo); // undefined\n\nvar foo = \"foo\";\n\nconsole.log(baz); // ReferenceError: can't access lexical declaration 'baz' before initialization\n\nlet baz = \"baz\";\n\nconsole.log(bar); // ReferenceError: can't access lexical declaration 'bar' before initialization\n\nconst bar = \"bar\";\n```\n\nRedeclaring a variable with `var` will not throw an error, but `let` and `const` will.\n\n```js\nvar foo = \"foo\";\nvar foo = \"bar\";\nconsole.log(foo); // \"bar\"\n\nlet baz = \"baz\";\nlet baz = \"qux\"; // Uncaught SyntaxError: Identifier 'baz' has already been declared\n```\n\n`let` and `const` differ in that `let` allows reassigning the variable's value while `const` does not.\n\n```js\n// This is fine.\nlet foo = \"foo\";\nfoo = \"bar\";\n\n// This causes an exception.\nconst baz = \"baz\";\nbaz = \"qux\";\n```\n\n#### References\n\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\n","html":"<h2>What are the differences between variables created using <code>let</code>, <code>var</code> or <code>const</code>?</h2>\n<p>Variables declared using the <code>var</code> keyword are scoped to the function in which they are created, or if created outside of any function, to the global object. <code>let</code> and <code>const</code> are <em>block scoped</em>, meaning they are only accessible within the nearest set of curly braces (function, if-else block, or for-loop).</p>\n<pre><code class=\"prettyprint js\">function foo() {\n  // All variables are accessible within functions.\n  var bar = \"bar\";\n  let baz = \"baz\";\n  const qux = \"qux\";\n\n  console.log(bar); // bar\n  console.log(baz); // baz\n  console.log(qux); // qux\n}\n\nconsole.log(bar); // ReferenceError: bar is not defined\nconsole.log(baz); // ReferenceError: baz is not defined\nconsole.log(qux); // ReferenceError: qux is not defined</code></pre>\n<pre><code class=\"prettyprint js\">if (true) {\n  var bar = \"bar\";\n  let baz = \"baz\";\n  const qux = \"qux\";\n}\n\n// var declared variables are accessible anywhere in the function scope.\nconsole.log(bar); // bar\n// let and const defined variables are not accessible outside of the block they were defined in.\nconsole.log(baz); // ReferenceError: baz is not defined\nconsole.log(qux); // ReferenceError: qux is not defined</code></pre>\n<p><code>var</code> allows variables to be hoisted, meaning they can be referenced in code before they are declared. <code>let</code> and <code>const</code> will not allow this, instead throwing an error.</p>\n<pre><code class=\"prettyprint js\">console.log(foo); // undefined\n\nvar foo = \"foo\";\n\nconsole.log(baz); // ReferenceError: can't access lexical declaration 'baz' before initialization\n\nlet baz = \"baz\";\n\nconsole.log(bar); // ReferenceError: can't access lexical declaration 'bar' before initialization\n\nconst bar = \"bar\";</code></pre>\n<p>Redeclaring a variable with <code>var</code> will not throw an error, but <code>let</code> and <code>const</code> will.</p>\n<pre><code class=\"prettyprint js\">var foo = \"foo\";\nvar foo = \"bar\";\nconsole.log(foo); // \"bar\"\n\nlet baz = \"baz\";\nlet baz = \"qux\"; // Uncaught SyntaxError: Identifier 'baz' has already been declared</code></pre>\n<p><code>let</code> and <code>const</code> differ in that <code>let</code> allows reassigning the variable's value while <code>const</code> does not.</p>\n<pre><code class=\"prettyprint js\">// This is fine.\nlet foo = \"foo\";\nfoo = \"bar\";\n\n// This causes an exception.\nconst baz = \"baz\";\nbaz = \"qux\";</code></pre>\n<h4>References</h4><ul><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let</a></li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var</a></li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const</a></li></ul>"},"_id":"What-are-the-differences-between-variables-created-using-'let',-'var'-or-'const'","html":{"question":"<p>What are the differences between variables created using 'let', 'var' or 'const'?</p>","answer":"<p>Variables declared using the <code>var</code> keyword are scoped to the function in which they are created, or if created outside of any function, to the global object. <code>let</code> and <code>const</code> are <em>block scoped</em>, meaning they are only accessible within the nearest set of curly braces (function, if-else block, or for-loop).</p>\n<pre><code class=\"prettyprint js\">function foo() {\n  // All variables are accessible within functions.\n  var bar = \"bar\";\n  let baz = \"baz\";\n  const qux = \"qux\";\n\n  console.log(bar); // bar\n  console.log(baz); // baz\n  console.log(qux); // qux\n}\n\nconsole.log(bar); // ReferenceError: bar is not defined\nconsole.log(baz); // ReferenceError: baz is not defined\nconsole.log(qux); // ReferenceError: qux is not defined</code></pre>\n<pre><code class=\"prettyprint js\">if (true) {\n  var bar = \"bar\";\n  let baz = \"baz\";\n  const qux = \"qux\";\n}\n\n// var declared variables are accessible anywhere in the function scope.\nconsole.log(bar); // bar\n// let and const defined variables are not accessible outside of the block they were defined in.\nconsole.log(baz); // ReferenceError: baz is not defined\nconsole.log(qux); // ReferenceError: qux is not defined</code></pre>\n<p><code>var</code> allows variables to be hoisted, meaning they can be referenced in code before they are declared. <code>let</code> and <code>const</code> will not allow this, instead throwing an error.</p>\n<pre><code class=\"prettyprint js\">console.log(foo); // undefined\n\nvar foo = \"foo\";\n\nconsole.log(baz); // ReferenceError: can't access lexical declaration 'baz' before initialization\n\nlet baz = \"baz\";\n\nconsole.log(bar); // ReferenceError: can't access lexical declaration 'bar' before initialization\n\nconst bar = \"bar\";</code></pre>\n<p>Redeclaring a variable with <code>var</code> will not throw an error, but <code>let</code> and <code>const</code> will.</p>\n<pre><code class=\"prettyprint js\">var foo = \"foo\";\nvar foo = \"bar\";\nconsole.log(foo); // \"bar\"\n\nlet baz = \"baz\";\nlet baz = \"qux\"; // Uncaught SyntaxError: Identifier 'baz' has already been declared</code></pre>\n<p><code>let</code> and <code>const</code> differ in that <code>let</code> allows reassigning the variable's value while <code>const</code> does not.</p>\n<pre><code class=\"prettyprint js\">// This is fine.\nlet foo = \"foo\";\nfoo = \"bar\";\n\n// This causes an exception.\nconst baz = \"baz\";\nbaz = \"qux\";</code></pre>\n<h4>References</h4><ul><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let</a></li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var</a></li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const</a></li></ul>"},"label":"js","filename":"var_let_const","question":"What are the differences between variables created using 'let', 'var' or 'const'?","answer":"Variables declared using the `var` keyword are scoped to the function in which they are created, or if created outside of any function, to the global object. `let` and `const` are _block scoped_, meaning they are only accessible within the nearest set of curly braces (function, if-else block, or for-loop).\n\n```js\nfunction foo() {\n  // All variables are accessible within functions.\n  var bar = \"bar\";\n  let baz = \"baz\";\n  const qux = \"qux\";\n\n  console.log(bar); // bar\n  console.log(baz); // baz\n  console.log(qux); // qux\n}\n\nconsole.log(bar); // ReferenceError: bar is not defined\nconsole.log(baz); // ReferenceError: baz is not defined\nconsole.log(qux); // ReferenceError: qux is not defined\n```\n\n```js\nif (true) {\n  var bar = \"bar\";\n  let baz = \"baz\";\n  const qux = \"qux\";\n}\n\n// var declared variables are accessible anywhere in the function scope.\nconsole.log(bar); // bar\n// let and const defined variables are not accessible outside of the block they were defined in.\nconsole.log(baz); // ReferenceError: baz is not defined\nconsole.log(qux); // ReferenceError: qux is not defined\n```\n\n`var` allows variables to be hoisted, meaning they can be referenced in code before they are declared. `let` and `const` will not allow this, instead throwing an error.\n\n```js\nconsole.log(foo); // undefined\n\nvar foo = \"foo\";\n\nconsole.log(baz); // ReferenceError: can't access lexical declaration 'baz' before initialization\n\nlet baz = \"baz\";\n\nconsole.log(bar); // ReferenceError: can't access lexical declaration 'bar' before initialization\n\nconst bar = \"bar\";\n```\n\nRedeclaring a variable with `var` will not throw an error, but `let` and `const` will.\n\n```js\nvar foo = \"foo\";\nvar foo = \"bar\";\nconsole.log(foo); // \"bar\"\n\nlet baz = \"baz\";\nlet baz = \"qux\"; // Uncaught SyntaxError: Identifier 'baz' has already been declared\n```\n\n`let` and `const` differ in that `let` allows reassigning the variable's value while `const` does not.\n\n```js\n// This is fine.\nlet foo = \"foo\";\nfoo = \"bar\";\n\n// This causes an exception.\nconst baz = \"baz\";\nbaz = \"qux\";\n```\n\n#### References\n\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const"},{"markdown":{"question":"timer","answer":"check out [even loop](event_loop.md) why this is\n\n```js\n(function () {\n  console.log(\"this is the start\");\n\n  setTimeout(function cb() {\n    console.log(\"Callback 1: this is a msg from call back\");\n  }); // has a default time value of 0\n\n  console.log(\"this is just a message\");\n\n  setTimeout(function cb1() {\n    console.log(\"Callback 2: this is a msg from call back\");\n  }, 0);\n\n  console.log(\"this is the end\");\n})();\n\n// \"this is the start\"\n// \"this is just a message\"\n// \"this is the end\"\n// \"Callback 1: this is a msg from call back\"\n// \"Callback 2: this is a msg from call back\"\n```\n\n#### References"},"original":{"markdown":"## timer\n\ncheck out [even loop](event_loop.md) why this is\n\n```js\n(function () {\n  console.log(\"this is the start\");\n\n  setTimeout(function cb() {\n    console.log(\"Callback 1: this is a msg from call back\");\n  }); // has a default time value of 0\n\n  console.log(\"this is just a message\");\n\n  setTimeout(function cb1() {\n    console.log(\"Callback 2: this is a msg from call back\");\n  }, 0);\n\n  console.log(\"this is the end\");\n})();\n\n// \"this is the start\"\n// \"this is just a message\"\n// \"this is the end\"\n// \"Callback 1: this is a msg from call back\"\n// \"Callback 2: this is a msg from call back\"\n```\n\n#### References\n","html":"<h2>timer</h2>\n<p>check out <a href=\"event_loop.md\">even loop</a> why this is</p>\n<pre><code class=\"prettyprint js\">(function () {\n  console.log(\"this is the start\");\n\n  setTimeout(function cb() {\n    console.log(\"Callback 1: this is a msg from call back\");\n  }); // has a default time value of 0\n\n  console.log(\"this is just a message\");\n\n  setTimeout(function cb1() {\n    console.log(\"Callback 2: this is a msg from call back\");\n  }, 0);\n\n  console.log(\"this is the end\");\n})();\n\n// \"this is the start\"\n// \"this is just a message\"\n// \"this is the end\"\n// \"Callback 1: this is a msg from call back\"\n// \"Callback 2: this is a msg from call back\"</code></pre>\n<h4>References</h4>"},"_id":"timer","html":{"question":"<p>timer</p>","answer":"<p>check out <a href=\"event_loop.md\">even loop</a> why this is</p>\n<pre><code class=\"prettyprint js\">(function () {\n  console.log(\"this is the start\");\n\n  setTimeout(function cb() {\n    console.log(\"Callback 1: this is a msg from call back\");\n  }); // has a default time value of 0\n\n  console.log(\"this is just a message\");\n\n  setTimeout(function cb1() {\n    console.log(\"Callback 2: this is a msg from call back\");\n  }, 0);\n\n  console.log(\"this is the end\");\n})();\n\n// \"this is the start\"\n// \"this is just a message\"\n// \"this is the end\"\n// \"Callback 1: this is a msg from call back\"\n// \"Callback 2: this is a msg from call back\"</code></pre>\n<h4>References</h4>"},"label":"js","filename":"timer","question":"timer","answer":"check out [even loop](event_loop.md) why this is\n\n```js\n(function () {\n  console.log(\"this is the start\");\n\n  setTimeout(function cb() {\n    console.log(\"Callback 1: this is a msg from call back\");\n  }); // has a default time value of 0\n\n  console.log(\"this is just a message\");\n\n  setTimeout(function cb1() {\n    console.log(\"Callback 2: this is a msg from call back\");\n  }, 0);\n\n  console.log(\"this is the end\");\n})();\n\n// \"this is the start\"\n// \"this is just a message\"\n// \"this is the end\"\n// \"Callback 1: this is a msg from call back\"\n// \"Callback 2: this is a msg from call back\"\n```\n\n#### References"},{"markdown":{"question":"Export and Import","answer":"The export statement is used when creating JavaScript modules to export objects, functions, variables from the module so they can be used by other programs with the help of the import statements.\nThere are two types of exports. One is Named Exports and other is Default Exports.\n\n### Named Exports\n\nNamed exports are useful to export several values. During the import, it is mandatory to use the same name of the corresponding object.\n\n```js\n// file math.js\nfunction square(x) { return x * x; }\nfunction cube(x) { return x * x; }\nexport { square, cube };\n\n\n// while importing square function in test.js\nimport { square, cube } from './math;\nconsole.log(square(8)) //64\nconsole.log(cube(8)) //512\n```\n\n### Default Exports\n\nDefault exports are useful to export only a single object, function, variable. During the import, we can use any name to import.\n\n```js\n// file module.js\nvar x = 4;\nexport default x;\n\n// test.js\n// while importing x in test.js\nimport y from \"./module\";\n// note that y is used import x instead of\n// import x, because x was default export\nconsole.log(y);\n// output will be 4\n```\n\n```js\n// file math.js\nexport default function square(x) { return x * x; }\n\n//while importing square function in test.js\nimport square from './math;\nconsole.log(square(8)) //64\n```\n\n#### References\n\n- https://www.geeksforgeeks.org/what-is-export-default-in-javascript/\n- https://javascript.info/import-export"},"original":{"markdown":"## Export and Import\n\nThe export statement is used when creating JavaScript modules to export objects, functions, variables from the module so they can be used by other programs with the help of the import statements.\nThere are two types of exports. One is Named Exports and other is Default Exports.\n\n### Named Exports\n\nNamed exports are useful to export several values. During the import, it is mandatory to use the same name of the corresponding object.\n\n```js\n// file math.js\nfunction square(x) { return x * x; }\nfunction cube(x) { return x * x; }\nexport { square, cube };\n\n\n// while importing square function in test.js\nimport { square, cube } from './math;\nconsole.log(square(8)) //64\nconsole.log(cube(8)) //512\n```\n\n### Default Exports\n\nDefault exports are useful to export only a single object, function, variable. During the import, we can use any name to import.\n\n```js\n// file module.js\nvar x = 4;\nexport default x;\n\n// test.js\n// while importing x in test.js\nimport y from \"./module\";\n// note that y is used import x instead of\n// import x, because x was default export\nconsole.log(y);\n// output will be 4\n```\n\n```js\n// file math.js\nexport default function square(x) { return x * x; }\n\n//while importing square function in test.js\nimport square from './math;\nconsole.log(square(8)) //64\n```\n\n#### References\n\n- https://www.geeksforgeeks.org/what-is-export-default-in-javascript/\n- https://javascript.info/import-export\n","html":"<h2>Export and Import</h2>\n<p>The export statement is used when creating JavaScript modules to export objects, functions, variables from the module so they can be used by other programs with the help of the import statements.\nThere are two types of exports. One is Named Exports and other is Default Exports.</p>\n<h3>Named Exports</h3>\n<p>Named exports are useful to export several values. During the import, it is mandatory to use the same name of the corresponding object.</p>\n<pre><code class=\"prettyprint js\">// file math.js\nfunction square(x) { return x * x; }\nfunction cube(x) { return x * x; }\nexport { square, cube };\n\n\n// while importing square function in test.js\nimport { square, cube } from './math;\nconsole.log(square(8)) //64\nconsole.log(cube(8)) //512</code></pre>\n<h3>Default Exports</h3>\n<p>Default exports are useful to export only a single object, function, variable. During the import, we can use any name to import.</p>\n<pre><code class=\"prettyprint js\">// file module.js\nvar x = 4;\nexport default x;\n\n// test.js\n// while importing x in test.js\nimport y from \"./module\";\n// note that y is used import x instead of\n// import x, because x was default export\nconsole.log(y);\n// output will be 4</code></pre>\n<pre><code class=\"prettyprint js\">// file math.js\nexport default function square(x) { return x * x; }\n\n//while importing square function in test.js\nimport square from './math;\nconsole.log(square(8)) //64</code></pre>\n<h4>References</h4><ul><li><a href=\"https://www.geeksforgeeks.org/what-is-export-default-in-javascript\">https://www.geeksforgeeks.org/what-is-export-default-in-javascript</a>/</li><li><a href=\"https://javascript.info/import-export\">https://javascript.info/import-export</a></li></ul>"},"_id":"Export-and-Import","html":{"question":"<p>Export and Import</p>","answer":"<p>The export statement is used when creating JavaScript modules to export objects, functions, variables from the module so they can be used by other programs with the help of the import statements.\nThere are two types of exports. One is Named Exports and other is Default Exports.</p>\n<h3>Named Exports</h3>\n<p>Named exports are useful to export several values. During the import, it is mandatory to use the same name of the corresponding object.</p>\n<pre><code class=\"prettyprint js\">// file math.js\nfunction square(x) { return x * x; }\nfunction cube(x) { return x * x; }\nexport { square, cube };\n\n\n// while importing square function in test.js\nimport { square, cube } from './math;\nconsole.log(square(8)) //64\nconsole.log(cube(8)) //512</code></pre>\n<h3>Default Exports</h3>\n<p>Default exports are useful to export only a single object, function, variable. During the import, we can use any name to import.</p>\n<pre><code class=\"prettyprint js\">// file module.js\nvar x = 4;\nexport default x;\n\n// test.js\n// while importing x in test.js\nimport y from \"./module\";\n// note that y is used import x instead of\n// import x, because x was default export\nconsole.log(y);\n// output will be 4</code></pre>\n<pre><code class=\"prettyprint js\">// file math.js\nexport default function square(x) { return x * x; }\n\n//while importing square function in test.js\nimport square from './math;\nconsole.log(square(8)) //64</code></pre>\n<h4>References</h4><ul><li><a href=\"https://www.geeksforgeeks.org/what-is-export-default-in-javascript\">https://www.geeksforgeeks.org/what-is-export-default-in-javascript</a>/</li><li><a href=\"https://javascript.info/import-export\">https://javascript.info/import-export</a></li></ul>"},"label":"js","filename":"export-import","question":"Export and Import","answer":"The export statement is used when creating JavaScript modules to export objects, functions, variables from the module so they can be used by other programs with the help of the import statements.\nThere are two types of exports. One is Named Exports and other is Default Exports.\n\n### Named Exports\n\nNamed exports are useful to export several values. During the import, it is mandatory to use the same name of the corresponding object.\n\n```js\n// file math.js\nfunction square(x) { return x * x; }\nfunction cube(x) { return x * x; }\nexport { square, cube };\n\n\n// while importing square function in test.js\nimport { square, cube } from './math;\nconsole.log(square(8)) //64\nconsole.log(cube(8)) //512\n```\n\n### Default Exports\n\nDefault exports are useful to export only a single object, function, variable. During the import, we can use any name to import.\n\n```js\n// file module.js\nvar x = 4;\nexport default x;\n\n// test.js\n// while importing x in test.js\nimport y from \"./module\";\n// note that y is used import x instead of\n// import x, because x was default export\nconsole.log(y);\n// output will be 4\n```\n\n```js\n// file math.js\nexport default function square(x) { return x * x; }\n\n//while importing square function in test.js\nimport square from './math;\nconsole.log(square(8)) //64\n```\n\n#### References\n\n- https://www.geeksforgeeks.org/what-is-export-default-in-javascript/\n- https://javascript.info/import-export"},{"markdown":{"question":"Can you describe the main difference between a '.forEach' loop and a '.map()' loop and why you would pick one versus the other?","answer":"To understand the differences between the two, let's look at what each function does.\n\n**`forEach`**\n\n- Iterates through the elements in an array.\n- Executes a callback for each element.\n- Does not return a value.\n\n```js\nconst a = [1, 2, 3];\nconst doubled = a.forEach((num, index) => {\n  // Do something with num and/or index.\n});\n\n// doubled = undefined\n```\n\n**`map`**\n\n- Iterates through the elements in an array.\n- \"Maps\" each element to a new element by calling the function on each element, creating a new array as a result.\n\n```js\nconst a = [1, 2, 3];\nconst doubled = a.map((num) => {\n  return num * 2;\n});\n\n// doubled = [2, 4, 6]\n```\n\nThe main difference between `.forEach` and `.map()` is that `.map()` returns a new array. If you need the result, but do not wish to mutate the original array, `.map()` is the clear choice. If you simply need to iterate over an array, `forEach` is a fine choice.\n\n#### References\n\n- https://codeburst.io/javascript-map-vs-foreach-f38111822c0f"},"original":{"markdown":"## Can you describe the main difference between a `.forEach` loop and a `.map()` loop and why you would pick one versus the other?\n\nTo understand the differences between the two, let's look at what each function does.\n\n**`forEach`**\n\n- Iterates through the elements in an array.\n- Executes a callback for each element.\n- Does not return a value.\n\n```js\nconst a = [1, 2, 3];\nconst doubled = a.forEach((num, index) => {\n  // Do something with num and/or index.\n});\n\n// doubled = undefined\n```\n\n**`map`**\n\n- Iterates through the elements in an array.\n- \"Maps\" each element to a new element by calling the function on each element, creating a new array as a result.\n\n```js\nconst a = [1, 2, 3];\nconst doubled = a.map((num) => {\n  return num * 2;\n});\n\n// doubled = [2, 4, 6]\n```\n\nThe main difference between `.forEach` and `.map()` is that `.map()` returns a new array. If you need the result, but do not wish to mutate the original array, `.map()` is the clear choice. If you simply need to iterate over an array, `forEach` is a fine choice.\n\n#### References\n\n- https://codeburst.io/javascript-map-vs-foreach-f38111822c0f\n","html":"<h2>Can you describe the main difference between a <code>.forEach</code> loop and a <code>.map()</code> loop and why you would pick one versus the other?</h2>\n<p>To understand the differences between the two, let's look at what each function does.</p>\n<p><strong><code>forEach</code></strong></p><ul><li>Iterates through the elements in an array.</li><li>Executes a callback for each element.</li><li>Does not return a value.</li></ul>\n<pre><code class=\"prettyprint js\">const a = [1, 2, 3];\nconst doubled = a.forEach((num, index) =&gt; {\n  // Do something with num and/or index.\n});\n\n// doubled = undefined</code></pre>\n<p><strong><code>map</code></strong></p><ul><li>Iterates through the elements in an array.</li><li>\"Maps\" each element to a new element by calling the function on each element, creating a new array as a result.</li></ul>\n<pre><code class=\"prettyprint js\">const a = [1, 2, 3];\nconst doubled = a.map((num) =&gt; {\n  return num * 2;\n});\n\n// doubled = [2, 4, 6]</code></pre>\n<p>The main difference between <code>.forEach</code> and <code>.map()</code> is that <code>.map()</code> returns a new array. If you need the result, but do not wish to mutate the original array, <code>.map()</code> is the clear choice. If you simply need to iterate over an array, <code>forEach</code> is a fine choice.</p>\n<h4>References</h4><ul><li><a href=\"https://codeburst.io/javascript-map-vs-foreach-f38111822c0f\">https://codeburst.io/javascript-map-vs-foreach-f38111822c0f</a></li></ul>"},"_id":"Can-you-describe-the-main-difference-between-a-'forEach'-loop-and-a-'map()'-loop-and-why-you-would-pick-one-versus-the-other","html":{"question":"<p>Can you describe the main difference between a '.forEach' loop and a '.map()' loop and why you would pick one versus the other?</p>","answer":"<p>To understand the differences between the two, let's look at what each function does.</p>\n<p><strong><code>forEach</code></strong></p><ul><li>Iterates through the elements in an array.</li><li>Executes a callback for each element.</li><li>Does not return a value.</li></ul>\n<pre><code class=\"prettyprint js\">const a = [1, 2, 3];\nconst doubled = a.forEach((num, index) =&gt; {\n  // Do something with num and/or index.\n});\n\n// doubled = undefined</code></pre>\n<p><strong><code>map</code></strong></p><ul><li>Iterates through the elements in an array.</li><li>\"Maps\" each element to a new element by calling the function on each element, creating a new array as a result.</li></ul>\n<pre><code class=\"prettyprint js\">const a = [1, 2, 3];\nconst doubled = a.map((num) =&gt; {\n  return num * 2;\n});\n\n// doubled = [2, 4, 6]</code></pre>\n<p>The main difference between <code>.forEach</code> and <code>.map()</code> is that <code>.map()</code> returns a new array. If you need the result, but do not wish to mutate the original array, <code>.map()</code> is the clear choice. If you simply need to iterate over an array, <code>forEach</code> is a fine choice.</p>\n<h4>References</h4><ul><li><a href=\"https://codeburst.io/javascript-map-vs-foreach-f38111822c0f\">https://codeburst.io/javascript-map-vs-foreach-f38111822c0f</a></li></ul>"},"label":"js","filename":"map_foreach","question":"Can you describe the main difference between a '.forEach' loop and a '.map()' loop and why you would pick one versus the other?","answer":"To understand the differences between the two, let's look at what each function does.\n\n**`forEach`**\n\n- Iterates through the elements in an array.\n- Executes a callback for each element.\n- Does not return a value.\n\n```js\nconst a = [1, 2, 3];\nconst doubled = a.forEach((num, index) => {\n  // Do something with num and/or index.\n});\n\n// doubled = undefined\n```\n\n**`map`**\n\n- Iterates through the elements in an array.\n- \"Maps\" each element to a new element by calling the function on each element, creating a new array as a result.\n\n```js\nconst a = [1, 2, 3];\nconst doubled = a.map((num) => {\n  return num * 2;\n});\n\n// doubled = [2, 4, 6]\n```\n\nThe main difference between `.forEach` and `.map()` is that `.map()` returns a new array. If you need the result, but do not wish to mutate the original array, `.map()` is the clear choice. If you simply need to iterate over an array, `forEach` is a fine choice.\n\n#### References\n\n- https://codeburst.io/javascript-map-vs-foreach-f38111822c0f"},{"markdown":{"question":"What is promise.all()?","answer":"`Promise.all` is a promise that takes an array of promises as an input (an iterable), and it gets resolved when all the promises get resolved or any one of them gets rejected.\n\n```javascript\nPromise.all([Promise1, Promise2, Promise3])\n\t.then(result) => {\n\t\tconsole.log(result)\n\t\t})\n\t.catch(error => console.log(`Error in promises ${error}`));\n```\n\n_Note: Remember that the order of the promises(output the result) is maintained as per input order_.\n\n## see also\n\n- [promes](promes.md)\n- [promes2](promes2.md)\n- [async](async.md)\n- [await](await.md)\n\n#### References"},"original":{"markdown":"## What is promise.all()?\n\n`Promise.all` is a promise that takes an array of promises as an input (an iterable), and it gets resolved when all the promises get resolved or any one of them gets rejected.\n\n```javascript\nPromise.all([Promise1, Promise2, Promise3])\n\t.then(result) => {\n\t\tconsole.log(result)\n\t\t})\n\t.catch(error => console.log(`Error in promises ${error}`));\n```\n\n_Note: Remember that the order of the promises(output the result) is maintained as per input order_.\n\n## see also\n\n- [promes](promes.md)\n- [promes2](promes2.md)\n- [async](async.md)\n- [await](await.md)\n\n#### References\n","html":"<h2>What is promise.all()?</h2>\n<p><code>Promise.all</code> is a promise that takes an array of promises as an input (an iterable), and it gets resolved when all the promises get resolved or any one of them gets rejected.</p>\n<pre><code class=\"prettyprint javascript\">Promise.all([Promise1, Promise2, Promise3])\n\t.then(result) =&gt; {\n\t\tconsole.log(result)\n\t\t})\n\t.catch(error =&gt; console.log(`Error in promises ${error}`));</code></pre>\n<p><em>Note: Remember that the order of the promises(output the result) is maintained as per input order</em>.</p>\n<h2>see also</h2><ul><li><a href=\"promes.md\">promes</a></li><li><a href=\"promes2.md\">promes2</a></li><li><a href=\"async.md\">async</a></li><li><a href=\"await.md\">await</a></li></ul>\n<h4>References</h4>"},"_id":"What-is-promiseall()","html":{"question":"<p>What is promise.all()?</p>","answer":"<p><code>Promise.all</code> is a promise that takes an array of promises as an input (an iterable), and it gets resolved when all the promises get resolved or any one of them gets rejected.</p>\n<pre><code class=\"prettyprint javascript\">Promise.all([Promise1, Promise2, Promise3])\n\t.then(result) =&gt; {\n\t\tconsole.log(result)\n\t\t})\n\t.catch(error =&gt; console.log(`Error in promises ${error}`));</code></pre>\n<p><em>Note: Remember that the order of the promises(output the result) is maintained as per input order</em>.</p>\n<h2>see also</h2><ul><li><a href=\"promes.md\">promes</a></li><li><a href=\"promes2.md\">promes2</a></li><li><a href=\"async.md\">async</a></li><li><a href=\"await.md\">await</a></li></ul>\n<h4>References</h4>"},"label":"js","filename":"promise_all","question":"What is promise.all()?","answer":"`Promise.all` is a promise that takes an array of promises as an input (an iterable), and it gets resolved when all the promises get resolved or any one of them gets rejected.\n\n```javascript\nPromise.all([Promise1, Promise2, Promise3])\n\t.then(result) => {\n\t\tconsole.log(result)\n\t\t})\n\t.catch(error => console.log(`Error in promises ${error}`));\n```\n\n_Note: Remember that the order of the promises(output the result) is maintained as per input order_.\n\n## see also\n\n- [promes](promes.md)\n- [promes2](promes2.md)\n- [async](async.md)\n- [await](await.md)\n\n#### References"},{"markdown":{"question":"Explain how 'this' works in JavaScript","answer":"There's no simple explanation for `this`; it is one of the most confusing concepts in JavaScript. A hand-wavey explanation is that the value of `this` depends on how the function is called. I have read many explanations on `this` online, and I found [Arnav Aggrawal](https://medium.com/@arnav_aggarwal)'s explanation to be the clearest. The following rules are applied:\n\n1. If the `new` keyword is used when calling the function, `this` inside the function is a brand new object.\n2. If `apply`, `call`, or `bind` are used to call/create a function, `this` inside the function is the object that is passed in as the argument.\n3. If a function is called as a method, such as `obj.method()` — `this` is the object that the function is a property of.\n4. If a function is invoked as a free function invocation, meaning it was invoked without any of the conditions present above, `this` is the global object. In a browser, it is the `window` object. If in strict mode (`'use strict'`), `this` will be `undefined` instead of the global object.\n5. If multiple of the above rules apply, the rule that is higher wins and will set the `this` value.\n6. If the function is an ES2015 arrow function, it ignores all the rules above and receives the `this` value of its surrounding scope at the time it is created.\n\nFor an in-depth explanation, do check out his [article on Medium](https://codeburst.io/the-simple-rules-to-this-in-javascript-35d97f31bde3).\n\n#### Can you give an example of one of the ways that working with this has changed in ES6?\n\nES6 allows you to use [arrow functions](http://2ality.com/2017/12/alternate-this.html#arrow-functions) which uses the [enclosing lexical scope](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#No_separate_this). This is usually convenient, but does prevent the caller from controlling context via `.call` or `.apply`—the consequences being that a library such as `jQuery` will not properly bind `this` in your event handler functions. Thus, it's important to keep this in mind when refactoring large legacy applications.\n\n#### References\n\n- https://codeburst.io/the-simple-rules-to-this-in-javascript-35d97f31bde3\n- https://stackoverflow.com/a/3127440/1751946"},"original":{"markdown":"## Explain how `this` works in JavaScript\n\nThere's no simple explanation for `this`; it is one of the most confusing concepts in JavaScript. A hand-wavey explanation is that the value of `this` depends on how the function is called. I have read many explanations on `this` online, and I found [Arnav Aggrawal](https://medium.com/@arnav_aggarwal)'s explanation to be the clearest. The following rules are applied:\n\n1. If the `new` keyword is used when calling the function, `this` inside the function is a brand new object.\n2. If `apply`, `call`, or `bind` are used to call/create a function, `this` inside the function is the object that is passed in as the argument.\n3. If a function is called as a method, such as `obj.method()` — `this` is the object that the function is a property of.\n4. If a function is invoked as a free function invocation, meaning it was invoked without any of the conditions present above, `this` is the global object. In a browser, it is the `window` object. If in strict mode (`'use strict'`), `this` will be `undefined` instead of the global object.\n5. If multiple of the above rules apply, the rule that is higher wins and will set the `this` value.\n6. If the function is an ES2015 arrow function, it ignores all the rules above and receives the `this` value of its surrounding scope at the time it is created.\n\nFor an in-depth explanation, do check out his [article on Medium](https://codeburst.io/the-simple-rules-to-this-in-javascript-35d97f31bde3).\n\n#### Can you give an example of one of the ways that working with this has changed in ES6?\n\nES6 allows you to use [arrow functions](http://2ality.com/2017/12/alternate-this.html#arrow-functions) which uses the [enclosing lexical scope](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#No_separate_this). This is usually convenient, but does prevent the caller from controlling context via `.call` or `.apply`—the consequences being that a library such as `jQuery` will not properly bind `this` in your event handler functions. Thus, it's important to keep this in mind when refactoring large legacy applications.\n\n#### References\n\n- https://codeburst.io/the-simple-rules-to-this-in-javascript-35d97f31bde3\n- https://stackoverflow.com/a/3127440/1751946\n","html":"<h2>Explain how <code>this</code> works in JavaScript</h2>\n<p>There's no simple explanation for <code>this</code>; it is one of the most confusing concepts in JavaScript. A hand-wavey explanation is that the value of <code>this</code> depends on how the function is called. I have read many explanations on <code>this</code> online, and I found <a href=\"https://medium.com/@arnav_aggarwal\">Arnav Aggrawal</a>'s explanation to be the clearest. The following rules are applied:</p><ol><li>If the <code>new</code> keyword is used when calling the function, <code>this</code> inside the function is a brand new object.</li><li>If <code>apply</code>, <code>call</code>, or <code>bind</code> are used to call/create a function, <code>this</code> inside the function is the object that is passed in as the argument.</li><li>If a function is called as a method, such as <code>obj.method()</code> — <code>this</code> is the object that the function is a property of.</li><li>If a function is invoked as a free function invocation, meaning it was invoked without any of the conditions present above, <code>this</code> is the global object. In a browser, it is the <code>window</code> object. If in strict mode (<code>'use strict'</code>), <code>this</code> will be <code>undefined</code> instead of the global object.</li><li>If multiple of the above rules apply, the rule that is higher wins and will set the <code>this</code> value.</li><li>If the function is an ES2015 arrow function, it ignores all the rules above and receives the <code>this</code> value of its surrounding scope at the time it is created.</li></ol>\n<p>For an in-depth explanation, do check out his <a href=\"https://codeburst.io/the-simple-rules-to-this-in-javascript-35d97f31bde3\">article on Medium</a>.</p>\n<h4>Can you give an example of one of the ways that working with this has changed in ES6?</h4>\n<p>ES6 allows you to use <a href=\"http://2ality.com/2017/12/alternate-this.html#arrow-functions\">arrow functions</a> which uses the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#No_separate_this\">enclosing lexical scope</a>. This is usually convenient, but does prevent the caller from controlling context via <code>.call</code> or <code>.apply</code>—the consequences being that a library such as <code>jQuery</code> will not properly bind <code>this</code> in your event handler functions. Thus, it's important to keep this in mind when refactoring large legacy applications.</p>\n<h4>References</h4><ul><li><a href=\"https://codeburst.io/the-simple-rules-to-this-in-javascript-35d97f31bde3\">https://codeburst.io/the-simple-rules-to-this-in-javascript-35d97f31bde3</a></li><li><a href=\"https://stackoverflow.com/a/3127440/1751946\">https://stackoverflow.com/a/3127440/1751946</a></li></ul>"},"_id":"Explain-how-'this'-works-in-JavaScript","html":{"question":"<p>Explain how 'this' works in JavaScript</p>","answer":"<p>There's no simple explanation for <code>this</code>; it is one of the most confusing concepts in JavaScript. A hand-wavey explanation is that the value of <code>this</code> depends on how the function is called. I have read many explanations on <code>this</code> online, and I found <a href=\"https://medium.com/@arnav_aggarwal\">Arnav Aggrawal</a>'s explanation to be the clearest. The following rules are applied:</p><ol><li>If the <code>new</code> keyword is used when calling the function, <code>this</code> inside the function is a brand new object.</li><li>If <code>apply</code>, <code>call</code>, or <code>bind</code> are used to call/create a function, <code>this</code> inside the function is the object that is passed in as the argument.</li><li>If a function is called as a method, such as <code>obj.method()</code> — <code>this</code> is the object that the function is a property of.</li><li>If a function is invoked as a free function invocation, meaning it was invoked without any of the conditions present above, <code>this</code> is the global object. In a browser, it is the <code>window</code> object. If in strict mode (<code>'use strict'</code>), <code>this</code> will be <code>undefined</code> instead of the global object.</li><li>If multiple of the above rules apply, the rule that is higher wins and will set the <code>this</code> value.</li><li>If the function is an ES2015 arrow function, it ignores all the rules above and receives the <code>this</code> value of its surrounding scope at the time it is created.</li></ol>\n<p>For an in-depth explanation, do check out his <a href=\"https://codeburst.io/the-simple-rules-to-this-in-javascript-35d97f31bde3\">article on Medium</a>.</p>\n<h4>Can you give an example of one of the ways that working with this has changed in ES6?</h4>\n<p>ES6 allows you to use <a href=\"http://2ality.com/2017/12/alternate-this.html#arrow-functions\">arrow functions</a> which uses the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#No_separate_this\">enclosing lexical scope</a>. This is usually convenient, but does prevent the caller from controlling context via <code>.call</code> or <code>.apply</code>—the consequences being that a library such as <code>jQuery</code> will not properly bind <code>this</code> in your event handler functions. Thus, it's important to keep this in mind when refactoring large legacy applications.</p>\n<h4>References</h4><ul><li><a href=\"https://codeburst.io/the-simple-rules-to-this-in-javascript-35d97f31bde3\">https://codeburst.io/the-simple-rules-to-this-in-javascript-35d97f31bde3</a></li><li><a href=\"https://stackoverflow.com/a/3127440/1751946\">https://stackoverflow.com/a/3127440/1751946</a></li></ul>"},"label":"js","filename":"this","question":"Explain how 'this' works in JavaScript","answer":"There's no simple explanation for `this`; it is one of the most confusing concepts in JavaScript. A hand-wavey explanation is that the value of `this` depends on how the function is called. I have read many explanations on `this` online, and I found [Arnav Aggrawal](https://medium.com/@arnav_aggarwal)'s explanation to be the clearest. The following rules are applied:\n\n1. If the `new` keyword is used when calling the function, `this` inside the function is a brand new object.\n2. If `apply`, `call`, or `bind` are used to call/create a function, `this` inside the function is the object that is passed in as the argument.\n3. If a function is called as a method, such as `obj.method()` — `this` is the object that the function is a property of.\n4. If a function is invoked as a free function invocation, meaning it was invoked without any of the conditions present above, `this` is the global object. In a browser, it is the `window` object. If in strict mode (`'use strict'`), `this` will be `undefined` instead of the global object.\n5. If multiple of the above rules apply, the rule that is higher wins and will set the `this` value.\n6. If the function is an ES2015 arrow function, it ignores all the rules above and receives the `this` value of its surrounding scope at the time it is created.\n\nFor an in-depth explanation, do check out his [article on Medium](https://codeburst.io/the-simple-rules-to-this-in-javascript-35d97f31bde3).\n\n#### Can you give an example of one of the ways that working with this has changed in ES6?\n\nES6 allows you to use [arrow functions](http://2ality.com/2017/12/alternate-this.html#arrow-functions) which uses the [enclosing lexical scope](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#No_separate_this). This is usually convenient, but does prevent the caller from controlling context via `.call` or `.apply`—the consequences being that a library such as `jQuery` will not properly bind `this` in your event handler functions. Thus, it's important to keep this in mind when refactoring large legacy applications.\n\n#### References\n\n- https://codeburst.io/the-simple-rules-to-this-in-javascript-35d97f31bde3\n- https://stackoverflow.com/a/3127440/1751946"},{"markdown":{"question":"data-\\*","answer":"Question: What is the use of data- attribute?\n\nAnswer: allow you to store extra information/ data in the DOM. u can write valid html with embedded private data. You can easily access data attribute by using javascript and hence a lot of libraries like knockout uses it.\n\n```html\n<div id=\"myDiv\" data-user=\"jsDude\" data-list-size=\"5\" data-maxage=\"180\"></div>\n```"},"original":{"markdown":"## data-\\*\n\nQuestion: What is the use of data- attribute?\n\nAnswer: allow you to store extra information/ data in the DOM. u can write valid html with embedded private data. You can easily access data attribute by using javascript and hence a lot of libraries like knockout uses it.\n\n```html\n<div id=\"myDiv\" data-user=\"jsDude\" data-list-size=\"5\" data-maxage=\"180\"></div>\n```\n","html":"<h2>data-*</h2>\n<p>Question: What is the use of data- attribute?</p>\n<p>Answer: allow you to store extra information/ data in the DOM. u can write valid html with embedded private data. You can easily access data attribute by using javascript and hence a lot of libraries like knockout uses it.</p>\n<pre><code class=\"prettyprint html\">&lt;div id=\"myDiv\" data-user=\"jsDude\" data-list-size=\"5\" data-maxage=\"180\"&gt;&lt;/div&gt;</code></pre>"},"_id":"data-\\*","html":{"question":"<p>data-*</p>","answer":"<p>Question: What is the use of data- attribute?</p>\n<p>Answer: allow you to store extra information/ data in the DOM. u can write valid html with embedded private data. You can easily access data attribute by using javascript and hence a lot of libraries like knockout uses it.</p>\n<pre><code class=\"prettyprint html\">&lt;div id=\"myDiv\" data-user=\"jsDude\" data-list-size=\"5\" data-maxage=\"180\"&gt;&lt;/div&gt;</code></pre>"},"label":"html","filename":"data-attribute","question":"data-\\*","answer":"Question: What is the use of data- attribute?\n\nAnswer: allow you to store extra information/ data in the DOM. u can write valid html with embedded private data. You can easily access data attribute by using javascript and hence a lot of libraries like knockout uses it.\n\n```html\n<div id=\"myDiv\" data-user=\"jsDude\" data-list-size=\"5\" data-maxage=\"180\"></div>\n```"},{"markdown":{"question":"What does i18n stand for?","answer":"Internationalization\n\nInternationalization is the design and development of a product, application or document content that enables easy localization for target audiences that vary in culture, region, or language. Internationalization is often written in English as `i18n`, where `18` is the number of letters between `i` and `n` in the English word.\n\n---\n\nQuestion\n\nWhat do the terms 'internationalization' and 'localization' mean, and how are they related?\nAnswer\n\nEveryone has their own preferred definitions for these terms. We provide some general, high-level descriptions here of how we tend to use these terms on the W3C Internationalization site.\n\n### What is the difference between localization and internationalization?\n\nInternationalization is the process of designing a software application so that it can be adapted to various languages and regions without engineering changes. Localization is the process of adapting internationalized software for a specific region or language by translating text and adding locale-specific components.\n\n#### References\n\n- https://www.w3.org/International/questions/qa-i18n"},"original":{"markdown":"## What does i18n stand for?\n\nInternationalization\n\nInternationalization is the design and development of a product, application or document content that enables easy localization for target audiences that vary in culture, region, or language. Internationalization is often written in English as `i18n`, where `18` is the number of letters between `i` and `n` in the English word.\n\n---\n\nQuestion\n\nWhat do the terms 'internationalization' and 'localization' mean, and how are they related?\nAnswer\n\nEveryone has their own preferred definitions for these terms. We provide some general, high-level descriptions here of how we tend to use these terms on the W3C Internationalization site.\n\n### What is the difference between localization and internationalization?\n\nInternationalization is the process of designing a software application so that it can be adapted to various languages and regions without engineering changes. Localization is the process of adapting internationalized software for a specific region or language by translating text and adding locale-specific components.\n\n#### References\n\n- https://www.w3.org/International/questions/qa-i18n\n","html":"<h2>What does i18n stand for?</h2>\n<p>Internationalization</p>\n<p>Internationalization is the design and development of a product, application or document content that enables easy localization for target audiences that vary in culture, region, or language. Internationalization is often written in English as <code>i18n</code>, where <code>18</code> is the number of letters between <code>i</code> and <code>n</code> in the English word.</p>\n<hr />\n<p>Question</p>\n<p>What do the terms 'internationalization' and 'localization' mean, and how are they related?\nAnswer</p>\n<p>Everyone has their own preferred definitions for these terms. We provide some general, high-level descriptions here of how we tend to use these terms on the W3C Internationalization site.</p>\n<h3>What is the difference between localization and internationalization?</h3>\n<p>Internationalization is the process of designing a software application so that it can be adapted to various languages and regions without engineering changes. Localization is the process of adapting internationalized software for a specific region or language by translating text and adding locale-specific components.</p>\n<h4>References</h4><ul><li><a href=\"https://www.w3.org/International/questions/qa-i18n\">https://www.w3.org/International/questions/qa-i18n</a></li></ul>"},"_id":"What-does-i18n-stand-for","html":{"question":"<p>What does i18n stand for?</p>","answer":"<p>Internationalization</p>\n<p>Internationalization is the design and development of a product, application or document content that enables easy localization for target audiences that vary in culture, region, or language. Internationalization is often written in English as <code>i18n</code>, where <code>18</code> is the number of letters between <code>i</code> and <code>n</code> in the English word.</p>\n<hr />\n<p>Question</p>\n<p>What do the terms 'internationalization' and 'localization' mean, and how are they related?\nAnswer</p>\n<p>Everyone has their own preferred definitions for these terms. We provide some general, high-level descriptions here of how we tend to use these terms on the W3C Internationalization site.</p>\n<h3>What is the difference between localization and internationalization?</h3>\n<p>Internationalization is the process of designing a software application so that it can be adapted to various languages and regions without engineering changes. Localization is the process of adapting internationalized software for a specific region or language by translating text and adding locale-specific components.</p>\n<h4>References</h4><ul><li><a href=\"https://www.w3.org/International/questions/qa-i18n\">https://www.w3.org/International/questions/qa-i18n</a></li></ul>"},"label":"html","filename":"i18n","question":"What does i18n stand for?","answer":"Internationalization\n\nInternationalization is the design and development of a product, application or document content that enables easy localization for target audiences that vary in culture, region, or language. Internationalization is often written in English as `i18n`, where `18` is the number of letters between `i` and `n` in the English word.\n\n---\n\nQuestion\n\nWhat do the terms 'internationalization' and 'localization' mean, and how are they related?\nAnswer\n\nEveryone has their own preferred definitions for these terms. We provide some general, high-level descriptions here of how we tend to use these terms on the W3C Internationalization site.\n\n### What is the difference between localization and internationalization?\n\nInternationalization is the process of designing a software application so that it can be adapted to various languages and regions without engineering changes. Localization is the process of adapting internationalized software for a specific region or language by translating text and adding locale-specific components.\n\n#### References\n\n- https://www.w3.org/International/questions/qa-i18n"},{"markdown":{"question":"doctype","answer":"Question: What is doctype? Why do u need it?\n\nAnswer: doctype is an instruction to the browser to inform about the version of html document and how browser should render it.\n\nIt ensures how element should be displayed on the page by most of the browser. And it also makes browser's life easier. otherwise, browser will guess and will go to quirks mode. Moreover, doctype is required to validate markup.\n\n```html\n<!DOCTYPE html>\n\n<meta charset=\"UTF-8\" />\n```\n\nextra: this the first tag of html file, don't need a closing tag and not case sensitive."},"original":{"markdown":"## doctype\n\nQuestion: What is doctype? Why do u need it?\n\nAnswer: doctype is an instruction to the browser to inform about the version of html document and how browser should render it.\n\nIt ensures how element should be displayed on the page by most of the browser. And it also makes browser's life easier. otherwise, browser will guess and will go to quirks mode. Moreover, doctype is required to validate markup.\n\n```html\n<!DOCTYPE html>\n\n<meta charset=\"UTF-8\" />\n```\n\nextra: this the first tag of html file, don't need a closing tag and not case sensitive.\n","html":"<h2>doctype</h2>\n<p>Question: What is doctype? Why do u need it?</p>\n<p>Answer: doctype is an instruction to the browser to inform about the version of html document and how browser should render it.</p>\n<p>It ensures how element should be displayed on the page by most of the browser. And it also makes browser's life easier. otherwise, browser will guess and will go to quirks mode. Moreover, doctype is required to validate markup.</p>\n<pre><code class=\"prettyprint html\">&lt;!DOCTYPE html&gt;\n\n&lt;meta charset=\"UTF-8\" /&gt;</code></pre>\n<p>extra: this the first tag of html file, don't need a closing tag and not case sensitive.</p>"},"_id":"doctype","html":{"question":"<p>doctype</p>","answer":"<p>Question: What is doctype? Why do u need it?</p>\n<p>Answer: doctype is an instruction to the browser to inform about the version of html document and how browser should render it.</p>\n<p>It ensures how element should be displayed on the page by most of the browser. And it also makes browser's life easier. otherwise, browser will guess and will go to quirks mode. Moreover, doctype is required to validate markup.</p>\n<pre><code class=\"prettyprint html\">&lt;!DOCTYPE html&gt;\n\n&lt;meta charset=\"UTF-8\" /&gt;</code></pre>\n<p>extra: this the first tag of html file, don't need a closing tag and not case sensitive.</p>"},"label":"html","filename":"doctype","question":"doctype","answer":"Question: What is doctype? Why do u need it?\n\nAnswer: doctype is an instruction to the browser to inform about the version of html document and how browser should render it.\n\nIt ensures how element should be displayed on the page by most of the browser. And it also makes browser's life easier. otherwise, browser will guess and will go to quirks mode. Moreover, doctype is required to validate markup.\n\n```html\n<!DOCTYPE html>\n\n<meta charset=\"UTF-8\" />\n```\n\nextra: this the first tag of html file, don't need a closing tag and not case sensitive."},{"markdown":{"question":"Quirks Mode and Standards Mode","answer":"Quirks mode refers to a technique used by some web browsers for the sake of maintaining backward compatibility with web pages designed for old web browsers instead of strictly complying with W3C and IETF standards in standards mode.\n\nIn quirks mode, layout emulates nonstandard behavior in Navigator 4 and Internet Explorer 5. ... In full standards mode, the behavior is (hopefully) the behavior described by the HTML and CSS specifications. In almost standards mode, there are only a very small number of quirks implemented.28 Jul 2021\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Hello World!</title>\n  </head>\n  <body></body>\n</html>\n```\n\n## related\n\n[doctype](doctype.md)\n\n#### References\n\n- https://en.wikipedia.org/wiki/Quirks_mode\n- https://developer.mozilla.org/en-US/docs/Web/HTML/Quirks_Mode_and_Standards_Mode"},"original":{"markdown":"## Quirks Mode and Standards Mode\n\nQuirks mode refers to a technique used by some web browsers for the sake of maintaining backward compatibility with web pages designed for old web browsers instead of strictly complying with W3C and IETF standards in standards mode.\n\nIn quirks mode, layout emulates nonstandard behavior in Navigator 4 and Internet Explorer 5. ... In full standards mode, the behavior is (hopefully) the behavior described by the HTML and CSS specifications. In almost standards mode, there are only a very small number of quirks implemented.28 Jul 2021\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Hello World!</title>\n  </head>\n  <body></body>\n</html>\n```\n\n## related\n\n[doctype](doctype.md)\n\n#### References\n\n- https://en.wikipedia.org/wiki/Quirks_mode\n- https://developer.mozilla.org/en-US/docs/Web/HTML/Quirks_Mode_and_Standards_Mode\n","html":"<h2>Quirks Mode and Standards Mode</h2>\n<p>Quirks mode refers to a technique used by some web browsers for the sake of maintaining backward compatibility with web pages designed for old web browsers instead of strictly complying with W3C and IETF standards in standards mode.</p>\n<p>In quirks mode, layout emulates nonstandard behavior in Navigator 4 and Internet Explorer 5. ... In full standards mode, the behavior is (hopefully) the behavior described by the HTML and CSS specifications. In almost standards mode, there are only a very small number of quirks implemented.28 Jul 2021</p>\n<pre><code class=\"prettyprint html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;title&gt;Hello World!&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<h2>related</h2>\n<p><a href=\"doctype.md\">doctype</a></p>\n<h4>References</h4><ul><li><a href=\"https://en.wikipedia.org/wiki/Quirks_mode\">https://en.wikipedia.org/wiki/Quirks_mode</a></li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Quirks_Mode_and_Standards_Mode\">https://developer.mozilla.org/en-US/docs/Web/HTML/Quirks_Mode_and_Standards_Mode</a></li></ul>"},"_id":"Quirks-Mode-and-Standards-Mode","html":{"question":"<p>Quirks Mode and Standards Mode</p>","answer":"<p>Quirks mode refers to a technique used by some web browsers for the sake of maintaining backward compatibility with web pages designed for old web browsers instead of strictly complying with W3C and IETF standards in standards mode.</p>\n<p>In quirks mode, layout emulates nonstandard behavior in Navigator 4 and Internet Explorer 5. ... In full standards mode, the behavior is (hopefully) the behavior described by the HTML and CSS specifications. In almost standards mode, there are only a very small number of quirks implemented.28 Jul 2021</p>\n<pre><code class=\"prettyprint html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;title&gt;Hello World!&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<h2>related</h2>\n<p><a href=\"doctype.md\">doctype</a></p>\n<h4>References</h4><ul><li><a href=\"https://en.wikipedia.org/wiki/Quirks_mode\">https://en.wikipedia.org/wiki/Quirks_mode</a></li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Quirks_Mode_and_Standards_Mode\">https://developer.mozilla.org/en-US/docs/Web/HTML/Quirks_Mode_and_Standards_Mode</a></li></ul>"},"label":"html","filename":"quirks-mode","question":"Quirks Mode and Standards Mode","answer":"Quirks mode refers to a technique used by some web browsers for the sake of maintaining backward compatibility with web pages designed for old web browsers instead of strictly complying with W3C and IETF standards in standards mode.\n\nIn quirks mode, layout emulates nonstandard behavior in Navigator 4 and Internet Explorer 5. ... In full standards mode, the behavior is (hopefully) the behavior described by the HTML and CSS specifications. In almost standards mode, there are only a very small number of quirks implemented.28 Jul 2021\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Hello World!</title>\n  </head>\n  <body></body>\n</html>\n```\n\n## related\n\n[doctype](doctype.md)\n\n#### References\n\n- https://en.wikipedia.org/wiki/Quirks_mode\n- https://developer.mozilla.org/en-US/docs/Web/HTML/Quirks_Mode_and_Standards_Mode"},{"markdown":{"question":"http request","answer":"Question: Does the following trigger http request at the time of page load?\n\n```html\n<img src=\"mypic.jpg\" style=\"visibility: hidden\" alt=\"My photo\" />\n```\n\nAnswer: yes\n\n```html\n<div style=\"display: none;\">\n  <img src=\"mypic.jpg\" alt=\"My photo\" />\n</div>\n```\n\nAnswer: yes"},"original":{"markdown":"## http request\n\nQuestion: Does the following trigger http request at the time of page load?\n\n```html\n<img src=\"mypic.jpg\" style=\"visibility: hidden\" alt=\"My photo\" />\n```\n\nAnswer: yes\n\n```html\n<div style=\"display: none;\">\n  <img src=\"mypic.jpg\" alt=\"My photo\" />\n</div>\n```\n\nAnswer: yes\n","html":"<h2>http request</h2>\n<p>Question: Does the following trigger http request at the time of page load?</p>\n<pre><code class=\"prettyprint html\">&lt;img src=\"mypic.jpg\" style=\"visibility: hidden\" alt=\"My photo\" /&gt;</code></pre>\n<p>Answer: yes</p>\n<pre><code class=\"prettyprint html\">&lt;div style=\"display: none;\"&gt;\n  &lt;img src=\"mypic.jpg\" alt=\"My photo\" /&gt;\n&lt;/div&gt;</code></pre>\n<p>Answer: yes</p>"},"_id":"http-request","html":{"question":"<p>http request</p>","answer":"<p>Question: Does the following trigger http request at the time of page load?</p>\n<pre><code class=\"prettyprint html\">&lt;img src=\"mypic.jpg\" style=\"visibility: hidden\" alt=\"My photo\" /&gt;</code></pre>\n<p>Answer: yes</p>\n<pre><code class=\"prettyprint html\">&lt;div style=\"display: none;\"&gt;\n  &lt;img src=\"mypic.jpg\" alt=\"My photo\" /&gt;\n&lt;/div&gt;</code></pre>\n<p>Answer: yes</p>"},"label":"html","filename":"http-request","question":"http request","answer":"Question: Does the following trigger http request at the time of page load?\n\n```html\n<img src=\"mypic.jpg\" style=\"visibility: hidden\" alt=\"My photo\" />\n```\n\nAnswer: yes\n\n```html\n<div style=\"display: none;\">\n  <img src=\"mypic.jpg\" alt=\"My photo\" />\n</div>\n```\n\nAnswer: yes"},{"markdown":{"question":"download order","answer":"Question: Does style1.css have to be downloaded and parsed before style2.css can be fetched?\n\n```html\n<head>\n  <link href=\"style1.css\" rel=\"stylesheet\" />\n  <link href=\"style2.css\" rel=\"stylesheet\" />\n</head>\n```\n\nAnswer: No\n\nQuestion: Does style2.css have to be downloaded and parsed before Paragraph 1 is rendered on the page?\n\n```html\n<head>\n  <link href=\"style1.css\" rel=\"stylesheet\" />\n</head>\n<body>\n  <p>Paragraph 1</p>\n  <p>Paragraph 2</p>\n  <link href=\"style2.css\" rel=\"stylesheet\" />\n</body>\n```\n\nAnswer: yes"},"original":{"markdown":"## download order\n\nQuestion: Does style1.css have to be downloaded and parsed before style2.css can be fetched?\n\n```html\n<head>\n  <link href=\"style1.css\" rel=\"stylesheet\" />\n  <link href=\"style2.css\" rel=\"stylesheet\" />\n</head>\n```\n\nAnswer: No\n\nQuestion: Does style2.css have to be downloaded and parsed before Paragraph 1 is rendered on the page?\n\n```html\n<head>\n  <link href=\"style1.css\" rel=\"stylesheet\" />\n</head>\n<body>\n  <p>Paragraph 1</p>\n  <p>Paragraph 2</p>\n  <link href=\"style2.css\" rel=\"stylesheet\" />\n</body>\n```\n\nAnswer: yes\n","html":"<h2>download order</h2>\n<p>Question: Does style1.css have to be downloaded and parsed before style2.css can be fetched?</p>\n<pre><code class=\"prettyprint html\">&lt;head&gt;\n  &lt;link href=\"style1.css\" rel=\"stylesheet\" /&gt;\n  &lt;link href=\"style2.css\" rel=\"stylesheet\" /&gt;\n&lt;/head&gt;</code></pre>\n<p>Answer: No</p>\n<p>Question: Does style2.css have to be downloaded and parsed before Paragraph 1 is rendered on the page?</p>\n<pre><code class=\"prettyprint html\">&lt;head&gt;\n  &lt;link href=\"style1.css\" rel=\"stylesheet\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Paragraph 1&lt;/p&gt;\n  &lt;p&gt;Paragraph 2&lt;/p&gt;\n  &lt;link href=\"style2.css\" rel=\"stylesheet\" /&gt;\n&lt;/body&gt;</code></pre>\n<p>Answer: yes</p>"},"_id":"download-order","html":{"question":"<p>download order</p>","answer":"<p>Question: Does style1.css have to be downloaded and parsed before style2.css can be fetched?</p>\n<pre><code class=\"prettyprint html\">&lt;head&gt;\n  &lt;link href=\"style1.css\" rel=\"stylesheet\" /&gt;\n  &lt;link href=\"style2.css\" rel=\"stylesheet\" /&gt;\n&lt;/head&gt;</code></pre>\n<p>Answer: No</p>\n<p>Question: Does style2.css have to be downloaded and parsed before Paragraph 1 is rendered on the page?</p>\n<pre><code class=\"prettyprint html\">&lt;head&gt;\n  &lt;link href=\"style1.css\" rel=\"stylesheet\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;p&gt;Paragraph 1&lt;/p&gt;\n  &lt;p&gt;Paragraph 2&lt;/p&gt;\n  &lt;link href=\"style2.css\" rel=\"stylesheet\" /&gt;\n&lt;/body&gt;</code></pre>\n<p>Answer: yes</p>"},"label":"html","filename":"download-order","question":"download order","answer":"Question: Does style1.css have to be downloaded and parsed before style2.css can be fetched?\n\n```html\n<head>\n  <link href=\"style1.css\" rel=\"stylesheet\" />\n  <link href=\"style2.css\" rel=\"stylesheet\" />\n</head>\n```\n\nAnswer: No\n\nQuestion: Does style2.css have to be downloaded and parsed before Paragraph 1 is rendered on the page?\n\n```html\n<head>\n  <link href=\"style1.css\" rel=\"stylesheet\" />\n</head>\n<body>\n  <p>Paragraph 1</p>\n  <p>Paragraph 2</p>\n  <link href=\"style2.css\" rel=\"stylesheet\" />\n</body>\n```\n\nAnswer: yes"},{"markdown":{"question":"span vs div","answer":"Question: What is the difference between span and div?\n\nAnswer: div is a block element and span is inline element.\n\nExtra: It is illegal to put block element inside inline element. div can have a p tag and a p tag can have a span. However, span can't have a div or p tag inside.\n\nref: Stackoverflow: div vs span"},"original":{"markdown":"## span vs div\n\nQuestion: What is the difference between span and div?\n\nAnswer: div is a block element and span is inline element.\n\nExtra: It is illegal to put block element inside inline element. div can have a p tag and a p tag can have a span. However, span can't have a div or p tag inside.\n\nref: Stackoverflow: div vs span\n","html":"<h2>span vs div</h2>\n<p>Question: What is the difference between span and div?</p>\n<p>Answer: div is a block element and span is inline element.</p>\n<p>Extra: It is illegal to put block element inside inline element. div can have a p tag and a p tag can have a span. However, span can't have a div or p tag inside.</p>\n<p>ref: Stackoverflow: div vs span</p>"},"_id":"span-vs-div","html":{"question":"<p>span vs div</p>","answer":"<p>Question: What is the difference between span and div?</p>\n<p>Answer: div is a block element and span is inline element.</p>\n<p>Extra: It is illegal to put block element inside inline element. div can have a p tag and a p tag can have a span. However, span can't have a div or p tag inside.</p>\n<p>ref: Stackoverflow: div vs span</p>"},"label":"html","filename":"span-div","question":"span vs div","answer":"Question: What is the difference between span and div?\n\nAnswer: div is a block element and span is inline element.\n\nExtra: It is illegal to put block element inside inline element. div can have a p tag and a p tag can have a span. However, span can't have a div or p tag inside.\n\nref: Stackoverflow: div vs span"},{"markdown":{"question":"div, section & article","answer":"Question: When should you use section, div or article?\n\nAnswer:\n\n<section>, group of content inside is related to a single theme, and should appear as an entry in an outline of the page. It’s a chunk of related content, like a subsection of a long article, a major part of the page (eg the news section on the homepage), or a page in a webapp’s tabbed interface. A section normally has a heading (title) and maybe a footer too.\n\n<article>, represents a complete, or self-contained, composition in a document, page, application, or site and that is, in principle, independently distributable or reusable, e.g. in syndication. This could be a forum post, a magazine or newspaper article, a blog entry, a user-submitted comment, an interactive widget or gadget, or any other independent item of content.\n\n<div>, on the other hand, does not convey any meaning, aside from any found in its class, lang and title attributes.\n\nGood Summary:div, section & article\n\nExtra: Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable. Use of more appropriate elements instead of the div element leads to better accessibility for readers and easier maintainability for authors.\n\nref: (copied from) W3C: section, W3C: div, W3c: article"},"original":{"markdown":"## div, section & article\n\nQuestion: When should you use section, div or article?\n\nAnswer:\n\n<section>, group of content inside is related to a single theme, and should appear as an entry in an outline of the page. It’s a chunk of related content, like a subsection of a long article, a major part of the page (eg the news section on the homepage), or a page in a webapp’s tabbed interface. A section normally has a heading (title) and maybe a footer too.\n\n<article>, represents a complete, or self-contained, composition in a document, page, application, or site and that is, in principle, independently distributable or reusable, e.g. in syndication. This could be a forum post, a magazine or newspaper article, a blog entry, a user-submitted comment, an interactive widget or gadget, or any other independent item of content.\n\n<div>, on the other hand, does not convey any meaning, aside from any found in its class, lang and title attributes.\n\nGood Summary:div, section & article\n\nExtra: Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable. Use of more appropriate elements instead of the div element leads to better accessibility for readers and easier maintainability for authors.\n\nref: (copied from) W3C: section, W3C: div, W3c: article\n","html":"<h2>div, section &amp; article</h2>\n<p>Question: When should you use section, div or article?</p>\n<p>Answer:</p><section>, group of content inside is related to a single theme, and should appear as an entry in an outline of the page. It’s a chunk of related content, like a subsection of a long article, a major part of the page (eg the news section on the homepage), or a page in a webapp’s tabbed interface. A section normally has a heading (title) and maybe a footer too.<article>, represents a complete, or self-contained, composition in a document, page, application, or site and that is, in principle, independently distributable or reusable, e.g. in syndication. This could be a forum post, a magazine or newspaper article, a blog entry, a user-submitted comment, an interactive widget or gadget, or any other independent item of content.<div>, on the other hand, does not convey any meaning, aside from any found in its class, lang and title attributes.\n<p>Good Summary:div, section &amp; article</p>\n<p>Extra: Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable. Use of more appropriate elements instead of the div element leads to better accessibility for readers and easier maintainability for authors.</p>\n<p>ref: (copied from) W3C: section, W3C: div, W3c: article</p>"},"_id":"div,-section-&-article","html":{"question":"<p>div, section &amp; article</p>","answer":"<p>Question: When should you use section, div or article?</p>\n<p>Answer:</p><section>, group of content inside is related to a single theme, and should appear as an entry in an outline of the page. It’s a chunk of related content, like a subsection of a long article, a major part of the page (eg the news section on the homepage), or a page in a webapp’s tabbed interface. A section normally has a heading (title) and maybe a footer too.<article>, represents a complete, or self-contained, composition in a document, page, application, or site and that is, in principle, independently distributable or reusable, e.g. in syndication. This could be a forum post, a magazine or newspaper article, a blog entry, a user-submitted comment, an interactive widget or gadget, or any other independent item of content.<div>, on the other hand, does not convey any meaning, aside from any found in its class, lang and title attributes.\n<p>Good Summary:div, section &amp; article</p>\n<p>Extra: Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable. Use of more appropriate elements instead of the div element leads to better accessibility for readers and easier maintainability for authors.</p>\n<p>ref: (copied from) W3C: section, W3C: div, W3c: article</p>"},"label":"html","filename":"div-section-article","question":"div, section & article","answer":"Question: When should you use section, div or article?\n\nAnswer:\n\n<section>, group of content inside is related to a single theme, and should appear as an entry in an outline of the page. It’s a chunk of related content, like a subsection of a long article, a major part of the page (eg the news section on the homepage), or a page in a webapp’s tabbed interface. A section normally has a heading (title) and maybe a footer too.\n\n<article>, represents a complete, or self-contained, composition in a document, page, application, or site and that is, in principle, independently distributable or reusable, e.g. in syndication. This could be a forum post, a magazine or newspaper article, a blog entry, a user-submitted comment, an interactive widget or gadget, or any other independent item of content.\n\n<div>, on the other hand, does not convey any meaning, aside from any found in its class, lang and title attributes.\n\nGood Summary:div, section & article\n\nExtra: Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable. Use of more appropriate elements instead of the div element leads to better accessibility for readers and easier maintainability for authors.\n\nref: (copied from) W3C: section, W3C: div, W3c: article"}]